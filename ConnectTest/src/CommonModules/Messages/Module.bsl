
Функция ПолучательPush(DeviceID, ТипПодписчика) Экспорт
    xdtoПодписчик = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://v8.1c.ru/8.3/data/ext","DeliverableNotificationSubscriberID"));
    xdtoПодписчик.DeviceID = DeviceID;
    xdtoПодписчик.SubscriberType = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://v8.1c.ru/8.3/data/ext","DeliverableNotificationSubscriberType"), ТипПодписчика);
    НовыйСериализаторXDTO = Новый СериализаторXDTO(ФабрикаXDTO);
    Подписчик = НовыйСериализаторXDTO.ПрочитатьXDTO(xdtoПодписчик);        
    Возврат Подписчик;    
КонецФункции

Function newMessage(messageData, sendImmediately = False) Export
	
	messageObject = Catalogs.messages.CreateItem();

	messageObject.objectId = ?(messageData.Property("objectId"), messageData.objectId, "");
	messageObject.objectType = ?(messageData.Property("objectType"), messageData.objectType, "");
	messageObject.action = ?(messageData.Property("action"), messageData.action, "");
	messageObject.registrationDate = ToUniversalTime(CurrentDate());
	messageObject.title = ?(messageData.Property("title"), messageData.title, "");
	messageObject.gym = ?(messageData.Property("gym"), messageData.gym, Catalogs.gyms.EmptyRef());
	messageObject.phone = StrReplace(?(messageData.Property("phone"), messageData.phone, ""), "+", "");
	messageObject.user = ?(messageData.Property("user"), messageData.user, Catalogs.users.EmptyRef());	
	messageObject.priority = ?(messageData.Property("priority"), messageData.priority, 10000);
	messageObject.text = ?(messageData.Property("text"), messageData.text, "");
	messageObject.holding = messageData.holding;

	For Each informationChannel In messageData.informationChannels Do
		newRow = messageObject.channelPriorities.Add();
		newRow.channel = informationChannel;
	EndDo;
	messageObject.Write();
	
	If sendImmediately then
		Messages.ОтправитьСмсПоХолдингу(GeneralReuse.nodeMessagesToSend(informationChannel), GeneralReuse.nodeMessagesToCheckStatus(informationChannel), messageData.holding, informationChannel);	
	Else
		If messageObject.channelPriorities.Count() > 0 Then
			ExchangePlans.RecordChanges(GeneralReuse.nodeMessagesToSend(messageObject.channelPriorities[0].channel), messageObject);
		EndIf;
	EndIf;

	Return messageObject.ref;
	
EndFunction

Функция ДанныеPush(action = "", objectId = "", objectType = "", noteId = "") Экспорт
	СтруктураJSON	= Новый Структура;
	СтруктураJSON.Вставить("action", action);
	СтруктураJSON.Вставить("objectId", objectId);
	СтруктураJSON.Вставить("objectType", objectType);
	СтруктураJSON.Вставить("noteId", XMLСтрока(noteId));
	Возврат	HTTP.encodeJSON(СтруктураJSON);    
КонецФункции

Процедура ОтправитьPush(Параметры) Экспорт
	
	Если Параметры.deviceToken <> "" Тогда
		Уведомление				= Новый ДоставляемоеУведомление;
		Уведомление.title	= Параметры.title;
		Уведомление.text		= Параметры.text;
		Уведомление.Наклейка	= Параметры.Наклейка;		
		//Уведомление.ЗвуковоеОповещение = ЗвуковоеОповещение.ПоУмолчанию;	
		Уведомление.Получатели.Добавить(ПолучательPush(Параметры.ТокенУстройства, Параметры.ТипПодписчика));
		
		СтруктураJSON	= Новый Структура;
		СтруктураJSON.Вставить("action", Параметры.Действие);
		СтруктураJSON.Вставить("objectId", Параметры.ОбъектИД);
		СтруктураJSON.Вставить("objectType", Параметры.ОбъектТип);
		СтруктураJSON.Вставить("noteId", XMLСтрока(Параметры.Сообщение));
		Уведомление.Данные	= HTTP.encodeJSON(СтруктураJSON);
		
		ОтправкаДоставляемыхУведомлений.Отправить(Уведомление, GeneralReuse.getAuthorizationKey(Параметры.ОперационнаяСистема, Параметры.Сертификат));
		Если Не Параметры.message.Пустая() Тогда
			ДобавитьИсторию(Параметры.Сообщение, Параметры.КаналИнформирования, Перечисления.messageStatuses.sent, "", УниверсальноеВремя(ТекущаяДата()), Параметры.Токен);
		КонецЕсли;
	КонецЕсли;
	
	Если Не Параметры.message.Пустая() Тогда
		ПланыОбмена.УдалитьРегистрациюИзменений(Параметры.УзелСообщенияКОтправке, Параметры.Сообщение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьСМС(Параметры) Экспорт
	
	Ответ	= Новый Структура("id, messageStatus, error, period", "", Перечисления.messageStatuses.notSent, "", Неопределено);
	
	Если Параметры.SMSProvider = Перечисления.SMSProviders.Rapporto Тогда
		Ответ	= ИнтеграцияСRapporto.ОтправитьСМС(Параметры, Ответ);
	ИначеЕсли Параметры.SMSProvider = Перечисления.SMSProviders.Smstraffic Тогда
		Ответ	= ИнтеграцияСSMSTraffic.ОтправитьСМС(Параметры, Ответ);
	ИначеЕсли Параметры.SMSProvider = Перечисления.SMSProviders.IDMkg Тогда
		Ответ	= ИнтеграцияСIDMkg.ОтправитьСМС(Параметры, Ответ);
	ИначеЕсли Параметры.SMSProvider = Перечисления.SMSProviders.Stramedia Тогда
		Ответ	= ИнтеграцияСStramedia.ОтправитьСМС(Параметры, Ответ);
	ИначеЕсли Параметры.SMSProvider = Перечисления.SMSProviders.SmsGold Тогда
		Ответ	= ИнтеграцияСSmsGold.ОтправитьСМС(Параметры, Ответ);	
	КонецЕсли;	
	
	Если Ответ.messageStatus = Перечисления.messageStatuses.sent Тогда
		ДобавитьИДСообщения(Параметры.Сообщение, Перечисления.informationChannels.sms, Ответ.ИД);
		ПланыОбмена.УдалитьРегистрациюИзменений(Параметры.УзелСообщенияКОтправке, Параметры.Сообщение);
		ПланыОбмена.ЗарегистрироватьИзменения(Параметры.УзелСообщенияПроверкаСтатуса, Параметры.Сообщение);
	ИначеЕсли Ответ.messageStatus = Перечисления.messageStatuses.notSent Тогда
		ПланыОбмена.УдалитьРегистрациюИзменений(Параметры.УзелСообщенияКОтправке, Параметры.Сообщение);
		ИспользоватьСледующийКаналИнформирования(Параметры.Сообщение, Перечисления.informationChannels.sms);
	КонецЕсли;
	
	ДобавитьИсторию(Параметры.Сообщение, Перечисления.informationChannels.sms, Ответ.СтатусСообщения, Ответ.Ошибка, Ответ.Период);
	
КонецПроцедуры

Процедура ОтправитьСообщения(КаналИнформирования) Экспорт
	
	УзелСообщенияКОтправке			= GeneralReuse.nodeMessagesToSend(КаналИнформирования);
	УзелСообщенияПроверкаСтатуса	= GeneralReuse.nodeMessagesToCheckStatus(КаналИнформирования);	
	
	Если КаналИнформирования = Перечисления.informationChannels.sms Тогда
		ИмяМетода	= "РаботаССообщениями.ОтправитьСмсПоХолдингу";
	ИначеЕсли КаналИнформирования = Перечисления.informationChannels.pushEmployee Тогда
		ИмяМетода	= "РаботаССообщениями.ОтправитьPushПоХолдингу";
	ИначеЕсли КаналИнформирования = Перечисления.informationChannels.pushCustomer Тогда
		ИмяМетода	= "РаботаССообщениями.ОтправитьPushПоХолдингу";	
	Иначе
		ИмяМетода	= "";
	КонецЕсли;	
	
	Если ИмяМетода <> "" Тогда 		
		пЗапрос	= Новый Запрос;
		пЗапрос.text	= "ВЫБРАТЬ РАЗЛИЧНЫЕ
		             	  |	СообщенияИзменения.Ссылка.holding КАК holding
		             	  |ИЗ
		             	  |	Справочник.messages.Изменения КАК СообщенияИзменения
		             	  |ГДЕ
		             	  |	СообщенияИзменения.Узел = &Узел";
		
		пЗапрос.УстановитьПараметр("Узел", УзелСообщенияКОтправке);		
		Выборка	= пЗапрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ПередаваемыеПараметры	= Новый Массив;
			ПередаваемыеПараметры.Добавить(УзелСообщенияКОтправке);
			ПередаваемыеПараметры.Добавить(УзелСообщенияПроверкаСтатуса);
			ПередаваемыеПараметры.Добавить(Выборка.Холдинг);
			ПередаваемыеПараметры.Добавить(КаналИнформирования);
			ФоновыеЗадания.Выполнить(ИмяМетода, ПередаваемыеПараметры, Новый УникальныйИдентификатор, "ОтправитьСообщения");			
		КонецЦикла;		
	КонецЕсли;
	
КонецПроцедуры 

Процедура ПроверитьСтатусСМС(Параметры) Экспорт
	
	Ответ	= Новый Структура("messageStatus, error, period", Перечисления.messageStatuses.notDelivered, "", Неопределено);
	
	Если Параметры.SMSProvider = Перечисления.SMSProviders.Rapporto Тогда
		Ответ	= ИнтеграцияСRapporto.ПроверитьСтатусСМС(Параметры, Ответ);
	ИначеЕсли Параметры.SMSProvider = Перечисления.SMSProviders.Smstraffic Тогда
		Ответ	= ИнтеграцияСSMSTraffic.ПроверитьСтатусСМС(Параметры, Ответ);
	ИначеЕсли Параметры.SMSProvider = Перечисления.SMSProviders.IDMkg Тогда
		Ответ	= ИнтеграцияСIDMkg.ПроверитьСтатусСМС(Параметры, Ответ);
	ИначеЕсли Параметры.SMSProvider = Перечисления.SMSProviders.Stramedia Тогда
		Ответ	= ИнтеграцияСStramedia.ПроверитьСтатусСМС(Параметры, Ответ);
	ИначеЕсли Параметры.SMSProvider = Перечисления.SMSProviders.SmsGold Тогда
		Ответ	= ИнтеграцияСSmsGold.ПроверитьСтатусСМС(Параметры, Ответ);
	КонецЕсли;	
	
	Если Ответ.messageStatus = Перечисления.messageStatuses.delivered Или Параметры.ВозрастСообщения > 2 Тогда		
		ПланыОбмена.УдалитьРегистрациюИзменений(Параметры.УзелСообщенияПроверкаСтатуса, Параметры.Сообщение);
	ИначеЕсли Ответ.messageStatus = Перечисления.messageStatuses.notDelivered Тогда		
		ИспользоватьСледующийКаналИнформирования(Параметры.Сообщение, Перечисления.informationChannels.sms);
	КонецЕсли;
	
	ДобавитьИсторию(Параметры.Сообщение, Перечисления.informationChannels.sms, Ответ.СтатусСообщения, Ответ.Ошибка, Ответ.Период);
	
КонецПроцедуры

Процедура ИспользоватьСледующийКаналИнформирования(Сообщение, ТекущийКаналИнформирования)
	СтрокаТекущийКанал	= Сообщение.channelPriorities.Найти(ТекущийКаналИнформирования, "channel");
	Если СтрокаТекущийКанал <> Неопределено Тогда		
		КоличествоКаналов		= Сообщение.channelPriorities.Количество();
		ИндексТекущегоКанала	= СтрокаТекущийКанал.НомерСтроки - 1;
		Если ИндексТекущегоКанала < КоличествоКаналов - 1 Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(GeneralReuse.nodeMessagesToSend(Сообщение.channelPriorities[ИндексТекущегоКанала + 1].Канал), Сообщение);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьИсторию(Сообщение, КаналИнформирования, СтатусСообщения, Ошибка, ДатаСобытия = Неопределено, Токен = Неопределено) Экспорт
	Запись	= РегистрыСведений.messagesLogs.СоздатьМенеджерЗаписи();
	Запись.period				= УниверсальноеВремя(ТекущаяДата());
	Запись.message			= Сообщение;
	Запись.informationChannel	= КаналИнформирования;	
	Запись.messageStatus		= СтатусСообщения;
	Запись.error				= Ошибка;
	Запись.recordDate			= ?(ДатаСобытия = Неопределено, Дата(1,1,1), ДатаСобытия);
	Запись.token				= Токен; 
	Запись.Записать();	
КонецПроцедуры

Процедура ДобавитьИДСообщения(Сообщение, КаналИнформирования, ИД) Экспорт
	Запись	= РегистрыСведений.messagesId.СоздатьМенеджерЗаписи();	
	Запись.message			= Сообщение;
	Запись.informationChannel	= КаналИнформирования;		
	Запись.id					= ИД;
	Запись.Записать();	
КонецПроцедуры

Процедура ОтправитьСмсПоХолдингу(УзелСообщенияКОтправке, УзелСообщенияПроверкаСтатуса, Холдинг, КаналИнформирования) Экспорт
		
	пЗапрос	= Новый Запрос;
	пЗапрос.text	= "ВЫБРАТЬ ПЕРВЫЕ 100
	             	  |	СообщенияИзменения.Ссылка КАК message,
	             	  |	СообщенияИзменения.Ссылка.phone КАК phone,
	             	  |	СообщенияИзменения.Ссылка.text КАК text,
	             	  |	&УзелСообщенияКОтправке КАК УзелСообщенияКОтправке,
	             	  |	&УзелСообщенияПроверкаСтатуса КАК УзелСообщенияПроверкаСтатуса,
	             	  |	ЕСТЬNULL(СмсПровайдерПоКлубу.SMSProvider, СмсПровайдер.SMSProvider) КАК SMSProvider,
	             	  |	ЕСТЬNULL(СмсПровайдерПоКлубу.server, СмсПровайдер.server) КАК server,
	             	  |	ЕСТЬNULL(СмсПровайдерПоКлубу.port, СмсПровайдер.port) КАК port,
	             	  |	ЕСТЬNULL(СмсПровайдерПоКлубу.user, СмсПровайдер.user) КАК user,
	             	  |	ЕСТЬNULL(СмсПровайдерПоКлубу.password, СмсПровайдер.password) КАК password,
	             	  |	ЕСТЬNULL(СмсПровайдерПоКлубу.timeout, СмсПровайдер.timeout) КАК timeout,
	             	  |	ЕСТЬNULL(СмсПровайдерПоКлубу.secureConnection, СмсПровайдер.secureConnection) КАК secureConnection,
	             	  |	ЕСТЬNULL(СмсПровайдерПоКлубу.UseOSAuthentication, СмсПровайдер.UseOSAuthentication) КАК UseOSAuthentication,
					  |	ЕСТЬNULL(СмсПровайдерПоКлубу.senderName, СмсПровайдер.senderName) КАК senderName
	             	  |ИЗ
	             	  |	Справочник.messages.Изменения КАК СообщенияИзменения
	             	  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.holdingsConnectionsSMSProviders КАК СмсПровайдерПоКлубу
	             	  |		ПО (&holding = СмсПровайдерПоКлубу.holding)
	             	  |			И (СмсПровайдерПоКлубу.gym = СообщенияИзменения.Ссылка.gym)
	             	  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.holdingsConnectionsSMSProviders КАК СмсПровайдер
	             	  |		ПО (&holding = СмсПровайдер.holding)
	             	  |			И (СмсПровайдер.gym = ЗНАЧЕНИЕ(Справочник.gyms.ПустаяСсылка))
	             	  |ГДЕ
	             	  |	СообщенияИзменения.Узел = &УзелСообщенияКОтправке
	             	  |	И СообщенияИзменения.Ссылка.holding = &holding
	             	  |
	             	  |УПОРЯДОЧИТЬ ПО
	             	  |	СообщенияИзменения.Ссылка.priority";
	
	пЗапрос.УстановитьПараметр("УзелСообщенияКОтправке", УзелСообщенияКОтправке);
	пЗапрос.УстановитьПараметр("УзелСообщенияПроверкаСтатуса", УзелСообщенияПроверкаСтатуса);
	пЗапрос.УстановитьПараметр("holding", Холдинг);
	
	Выборка	= пЗапрос.Выполнить().Выбрать();	
	
	Пока Выборка.Следующий() Цикл		
		Messages.ОтправитьСМС(Выборка);
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПроверитьСтатусСмсПоХолдингу(УзелСообщенияПроверкаСтатуса, Холдинг) Экспорт
		
	пЗапрос	= Новый Запрос;
	пЗапрос.text	= "ВЫБРАТЬ
	             	  |	РАЗНОСТЬДАТ(СообщенияИзменения.Ссылка.registrationDate, &ТекущаяДата, ДЕНЬ) КАК ВозрастСообщения,
	             	  |	&ТекущаяДата КАК ТекущаяДата,
	             	  |	СообщенияИзменения.Ссылка КАК message,
	             	  |	ИДСообщений.id КАК id,
	             	  |	&УзелСообщенияПроверкаСтатуса КАК УзелСообщенияПроверкаСтатуса,
	             	  |	ЕСТЬNULL(СмсПровайдерПоКлубу.SMSProvider, СмсПровайдер.SMSProvider) КАК SMSProvider,
	             	  |	ЕСТЬNULL(СмсПровайдерПоКлубу.server, СмсПровайдер.server) КАК server,
	             	  |	ЕСТЬNULL(СмсПровайдерПоКлубу.port, СмсПровайдер.port) КАК port,
	             	  |	ЕСТЬNULL(СмсПровайдерПоКлубу.user, СмсПровайдер.user) КАК user,
	             	  |	ЕСТЬNULL(СмсПровайдерПоКлубу.password, СмсПровайдер.password) КАК password,
	             	  |	ЕСТЬNULL(СмсПровайдерПоКлубу.timeout, СмсПровайдер.timeout) КАК timeout,
	             	  |	ЕСТЬNULL(СмсПровайдерПоКлубу.secureConnection, СмсПровайдер.secureConnection) КАК secureConnection,
	             	  |	ЕСТЬNULL(СмсПровайдерПоКлубу.UseOSAuthentication, СмсПровайдер.UseOSAuthentication) КАК UseOSAuthentication
	             	  |ИЗ
	             	  |	Справочник.messages.Изменения КАК СообщенияИзменения
	             	  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.holdingsConnectionsSMSProviders КАК СмсПровайдерПоКлубу
	             	  |		ПО (&holding = СмсПровайдерПоКлубу.holding)
	             	  |			И (СмсПровайдерПоКлубу.gym = СообщенияИзменения.Ссылка.gym)
	             	  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.holdingsConnectionsSMSProviders КАК СмсПровайдер
	             	  |		ПО (&holding = СмсПровайдер.holding)
	             	  |			И (СмсПровайдер.gym = ЗНАЧЕНИЕ(Справочник.gyms.ПустаяСсылка))
	             	  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.messagesId КАК ИДСообщений
	             	  |		ПО СообщенияИзменения.Ссылка = ИДСообщений.message
	             	  |			И (ИДСообщений.informationChannel = ЗНАЧЕНИЕ(Перечисление.informationChannels.sms))
	             	  |ГДЕ
	             	  |	СообщенияИзменения.Узел = &УзелСообщенияПроверкаСтатуса
	             	  |	И СообщенияИзменения.Ссылка.holding = &holding";
	
	пЗапрос.УстановитьПараметр("УзелСообщенияПроверкаСтатуса", УзелСообщенияПроверкаСтатуса);
	пЗапрос.УстановитьПараметр("holding", Холдинг);
	пЗапрос.УстановитьПараметр("ТекущаяДата", УниверсальноеВремя(ТекущаяДата()));
	                       
	Выборка	= пЗапрос.Выполнить().Выбрать();	
	
	Пока Выборка.Следующий() Цикл		
		Messages.ПроверитьСтатусСМС(Выборка);
	КонецЦикла;	
	
КонецПроцедуры

Процедура ОтправитьPushПоХолдингу(УзелСообщенияКОтправке, УзелСообщенияПроверкаСтатуса, Холдинг, КаналИнформирования) Экспорт
		
	пЗапрос	= Новый Запрос;
	пЗапрос.text	= "ВЫБРАТЬ ПЕРВЫЕ 100
	             	  |	СообщенияИзменения.Ссылка КАК message,
	             	  |	СообщенияИзменения.Ссылка.title КАК title,
	             	  |	СообщенияИзменения.Ссылка.text КАК text,
	             	  |	СообщенияИзменения.Ссылка.action КАК action,
	             	  |	СообщенияИзменения.Ссылка.objectId КАК objectId,
	             	  |	СообщенияИзменения.Ссылка.objectType КАК objectType,
	             	  |	&УзелСообщенияКОтправке КАК УзелСообщенияКОтправке,
	             	  |	ЕСТЬNULL(Токены.Ссылка, ЗНАЧЕНИЕ(Справочник.tokens.ПустаяСсылка)) КАК token,
	             	  |	Токены.chain КАК chain,
	             	  |	Токены.appType КАК appType,
	             	  |	Токены.systemType КАК systemType,
	             	  |	СообщенияИзменения.Ссылка.user КАК user,
	             	  |	ВЫБОР
	             	  |		КОГДА Токены.systemType = ЗНАЧЕНИЕ(Перечисление.systemTypes.Android)
	             	  |			ТОГДА ""GCM""
	             	  |		КОГДА Токены.systemType = ЗНАЧЕНИЕ(Перечисление.systemTypes.iOS)
	             	  |			ТОГДА ""APNS""
	             	  |		ИНАЧЕ """"
	             	  |	КОНЕЦ КАК ТипПодписчика
	             	  |ПОМЕСТИТЬ ВТ
	             	  |ИЗ
	             	  |	Справочник.messages.Изменения КАК СообщенияИзменения
	             	  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.tokens КАК Токены
	             	  |		ПО СообщенияИзменения.Ссылка.user = Токены.user
	             	  |			И СообщенияИзменения.Ссылка.token <> Токены.Ссылка
	             	  |			И (Токены.lockDate = ДАТАВРЕМЯ(1, 1, 1))
	             	  |ГДЕ
	             	  |	СообщенияИзменения.Узел = &УзелСообщенияКОтправке
	             	  |
	             	  |УПОРЯДОЧИТЬ ПО
	             	  |	СообщенияИзменения.Ссылка.priority
	             	  |;
	             	  |
	             	  |////////////////////////////////////////////////////////////////////////////////
	             	  |ВЫБРАТЬ
	             	  |	ВТ.user КАК user,
	             	  |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Messages.Ссылка) КАК Количество
	             	  |ПОМЕСТИТЬ ВТ_НеПрочитанныеСообщения
	             	  |ИЗ
	             	  |	ВТ КАК ВТ
	             	  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.messages КАК Messages
	             	  |		ПО ВТ.user = Messages.user
	             	  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.messages.channelPriorities КАК СообщенияПриоритетыКаналовИнформирования
	             	  |		ПО (Messages.Ссылка = СообщенияПриоритетыКаналовИнформирования.Ссылка)
	             	  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.messagesLogs.СрезПоследних КАК ИсторияСообщенийСрезПоследних
	             	  |		ПО (Messages.Ссылка = ИсторияСообщенийСрезПоследних.message)
	             	  |ГДЕ
	             	  |	СообщенияПриоритетыКаналовИнформирования.channel = &informationChannel
	             	  |	И ЕСТЬNULL(ИсторияСообщенийСрезПоследних.messageStatus, ЗНАЧЕНИЕ(Перечисление.messageStatuses.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.messageStatuses.read)
	             	  |
	             	  |СГРУППИРОВАТЬ ПО
	             	  |	ВТ.user
	             	  |;
	             	  |
	             	  |////////////////////////////////////////////////////////////////////////////////
	             	  |ВЫБРАТЬ
	             	  |	ВТ.message КАК message,
	             	  |	ВТ.title КАК title,
	             	  |	ВТ.text КАК text,
	             	  |	ВТ.action КАК action,
	             	  |	ВТ.objectId КАК objectId,
	             	  |	ВТ.objectType КАК objectType,
	             	  |	ВТ.УзелСообщенияКОтправке КАК УзелСообщенияКОтправке,
	             	  |	ВТ.chain КАК chain,
	             	  |	ВТ.appType КАК appType,
	             	  |	ВТ.systemType КАК systemType,
	             	  |	ВТ.ТипПодписчика КАК ТипПодписчика,
	             	  |	ЕСТЬNULL(ЗарегистрированныеУстройства.deviceToken, """") КАК deviceToken,
	             	  |	ВТ.token КАК token,
	             	  |	ВТ.user КАК user,
	             	  |	&informationChannel КАК informationChannel
	             	  |ПОМЕСТИТЬ ВТ_Устройства
	             	  |ИЗ
	             	  |	ВТ КАК ВТ
	             	  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.registeredDevices КАК ЗарегистрированныеУстройства
	             	  |		ПО ВТ.token = ЗарегистрированныеУстройства.token
	             	  |;
	             	  |
	             	  |////////////////////////////////////////////////////////////////////////////////
	             	  |ВЫБРАТЬ
	             	  |	ВТ_Устройства.message КАК message,
	             	  |	ВТ_Устройства.title КАК title,
	             	  |	ВТ_Устройства.text КАК text,
	             	  |	ВТ_Устройства.action КАК action,
	             	  |	ВТ_Устройства.objectId КАК objectId,
	             	  |	ВТ_Устройства.objectType КАК objectType,
	             	  |	ВТ_Устройства.УзелСообщенияКОтправке КАК УзелСообщенияКОтправке,
	             	  |	ВТ_Устройства.systemType КАК systemType,
	             	  |	ВТ_Устройства.ТипПодписчика КАК ТипПодписчика,
	             	  |	ВТ_Устройства.deviceToken КАК deviceToken,
	             	  |	ВТ_Устройства.token КАК token,
	             	  |	ВТ_Устройства.informationChannel КАК informationChannel,
	             	  |	ЕСТЬNULL(СертификатПриложенияДляСети.certificate, СертификатПриложенияОбщий.certificate) КАК certificate,
	             	  |	ЕСТЬNULL(НеПрочитанныеСообщения.Количество, 0) КАК Наклейка
	             	  |ИЗ
	             	  |	ВТ_Устройства КАК ВТ_Устройства
	             	  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.appCertificates КАК СертификатПриложенияДляСети
	             	  |		ПО ВТ_Устройства.chain = СертификатПриложенияДляСети.chain
	             	  |			И ВТ_Устройства.appType = СертификатПриложенияДляСети.appType
	             	  |			И ВТ_Устройства.systemType = СертификатПриложенияДляСети.systemType
	             	  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.appCertificates КАК СертификатПриложенияОбщий
	             	  |		ПО (СертификатПриложенияОбщий.chain = ЗНАЧЕНИЕ(Справочник.chains.ПустаяСсылка))
	             	  |			И ВТ_Устройства.appType = СертификатПриложенияОбщий.appType
	             	  |			И ВТ_Устройства.systemType = СертификатПриложенияОбщий.systemType
	             	  |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НеПрочитанныеСообщения КАК НеПрочитанныеСообщения
	             	  |		ПО ВТ_Устройства.user = НеПрочитанныеСообщения.user";
	
	пЗапрос.УстановитьПараметр("УзелСообщенияКОтправке", УзелСообщенияКОтправке);	
	пЗапрос.УстановитьПараметр("holding", Холдинг);
	пЗапрос.УстановитьПараметр("informationChannel", КаналИнформирования);
	
	Если КаналИнформирования = Перечисления.informationChannels.pushEmployee Тогда 
		пЗапрос.УстановитьПараметр("appType", Перечисления.appTypes.Employee);
	ИначеЕсли КаналИнформирования = Перечисления.informationChannels.pushCustomer Тогда 
		пЗапрос.УстановитьПараметр("appType", Перечисления.appTypes.Customer);
	КонецЕсли;
	
	Выборка	= пЗапрос.Выполнить().Выбрать();	
	
	Пока Выборка.Следующий() Цикл		
		Если Выборка.deviceToken = "" Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(Выборка.УзелСообщенияКОтправке, Выборка.Сообщение);
			ИспользоватьСледующийКаналИнформирования(Выборка.Сообщение, Выборка.КаналИнформирования);
			ДобавитьИсторию(Выборка.Сообщение, Выборка.КаналИнформирования, Перечисления.messageStatuses.notSent, "", УниверсальноеВремя(ТекущаяДата()), Выборка.Токен);
		Иначе
			Messages.ОтправитьPush(Выборка);
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры