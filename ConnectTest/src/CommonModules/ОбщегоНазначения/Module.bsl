
Функция ВыполнитьЗапрос(Запрос) Экспорт
	
	ДатаНачалаВМиллисекундах	= ТекущаяУниверсальнаяДатаВМиллисекундах();
		
	ПараметрыЗапроса	= Новый Структура;
	ПараметрыЗапроса.Вставить("Заголовки", РаботаСHTTP.СтруктуруВПараметрыHTTPЗапроса(Запрос.Заголовки));
	ПараметрыЗапроса.Вставить("ИмяЗапроса", НРег(Запрос.Заголовки.Получить("request")));
	ПараметрыЗапроса.Вставить("ЯзыкПриложения", НРег(Запрос.Заголовки.Получить("language")));
	ПараметрыЗапроса.Вставить("НеСохранятьОтветВЛогах", Ложь);
	ПараметрыЗапроса.Вставить("СжиматьЛоги", Ложь);
		
	Если ПараметрыЗапроса.ИмяЗапроса = Неопределено Или ПараметрыЗапроса.ИмяЗапроса = "" Тогда		
		ПараметрыЗапроса.Вставить("ОписаниеОшибки", Служебный.ПолучитьОписаниеОшибки(ПараметрыЗапроса.ЯзыкПриложения, "noRequest"));
	Иначе		
		
		Если ПараметрыЗапроса.ИмяЗапроса <> "kpolist" И ПараметрыЗапроса.ИмяЗапроса <> "auth" И ПараметрыЗапроса.ИмяЗапроса <> "restore" Тогда
			ПараметрыЗапроса.Вставить("КлючАвторизации", Запрос.Заголовки.Получить("auth-key"));
			РезультатПроверки	= ОбщегоНазначенияПовторноеИспользование.ПроверитьТокен(ПараметрыЗапроса.ЯзыкПриложения, ПараметрыЗапроса.КлючАвторизации);
			ПараметрыЗапроса.Вставить("РезультатПроверки", РезультатПроверки);
			ПараметрыЗапроса.Вставить("Токен", РезультатПроверки.Токен);
			ПараметрыЗапроса.Вставить("ОписаниеОшибки", РезультатПроверки.ОписаниеОшибки);
		Иначе
			ПараметрыЗапроса.Вставить("Токен", Справочники.Токены.ПустаяСсылка());
			ПараметрыЗапроса.Вставить("ОписаниеОшибки", Служебный.ПолучитьОписаниеОшибки());
		КонецЕсли;
		
		ПараметрыHTTPЗапроса	= РаботаСHTTP.ПараметрыHTTPЗапросаВСтруктуру(Запрос);
		ПараметрыЗапроса.Вставить("ДанныеЗапроса", ПараметрыHTTPЗапроса.ДанныеЗапроса);
		ПараметрыЗапроса.Вставить("ТелоЗапроса", ПараметрыHTTPЗапроса.ТелоЗапроса);
		ПараметрыЗапроса.Вставить("ТелоОтвета", "");
		
		Если ПараметрыЗапроса.ОписаниеОшибки.Служебное = "" Тогда
			Попытка
				Если ПараметрыЗапроса.ИмяЗапроса = "kpolist" Тогда
					ПолучитьСписокСетей(ПараметрыЗапроса);
				ИначеЕсли ПараметрыЗапроса.ИмяЗапроса = "auth" Тогда
					АутентифицироватьПользователя(ПараметрыЗапроса);
				ИначеЕсли ПараметрыЗапроса.ИмяЗапроса = "restore" Тогда
					ВосстановитьПарольПользователя(ПараметрыЗапроса);
				ИначеЕсли ПараметрыЗапроса.ИмяЗапроса = "newpassword" Тогда
					УстановитьПарольПользователя(ПараметрыЗапроса);	
				ИначеЕсли ПараметрыЗапроса.ИмяЗапроса = "registerdevice" Тогда
					ЗарегистрироватьУстройство(ПараметрыЗапроса);
				ИначеЕсли ПараметрыЗапроса.ИмяЗапроса = "unregisterdevice" Тогда
					УдалитьУстройство(ПараметрыЗапроса);	
				ИначеЕсли ПараметрыЗапроса.ИмяЗапроса = "userprofile" Тогда
					ПолучитьПрофильПользователя(ПараметрыЗапроса);
				ИначеЕсли ПараметрыЗапроса.ИмяЗапроса = "cataloggyms" Тогда
					ПолучитьСписокКлубов(ПараметрыЗапроса);
				ИначеЕсли ПараметрыЗапроса.ИмяЗапроса = "catalogcancelcauses" Тогда
					ПолучитьСписокПричинОтменыЗаписи(ПараметрыЗапроса);
				ИначеЕсли ПараметрыЗапроса.ИмяЗапроса = "notificationlist" Тогда
					ПолучитьСписокСообщений(ПараметрыЗапроса);
				ИначеЕсли ПараметрыЗапроса.ИмяЗапроса = "readnotification" Тогда
					ПрочитатьСообщение(ПараметрыЗапроса);
				ИначеЕсли ПараметрыЗапроса.ИмяЗапроса = "unreadnotificationcount" Тогда
					КоличествоНеПрочитанныхСообщений(ПараметрыЗапроса);	
				Иначе			
					ВыполнитьВнешнийЗапрос(ПараметрыЗапроса);
				КонецЕсли;		
			Исключение			
				ПараметрыЗапроса.Вставить("ОписаниеОшибки", Служебный.ПолучитьОписаниеОшибки(ПараметрыЗапроса.ЯзыкПриложения, "system", ОписаниеОшибки()));				
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыЗапроса.ОписаниеОшибки.Служебное <> "" Тогда
		ЗаписьJSON	= Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(); 	
		СтруктураJSON	= Новый Структура;
		СтруктураJSON.Вставить("result", ПараметрыЗапроса.ОписаниеОшибки.Служебное);
		СтруктураJSON.Вставить("description", ПараметрыЗапроса.ОписаниеОшибки.Пользовательское);
		ЗаписатьJSON(ЗаписьJSON, СтруктураJSON);
		ПараметрыЗапроса.Вставить("ТелоОтвета", ЗаписьJSON.Закрыть());		
		Если ПараметрыЗапроса.ОписаниеОшибки.Служебное = "userNotIdentified" Тогда
			Ответ = Новый HTTPСервисОтвет(401);
		Иначе
			Ответ = Новый HTTPСервисОтвет(403);	
		КонецЕсли;
	Иначе
		Ответ = Новый HTTPСервисОтвет(200);
	КонецЕсли;
	 
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");	
	Ответ.УстановитьТелоИзСтроки(ПараметрыЗапроса.ТелоОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.Использовать);			
	
	ПараметрыЗапроса.Вставить("Длительность", ТекущаяУниверсальнаяДатаВМиллисекундах() - ДатаНачалаВМиллисекундах);
	ПараметрыЗапроса.Вставить("Ошибка", ПараметрыЗапроса.ОписаниеОшибки.Служебное <> "");
	
	Служебный.ЗафиксироватьЗапросВИсторииВФоне(ПараметрыЗапроса);
	
	Возврат Ответ;
	
КонецФункции

Функция ИзмененитьДанные(Запрос) Экспорт
	
	ИмяЗапроса  	= НРег(Запрос.Заголовки.Получить("request"));
	ЯзыкПриложения	= НРег(Запрос.Заголовки.Получить("language"));
	ОписаниеОшибки	= Служебный.ПолучитьОписаниеОшибки();
	
	Если ИмяЗапроса = Неопределено Тогда
		ОписаниеОшибки	= Служебный.ПолучитьОписаниеОшибки(ЯзыкПриложения, "noRequest");
	Иначе		
		JSONСтрока	= ИзменитьСоздатьЭлементыСправочника(ИмяЗапроса, Запрос, ЯзыкПриложения);
	КонецЕсли;
	
	Если ОписаниеОшибки.Служебное <> "" Тогда
		ЗаписьJSON	= Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(); 	
		СтруктураJSON	= Новый Структура;
		СтруктураJSON.Вставить("result", ОписаниеОшибки.Служебное);
		СтруктураJSON.Вставить("description", ОписаниеОшибки.Пользовательское);
		ЗаписатьJSON(ЗаписьJSON, СтруктураJSON);
		ОтветJSON	= ЗаписьJSON.Закрыть();	
	КонецЕсли;
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");	
	Ответ.УстановитьТелоИзСтроки(JSONСтрока, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.Использовать);
	
	Возврат Ответ;
	
КонецФункции

Функция ОтправитьСообщение(Запрос) Экспорт
	
	ЯзыкПриложения	= НРег(Запрос.Заголовки.Получить("language"));
	ОписаниеОшибки	= Служебный.ПолучитьОписаниеОшибки();	
	ТокенХолдинга	= Запрос.Заголовки.Получить("auth-key");
	
	ЗаписьJSON	= Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(); 	
	СтруктураJSON	= Новый Структура;
	
	Если ТокенХолдинга = Неопределено Тогда
		ОписаниеОшибки	= Служебный.ПолучитьОписаниеОшибки(ЯзыкПриложения, "userNotIdentified");
	Иначе
		Холдинг				= Справочники.Холдинги.НайтиПоРеквизиту("Токен", ТокенХолдинга);
		Если Холдинг.Пустая() Тогда
			ОписаниеОшибки	= Служебный.ПолучитьОписаниеОшибки(ЯзыкПриложения, "userNotIdentified");
		КонецЕсли;
	КонецЕсли;
	
	Если ОписаниеОшибки.Служебное = "" Тогда
		ДанныеЗапроса	= РаботаСHTTP.ПараметрыHTTPЗапросаВСтруктуру(Запрос).ДанныеЗапроса;		
		Если ОписаниеОшибки.Служебное = "" Тогда
			Если Не ДанныеЗапроса.Свойство("messages") Тогда
				ОписаниеОшибки	= Служебный.ПолучитьОписаниеОшибки(ЯзыкПриложения, "noMessages");
			Иначе
				Для Каждого Сообщение Из ДанныеЗапроса.messages Цикл
					ДанныеСообщения	= Новый Структура;			
					ДанныеСообщения.Вставить("ОбъектИД", ?(Сообщение.Свойство("objectId"), Сообщение.objectId, ""));
					ДанныеСообщения.Вставить("ОбъектТип", ?(Сообщение.Свойство("objectType"), Сообщение.objectType, ""));					
					ДанныеСообщения.Вставить("НомерТелефона", ?(Сообщение.Свойство("phone"), Сообщение.phone, ""));					
					ДанныеСообщения.Вставить("Заголовок", ?(Сообщение.Свойство("title"), Сообщение.title, ?(ЯзыкПриложения = "ru", "Уведомление", "Notification")));
					ДанныеСообщения.Вставить("Текст", ?(Сообщение.Свойство("text"), Сообщение.text, ""));
					ДанныеСообщения.Вставить("Действие", ?(Сообщение.Свойство("action"), Сообщение.action, "ViewNotification"));
					ДанныеСообщения.Вставить("Приоритет", ?(Сообщение.Свойство("priority"), Сообщение.priority, 5));
					ДанныеСообщения.Вставить("Холдинг", Холдинг);
					Если Сообщение.Свойство("gymId") И Сообщение.gymId <> "" Тогда
						ДанныеСообщения.Вставить("Клуб", XMLЗначение(Тип("СправочникСсылка.Клубы"), Сообщение.gymId));
					Иначе
						ДанныеСообщения.Вставить("Клуб", Справочники.Клубы.ПустаяСсылка());
					КонецЕсли;
					Если Сообщение.Свойство("uid") И Сообщение.uid <> "" Тогда
						ДанныеСообщения.Вставить("Пользователь",XMLЗначение(Тип("СправочникСсылка.Пользователи"), Сообщение.uid));
					Иначе
						ДанныеСообщения.Вставить("Пользователь", Справочники.Пользователи.ПустаяСсылка());
					КонецЕсли;
					Если Сообщение.Свойство("token") И Сообщение.token <> "" Тогда
						ДанныеСообщения.Вставить("Токен", XMLЗначение(Тип("СправочникСсылка.Токены"), Сообщение.token));
					Иначе
						ДанныеСообщения.Вставить("Токен", Справочники.Токены.ПустаяСсылка());
					КонецЕсли;
					МассивКаналов	= Новый Массив;
					Если Сообщение.Свойство("routes") Тогда
						Для Каждого Канал Из Сообщение.routes Цикл
							МассивКаналов.Добавить(Перечисления.КаналыИнформирования[Канал]);
						КонецЦикла;
					КонецЕсли;
					ДанныеСообщения.Вставить("КаналыИнформирования", МассивКаналов);					
					Если ДанныеСообщения.НомерТелефона = "" И ДанныеСообщения.Пользователь.ПолучитьОбъект() = Неопределено Тогда
					ИначеЕсли ДанныеСообщения.Пользователь = ДанныеСообщения.Токен.Пользователь Тогда
					Иначе
						РаботаССообщениями.НовоеСообщение(ДанныеСообщения);
					КонецЕсли; 
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		СтруктураJSON.Вставить("result", "Ok");
	КонецЕсли;	
		
	Если ОписаниеОшибки.Служебное <> "" Тогда		
		СтруктураJSON.Вставить("result", ОписаниеОшибки.Служебное);
		СтруктураJSON.Вставить("description", ОписаниеОшибки.Пользовательское);		
	КонецЕсли;
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураJSON);
	ОтветJSON	= ЗаписьJSON.Закрыть();	
		
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");	
	Ответ.УстановитьТелоИзСтроки(ОтветJSON, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.Использовать);
	
	Возврат Ответ;
	
КонецФункции

//------------------------------------------------------------
//Обработчики внешних запросов

Процедура ПолучитьСписокСетей(ПараметрыЗапроса)
	
	ЗаписьJSON	= Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(); 	
	
	МассивJSON		= Новый Массив;		
		
	пЗапрос	= Новый Запрос;
	пЗапрос.Текст	= "ВЫБРАТЬ
	             	  |	Сети.Наименование КАК Наименование,
	             	  |	Сети.Код КАК Код,
	             	  |	Сети.Тип КАК Тип,
	             	  |	Сети.Host КАК Host,
	             	  |	Сети.ПрограммаЛояльности КАК ПрограммаЛояльности,
	             	  |	Сети.МаскаНомераТелефона КАК МаскаНомераТелефона,
	             	  |	Сети.Валюта КАК Валюта
	             	  |ИЗ
	             	  |	Справочник.Сети КАК Сети
	             	  |ГДЕ
	             	  |	НЕ Сети.ПометкаУдаления
	             	  |
	             	  |УПОРЯДОЧИТЬ ПО
	             	  |	Код";
	
	Выборка	= пЗапрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтруктураСети	= Новый Структура;
		СтруктураСети.Вставить("type", Выборка.Тип);
		СтруктураСети.Вставить("code", Выборка.Код);
		СтруктураСети.Вставить("name", Выборка.Наименование);
		СтруктураСети.Вставить("host", Выборка.host);
		СтруктураСети.Вставить("bonusSystem", Выборка.ПрограммаЛояльности);
		СтруктураСети.Вставить("phoneMask", Выборка.МаскаНомераТелефона);
		СтруктураСети.Вставить("currencySymbol", Выборка.Валюта);
		МассивJSON.Добавить(СтруктураСети);
	КонецЦикла; 
	
	ЗаписатьJSON(ЗаписьJSON, МассивJSON);
	
	ПараметрыЗапроса.Вставить("ТелоОтвета", ЗаписьJSON.Закрыть());
	ПараметрыЗапроса.Вставить("НеСохранятьОтветВЛогах", Истина);
	
КонецПроцедуры

Процедура АутентифицироватьПользователя(ПараметрыЗапроса)
	
	ДанныеЗапроса	= ПараметрыЗапроса.ДанныеЗапроса;	
	ЯзыкПриложения	= ПараметрыЗапроса.ЯзыкПриложения;
	
	ЗаписьJSON		= Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	СтруктураJSON	= Новый Структура;	
	ОписаниеОшибки	= Служебный.ПолучитьОписаниеОшибки();
	Токен			= Справочники.Токены.ПустаяСсылка();	
	
	Если Не ДанныеЗапроса.Свойство("login") Тогда
		ОписаниеОшибки	= Служебный.ПолучитьОписаниеОшибки(ЯзыкПриложения, "noUserLogin");
	ИначеЕсли Не ДанныеЗапроса.Свойство("password") Тогда
		ОписаниеОшибки	= Служебный.ПолучитьОписаниеОшибки(ЯзыкПриложения, "noUserPassword");
	ИначеЕсли ДанныеЗапроса.password = "" Тогда
		ОписаниеОшибки	= Служебный.ПолучитьОписаниеОшибки(ЯзыкПриложения, "noUserPassword");	
	ИначеЕсли Не ДанныеЗапроса.Свойство("kpoCode") Тогда
		ОписаниеОшибки	= Служебный.ПолучитьОписаниеОшибки(ЯзыкПриложения, "noKpoCode");		
	КонецЕсли;
	
	Если ОписаниеОшибки.Служебное = "" Тогда
		пЗапрос	= Новый Запрос;
		пЗапрос.Текст	= "ВЫБРАТЬ
		             	  |	Пользователи.Ссылка КАК Ссылка,
		             	  |	Пользователи.Холдинг КАК Холдинг,
		             	  |	Пользователи.ТипПользователя КАК ТипПользователя
		             	  |ПОМЕСТИТЬ ВТ_Пользователи
		             	  |ИЗ
		             	  |	Справочник.Пользователи КАК Пользователи
		             	  |ГДЕ
		             	  |	Пользователи.КодПользователя = &КодЛогин
		             	  |
		             	  |ОБЪЕДИНИТЬ ВСЕ
		             	  |
		             	  |ВЫБРАТЬ
		             	  |	Пользователи.Ссылка,
		             	  |	Пользователи.Холдинг,
		             	  |	Пользователи.ТипПользователя
		             	  |ИЗ
		             	  |	Справочник.Пользователи КАК Пользователи
		             	  |ГДЕ
		             	  |	Пользователи.Логин = &КодЛогин
		             	  |;
		             	  |
		             	  |////////////////////////////////////////////////////////////////////////////////
		             	  |ВЫБРАТЬ ПЕРВЫЕ 1
		             	  |	ВТ_Пользователи.Ссылка КАК Пользователь,
		             	  |	Сети.Ссылка КАК Сеть,
		             	  |	ВТ_Пользователи.Холдинг КАК Холдинг,
		             	  |	ПаролиПользователей.СрокДействия КАК СрокДействия,
		             	  |	Сети.ЧасовойПояс КАК ЧасовойПояс,
		             	  |	ВТ_Пользователи.ТипПользователя КАК ТипПользователя
		             	  |ИЗ
		             	  |	ВТ_Пользователи КАК ВТ_Пользователи
		             	  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаролиПользователей КАК ПаролиПользователей
		             	  |		ПО (ПаролиПользователей.Пользователь = ВТ_Пользователи.Ссылка)
		             	  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сети КАК Сети
		             	  |		ПО ВТ_Пользователи.Холдинг = Сети.Холдинг
		             	  |ГДЕ
		             	  |	ПаролиПользователей.Пароль = &Пароль
		             	  |	И Сети.Код = &КодСети";
		
		пЗапрос.УстановитьПараметр("КодЛогин", ДанныеЗапроса.login);
		пЗапрос.УстановитьПараметр("Пароль", ДанныеЗапроса.password);
		пЗапрос.УстановитьПараметр("КодСети", ДанныеЗапроса.kpoCode);
		пЗапрос.УстановитьПараметр("СрокДействия", УниверсальноеВремя(ТекущаяДата()));
		
		РезультатЗапроса	= пЗапрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда			
			ОписаниеОшибки	= Служебный.ПолучитьОписаниеОшибки(ЯзыкПриложения, "PasswordIsNotCorrect");
		Иначе
			Выборка	= РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			Если НРег(Выборка.ТипПользователя) <> "employee" И НРег(ДанныеЗапроса.appType) = "employee" Тогда
				ОписаниеОшибки	= Служебный.ПолучитьОписаниеОшибки(ЯзыкПриложения, "staffOnly");
			ИначеЕсли Выборка.СрокДействия = Дата(1,1,1) Или Выборка.СрокДействия >= УниверсальноеВремя(ТекущаяДата()) Тогда 
				СтруктураJSON.Вставить("result", ?(Выборка.СрокДействия = Дата(1,1,1), "Ok", "PasswordHasExpirationDate"));
				Если ДанныеЗапроса.Свойство("remember") И ДанныеЗапроса.remember = Истина Тогда				
					ТокенОбъект	= Справочники.Токены.ТокенПользователя(ДанныеЗапроса, Выборка.Пользователь, Выборка.Сеть, Выборка.Холдинг, Выборка.ЧасовойПояс);
					СтруктураJSON.Вставить("authToken", Новый Структура("key,createTime", XMLСтрока(ТокенОбъект.Ссылка), ТокенОбъект.ДатаСоздания));
					ПараметрыЗапроса.Вставить("Токен", ТокенОбъект.Ссылка);
				КонецЕсли;
			Иначе
				ОписаниеОшибки	= Служебный.ПолучитьОписаниеОшибки(ЯзыкПриложения, "userPasswordExpired");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
		
	ЗаписатьJSON(ЗаписьJSON, СтруктураJSON);	
	
	ПараметрыЗапроса.Вставить("ТелоОтвета", ЗаписьJSON.Закрыть());
	ПараметрыЗапроса.Вставить("ОписаниеОшибки", ОписаниеОшибки);
	
КонецПроцедуры

Процедура ВосстановитьПарольПользователя(ПараметрыЗапроса)
	
	ДанныеЗапроса	= ПараметрыЗапроса.ДанныеЗапроса;	
	ЯзыкПриложения	= ПараметрыЗапроса.ЯзыкПриложения;
		
	ЗаписьJSON		= Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(); 		
	СтруктураJSON	= Новый Структура;
	ОписаниеОшибки	= Служебный.ПолучитьОписаниеОшибки();
	
	МассивПользователей	= Новый Массив;
	
	Если Не ДанныеЗапроса.Свойство("phone") Тогда
		ОписаниеОшибки	= Служебный.ПолучитьОписаниеОшибки(ЯзыкПриложения, "noUserPhone");
	ИначеЕсли Не ДанныеЗапроса.Свойство("kpoCode") Тогда
		ОписаниеОшибки	= Служебный.ПолучитьОписаниеОшибки(ЯзыкПриложения, "noKpoCode");		
	КонецЕсли;
	
	Если ОписаниеОшибки.Служебное = "" Тогда
		ОписаниеОшибки	= Служебный.ПроверитьНомерТелефона(ЯзыкПриложения, ДанныеЗапроса.phone);
	КонецЕсли;
	
	Если ОписаниеОшибки.Служебное = "" Тогда
		ТекстыЗапроса	= Новый Массив;
		пЗапрос	= Новый Запрос;
		ТекстЗапроса		= "ВЫБРАТЬ
		            		  |	Пользователи.Ссылка КАК Ссылка,
		            		  |	Сети.Ссылка КАК Сеть,
		            		  |	Пользователи.Холдинг КАК Холдинг,
		            		  |	Пользователи.КодПользователя КАК КодПользователя
		            		  |ИЗ
		            		  |	Справочник.Пользователи КАК Пользователи
		            		  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сети КАК Сети
		            		  |		ПО Пользователи.Холдинг = Сети.Холдинг
		            		  |ГДЕ
		            		  |	Сети.Код = &КодСети";
		
		Если ДанныеЗапроса.Свойство("uid") И ДанныеЗапроса.uid <> "" Тогда
			ДопУсловие	= "И Пользователи.Ссылка = &Пользователь";
			пЗапрос.УстановитьПараметр("Пользователь", Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеЗапроса.uid)));	
		Иначе
			ДопУсловие	= "И Пользователи.НомерТелефона = &НомерТелефона";
			пЗапрос.УстановитьПараметр("НомерТелефона", ДанныеЗапроса.phone);
		КонецЕсли;
		
		пЗапрос.УстановитьПараметр("КодСети", ДанныеЗапроса.kpoCode);
		ТекстыЗапроса.Добавить(ТекстЗапроса);		
		ТекстыЗапроса.Добавить(ДопУсловие);		
		пЗапрос.Текст	= СтрСоединить(ТекстыЗапроса, Символы.ПС);
		
		РезультатЗапроса	= пЗапрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда			
			Холдинг	= Справочники.Сети.НайтиПоКоду(ДанныеЗапроса.kpoCode).Холдинг;
			СтруктураЗапроса = РаботаСHTTP.СтруктураВнешнегоHTTPЗапроса("catalogProfile", Холдинг);
			Если СтруктураЗапроса.Количество() > 0 Тогда
				Заголовки	= Новый Соответствие;
				Заголовки.Вставить("Content-Type", "application/json");
				HTTPСоединение	= Новый HTTPСоединение(СтруктураЗапроса.Сервер,, СтруктураЗапроса.УчетнаяЗапись, СтруктураЗапроса.Пароль,, СтруктураЗапроса.Таймаут, ?(СтруктураЗапроса.ЗащищенноеСоединение, Новый ЗащищенноеСоединениеOpenSSL(), Неопределено), СтруктураЗапроса.ИспользоватьАутентификациюОС);
				ЗапросHTTP = Новый HTTPЗапрос(СтруктураЗапроса.URL + СтруктураЗапроса.Приемник, Заголовки);
				ЗапросHTTP.УстановитьТелоИзСтроки(ПараметрыЗапроса.ТелоЗапроса);
				ОтветHTTP	= HTTPСоединение.ОтправитьДляОбработки(ЗапросHTTP);				
				СтруктураАтрибутов	= РаботаСHTTP.СтруктураАтрибутовВнешнегоЗапроса("users");
				МассивПользователей	= СоздатьЭлементыСправочника(СтруктураАтрибутов, РаботаСHTTP.ПараметрыHTTPЗапросаВСтруктуру(ОтветHTTP).ДанныеЗапроса, Холдинг);
			Иначе
				ОписаниеОшибки	= Служебный.ПолучитьОписаниеОшибки(ЯзыкПриложения, "userNotIdentified");
			КонецЕсли;
		Иначе		
			Выборка	= РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				МассивПользователей.Добавить(Выборка.Ссылка);
			КонецЦикла;
		КонецЕсли;
		
		Если МассивПользователей.Количество() = 0 Тогда
			ОписаниеОшибки	= Служебный.ПолучитьОписаниеОшибки(ЯзыкПриложения, "userNotIdentified");
		ИначеЕсли МассивПользователей.Количество() > 1 Тогда
			МассивJSON	= Новый Массив;
			Для Каждого Пользователь Из МассивПользователей Цикл
				СтруктураПользователя	= Новый Структура;
				СтруктураПользователя.Вставить("uid", XMLСтрока(Пользователь));
				СтруктураПользователя.Вставить("name", Пользователь.Имя + " " + Пользователь.Отчество + " " + Лев(Пользователь.Фамилия, 1));
				МассивJSON.Добавить(СтруктураПользователя);
			КонецЦикла;
			СтруктураJSON.Вставить("result", "Ok");
			СтруктураJSON.Вставить("users", МассивJSON);
		Иначе	
						
			Пароль	= Справочники.Пользователи.УстановитьПарольПользователя(МассивПользователей[0]);
			МассивКаналов	= Новый Массив;
			МассивКаналов.Добавить(Перечисления.КаналыИнформирования.sms);
			
			МассивСтрок	= Новый Массив;			
			МассивСтрок.Добавить(?(ЯзыкПриложения = "ru", "Логин: ", "Login: "));
			МассивСтрок.Добавить(МассивПользователей[0].КодПользователя);
			МассивСтрок.Добавить(?(ЯзыкПриложения = "ru", " пароль: ", " password: "));
			МассивСтрок.Добавить(Пароль);
			МассивСтрок.Добавить(?(ЯзыкПриложения = "ru", ", пароль действителен в течение 15 минут", ", password is valid for 15 minutes"));		
			
			ДанныеСообщения	= Новый Структура;			
			ДанныеСообщения.Вставить("НомерТелефона", ДанныеЗапроса.phone);
			ДанныеСообщения.Вставить("Пользователь", МассивПользователей[0]);			
			ДанныеСообщения.Вставить("Заголовок", "Восстановить доступ");
			ДанныеСообщения.Вставить("Текст", СтрСоединить(МассивСтрок));
			ДанныеСообщения.Вставить("Холдинг", МассивПользователей[0].Холдинг);
			ДанныеСообщения.Вставить("КаналыИнформирования", МассивКаналов);
			ДанныеСообщения.Вставить("Приоритет", 0);
			РаботаССообщениями.НовоеСообщение(ДанныеСообщения);			
			СтруктураJSON.Вставить("result", "Ok");			
			Служебный.ЗафиксироватьОтправкуСообщения(ДанныеЗапроса.phone);
		КонецЕсли;
		
	КонецЕсли;
		
	ЗаписатьJSON(ЗаписьJSON, СтруктураJSON);	
	
	ПараметрыЗапроса.Вставить("ТелоОтвета", ЗаписьJSON.Закрыть());
	ПараметрыЗапроса.Вставить("ОписаниеОшибки", ОписаниеОшибки);
	
КонецПроцедуры

Процедура УстановитьПарольПользователя(ПараметрыЗапроса)
	
	ДанныеЗапроса		= ПараметрыЗапроса.ДанныеЗапроса;	
	ЯзыкПриложения		= ПараметрыЗапроса.ЯзыкПриложения;
	РезультатПроверки	= ПараметрыЗапроса.РезультатПроверки;
	
	ЗаписьJSON		= Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(); 		
	СтруктураJSON	= Новый Структура;	
		
	ОписаниеОшибки	= Справочники.Пользователи.ПроверитьПароль(ЯзыкПриложения, РезультатПроверки.Пользователь, ДанныеЗапроса.Password);
	Если ДанныеЗапроса.newPassword = "" Тогда
		ОписаниеОшибки	= Служебный.ПолучитьОписаниеОшибки(ЯзыкПриложения, "passwordIsEmpty");			
	КонецЕсли;
	Если ОписаниеОшибки.Служебное = "" Тогда
		Запись	= РегистрыСведений.ПаролиПользователей.СоздатьМенеджерЗаписи();
		Запись.Пользователь	= РезультатПроверки.Пользователь;
		Запись.Пароль		= ДанныеЗапроса.newPassword;
		Запись.СрокДействия	= Дата(1,1,1);
		Запись.Записать();
		СтруктураJSON.Вставить("result", "Ok");
	КонецЕсли;	
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураJSON);	
	
	ПараметрыЗапроса.Вставить("ТелоОтвета", ЗаписьJSON.Закрыть());
	ПараметрыЗапроса.Вставить("ОписаниеОшибки", ОписаниеОшибки);
	
КонецПроцедуры

Процедура ЗарегистрироватьУстройство(ПараметрыЗапроса)
		
	ДанныеЗапроса		= ПараметрыЗапроса.ДанныеЗапроса;
	ЯзыкПриложения		= ПараметрыЗапроса.ЯзыкПриложения;
	РезультатПроверки	= ПараметрыЗапроса.РезультатПроверки;
	
	ЗаписьJSON		= Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	СтруктураJSON	= Новый Структура;
	
	Если Не ДанныеЗапроса.Свойство("deviceToken") Тогда
		ПараметрыЗапроса.Вставить("ОписаниеОшибки", Служебный.ПолучитьОписаниеОшибки(ЯзыкПриложения, "noDeviceToken"));
	ИначеЕсли Не ДанныеЗапроса.Свойство("systemVersion") Тогда
		ПараметрыЗапроса.Вставить("ОписаниеОшибки", Служебный.ПолучитьОписаниеОшибки(ЯзыкПриложения, "noSystemVersion"));
	ИначеЕсли Не ДанныеЗапроса.Свойство("appVersion") Тогда
		ПараметрыЗапроса.Вставить("ОписаниеОшибки", Служебный.ПолучитьОписаниеОшибки(ЯзыкПриложения, "noAppVersion"));
	КонецЕсли;
	
	Если ПараметрыЗапроса.ОписаниеОшибки.Служебное = "" Тогда
		СтруктураJSON.Вставить("result", "Ok");
		Запись	= РегистрыСведений.ЗарегистрированныеУстройства.СоздатьМенеджерЗаписи();
		Запись.Токен				= РезультатПроверки.Токен;
		Запись.ТокенУстройства		= ДанныеЗапроса.deviceToken;
		Запись.ВерсияОС				= ДанныеЗапроса.systemVersion;
		//Попытка
		//	Запись.ВерсияПриложения		= ДанныеЗапроса.appVersion;
		//Исключение
			Запись.ВерсияПриложения		= Число(СтрЗаменить(ДанныеЗапроса.appVersion,".",""));
		//КонецПопытки;
		Запись.МодельУстройства		= ДанныеЗапроса.deviceModel;			
		Запись.ДатаЗаписи			= УниверсальноеВремя(ТекущаяДата());
		Запись.Записать();
		
		пЗапрос	= Новый Запрос;
		пЗапрос.Текст = "ВЫБРАТЬ
		                |	ЗарегистрированныеУстройства.Токен КАК Токен
		                |ИЗ
		                |	РегистрСведений.ЗарегистрированныеУстройства КАК ЗарегистрированныеУстройства
		                |ГДЕ
		                |	ЗарегистрированныеУстройства.Токен <> &Токен
		                |	И ЗарегистрированныеУстройства.Токен.Пользователь = &Пользователь
		                |	И ЗарегистрированныеУстройства.ВерсияОС = &ВерсияОС
		                |	И ЗарегистрированныеУстройства.ВерсияПриложения = &ВерсияПриложения
		                |	И ЗарегистрированныеУстройства.МодельУстройства = &МодельУстройства
		                |	И ЗарегистрированныеУстройства.ТокенУстройства = &ТокенУстройства
		                |;
		                |
		                |////////////////////////////////////////////////////////////////////////////////
		                |ВЫБРАТЬ
		                |	ЗНАЧЕНИЕ(Справочник.Сообщения.ПустаяСсылка) КАК Сообщение,
		                |	ВЫБОР
		                |		КОГДА &ЯзыкПриложения = ""ru""
		                |			ТОГДА ""Уведомление""
		                |		ИНАЧЕ ""Notification""
		                |	КОНЕЦ КАК Заголовок,
		                |	ВЫБОР
		                |		КОГДА &ЯзыкПриложения = ""ru""
		                |			ТОГДА ""Обновите приложение""
		                |		ИНАЧЕ ""Update the application""
		                |	КОНЕЦ КАК Текст,
		                |	""updateApp"" КАК Действие,
		                |	"""" КАК ОбъектИД,
		                |	"""" КАК ОбъектТип,
		                |	ЗНАЧЕНИЕ(ПланОбмена.СообщенияКОтправке.ПустаяСсылка) КАК УзелСообщенияКОтправке,
		                |	Токены.ОперационнаяСистема КАК ОперационнаяСистема,
		                |	ВЫБОР
		                |		КОГДА Токены.ОперационнаяСистема = ЗНАЧЕНИЕ(Перечисление.ОперационныеСистемы.Android)
		                |			ТОГДА ""GCM""
		                |		ИНАЧЕ ""APNS""
		                |	КОНЕЦ КАК ТипПодписчика,
		                |	&ТокенУстройства КАК ТокенУстройства,
		                |	Токены.Ссылка КАК Токен,
		                |	ВЫБОР
		                |		КОГДА Токены.ВидПриложения = ЗНАЧЕНИЕ(Перечисление.ВидыПриложений.Customer)
		                |			ТОГДА ЗНАЧЕНИЕ(Перечисление.КаналыИнформирования.pushCustomer)
		                |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КаналыИнформирования.pushEmployee)
		                |	КОНЕЦ КАК КаналИнформирования,
		                |	Токены.ДатаБлокировки КАК ДатаБлокировки,
		                |	ЕСТЬNULL(СертификатПриложенияДляСети.Сертификат, СертификатПриложенияОбщий.Сертификат) КАК Сертификат
		                |ИЗ
		                |	Справочник.Токены КАК Токены
		                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СертификатыПриложений КАК СертификатПриложенияДляСети
		                |		ПО Токены.Сеть = СертификатПриложенияДляСети.Сеть
		                |			И Токены.ВидПриложения = СертификатПриложенияДляСети.ВидПриложения
		                |			И Токены.ОперационнаяСистема = СертификатПриложенияДляСети.ОперационнаяСистема
		                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СертификатыПриложений КАК СертификатПриложенияОбщий
		                |		ПО (СертификатПриложенияОбщий.Сеть = ЗНАЧЕНИЕ(Справочник.Сети.ПустаяСсылка))
		                |			И Токены.ВидПриложения = СертификатПриложенияОбщий.ВидПриложения
		                |			И Токены.ОперационнаяСистема = СертификатПриложенияОбщий.ОперационнаяСистема
		                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АктуальныеВерсииПриложений КАК АктуальныеВерсииПриложений
		                |		ПО Токены.ВидПриложения = АктуальныеВерсииПриложений.ВидПриложения
		                |			И Токены.ОперационнаяСистема = АктуальныеВерсииПриложений.ОперационнаяСистема
		                |ГДЕ
		                |	ЕСТЬNULL(АктуальныеВерсииПриложений.ВерсияПриложения, 0) > &ВерсияПриложения
		                |	И Токены.Ссылка = &Токен";
		
		пЗапрос.УстановитьПараметр("Токен", РезультатПроверки.Токен);
		пЗапрос.УстановитьПараметр("ЯзыкПриложения", ЯзыкПриложения);
		пЗапрос.УстановитьПараметр("Пользователь", РезультатПроверки.Пользователь);
		пЗапрос.УстановитьПараметр("ВерсияОС", Запись.ВерсияОС);
		пЗапрос.УстановитьПараметр("ВерсияПриложения", Запись.ВерсияПриложения);		
		пЗапрос.УстановитьПараметр("МодельУстройства", Запись.МодельУстройства);
		пЗапрос.УстановитьПараметр("ТокенУстройства", Запись.ТокенУстройства);
		
		РезультатыЗапроса	= пЗапрос.ВыполнитьПакет();
		Выборка	= РезультатыЗапроса[0].Выбрать();
		Пока Выборка.Следующий() Цикл
			Справочники.Токены.ЗаблокироватьТокенПользователя(Выборка.Токен);
		КонецЦикла;
		
		Выборка	= РезультатыЗапроса[1].Выбрать();
		Пока Выборка.Следующий() Цикл
			РаботаССообщениями.ОтправитьPush(Выборка);
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураJSON);
	
	ПараметрыЗапроса.Вставить("ТелоОтвета", ЗаписьJSON.Закрыть());	
	
КонецПроцедуры

Процедура УдалитьУстройство(ПараметрыЗапроса)
	
	ЯзыкПриложения		= ПараметрыЗапроса.ЯзыкПриложения;
	РезультатПроверки	= ПараметрыЗапроса.РезультатПроверки;
	
	ЗаписьJSON		= Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	СтруктураJSON	= Новый Структура;
	
	Справочники.Токены.ЗаблокироватьТокенПользователя(РезультатПроверки.Токен);
	СтруктураJSON.Вставить("result", "Ok");
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураJSON);
	
	ПараметрыЗапроса.Вставить("ТелоОтвета", ЗаписьJSON.Закрыть());	
	
КонецПроцедуры

Процедура ПолучитьПрофильПользователя(ПараметрыЗапроса)
	
	ДанныеЗапроса		= ПараметрыЗапроса.ДанныеЗапроса;	
	ЯзыкПриложения		= ПараметрыЗапроса.ЯзыкПриложения;
	РезультатПроверки	= ПараметрыЗапроса.РезультатПроверки;
	
	ЗаписьJSON		= Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	СтруктураJSON	= Новый Структура;
	
	пЗапрос	= Новый Запрос;
	пЗапрос.Текст	= "ВЫБРАТЬ
	             	  |	Пользователи.Ссылка КАК Пользователь,
	             	  |	Пользователи.Логин КАК Логин,
	             	  |	Пользователи.ДатаРождения КАК ДатаРождения,
	             	  |	Пользователи.НомерТелефона КАК НомерТелефона,
	             	  |	Пользователи.Email КАК Email,
	             	  |	НЕ Пользователи.НеУчаствоватьВРассылкеEmail КАК УчаствоватьВРассылкеEmail,
	             	  |	НЕ Пользователи.НеУчаствоватьВРассылкеСообщений КАК УчаствоватьВРассылкеСообщений,
	             	  |	Пользователи.Пол КАК Пол,
	             	  |	Пользователи.Штрихкод КАК Штрихкод,
	             	  |	Пользователи.КодПользователя КАК КодПользователя,
	             	  |	Пользователи.Фамилия КАК Фамилия,
	             	  |	Пользователи.Имя КАК Имя,
	             	  |	Пользователи.Отчество КАК Отчество
	             	  |ИЗ
	             	  |	Справочник.Пользователи КАК Пользователи
	             	  |ГДЕ
	             	  |	Пользователи.Ссылка = &Пользователь";
	
	пЗапрос.УстановитьПараметр("Пользователь", РезультатПроверки.Пользователь);
	
	РезультатЗапроса	= пЗапрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ПараметрыЗапроса.Вставить("ОписаниеОшибки", Служебный.ПолучитьОписаниеОшибки(ЯзыкПриложения, "userNotIdentified"));
	Иначе
		Выборка	= РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		СтруктураJSON.Вставить("login", Выборка.Логин);
		СтруктураJSON.Вставить("birthdayDate", Выборка.ДатаРождения);
		СтруктураJSON.Вставить("phoneNumber", Выборка.НомерТелефона);
		СтруктураJSON.Вставить("email", Выборка.Email);
		СтруктураJSON.Вставить("subscriptionEmail", Выборка.УчаствоватьВРассылкеEmail);
		СтруктураJSON.Вставить("subscriptionSms", Выборка.УчаствоватьВРассылкеСообщений);
		СтруктураJSON.Вставить("gender", Выборка.Пол);
		СтруктураJSON.Вставить("barcode", Выборка.Штрихкод);
		СтруктураJSON.Вставить("cid", Выборка.КодПользователя);
		СтруктураJSON.Вставить("uid", XMLСтрока(Выборка.Пользователь));
		СтруктураJSON.Вставить("lastName", Выборка.Фамилия);
		СтруктураJSON.Вставить("firstName", Выборка.Имя);
		СтруктураJSON.Вставить("secondName", Выборка.Отчество);
	КонецЕсли;

	ЗаписатьJSON(ЗаписьJSON, СтруктураJSON);	
	ПараметрыЗапроса.Вставить("ТелоОтвета", ЗаписьJSON.Закрыть());
	
КонецПроцедуры

Процедура ПолучитьСписокКлубов(ПараметрыЗапроса)
	
	ДанныеЗапроса		= ПараметрыЗапроса.ДанныеЗапроса;
	ЯзыкПриложения		= ПараметрыЗапроса.ЯзыкПриложения;
	РезультатПроверки	= ПараметрыЗапроса.РезультатПроверки;
	
	ЗаписьJSON		= Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	МассивJSON		= Новый Массив;
	СтруктураJSON	= Новый Структура;
	
	пЗапрос	= Новый Запрос;
	пЗапрос.Текст	= "ВЫБРАТЬ
	             	  |	Клубы.Наименование КАК Наименование,
	             	  |	Клубы.Адрес КАК Адрес,
	             	  |	Клубы.Ссылка КАК Клуб,
	             	  |	Клубы.Город КАК Город,
	             	  |	Клубы.Долгота КАК Долгота,
	             	  |	Клубы.Сегмент КАК Сегмент,
	             	  |	Клубы.Тип КАК Тип,
	             	  |	Клубы.Широта КАК Широта,
	             	  |	Клубы.Сеть КАК Сеть,
	             	  |	Клубы.ГрафикРаботыОтделов.(
	             	  |		Ссылка КАК Ссылка,
	             	  |		НомерСтроки КАК НомерСтроки,
	             	  |		Отдел КАК Отдел,
	             	  |		Телефон КАК Телефон,
	             	  |		ГрафикРаботыВБудни КАК ГрафикРаботыВБудни,
	             	  |		ГрафикРаботыВВыходные КАК ГрафикРаботыВВыходные
	             	  |	) КАК ГрафикРаботыОтделов,
	             	  |	Клубы.Предопределенный КАК Предопределенный,
	             	  |	Клубы.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
	             	  |ИЗ
	             	  |	Справочник.Клубы КАК Клубы
	             	  |ГДЕ
	             	  |	Клубы.Сеть = &Сеть
	             	  |	И НЕ Клубы.ПометкаУдаления";
	
	пЗапрос.УстановитьПараметр("Сеть", РезультатПроверки.Сеть);
	Выборка	= пЗапрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтруктураКлуба	= Новый Структура;
		СтруктураКлуба.Вставить("gymId", XMLСтрока(Выборка.Клуб));
		СтруктураКлуба.Вставить("name", Выборка.Наименование);
		СтруктураКлуба.Вставить("type", Выборка.Тип);
		СтруктураКлуба.Вставить("cityId", XMLСтрока(Выборка.Город));
		СтруктураКлуба.Вставить("gymAddress", Выборка.Адрес);			
		СтруктураКлуба.Вставить("divisionTitle", Выборка.Сегмент);
		
		КоординатыКлуба	= Новый Структура;
		КоординатыКлуба.Вставить("latitude", Выборка.Широта);
		КоординатыКлуба.Вставить("longitude", Выборка.Долгота);			
		СтруктураКлуба.Вставить("coords", КоординатыКлуба);			
		
		МассивГрафик = Новый Массив;
		Для Каждого СтрокаГрафик Из Выборка.ГрафикРаботыОтделов.Выгрузить() Цикл				
			График = Новый Структура;				
			График.Вставить("name"			, СтрокаГрафик.Отдел);
			График.Вставить("phone"			, СтрокаГрафик.Телефон);
			График.Вставить("weekdaysTime"	, СтрокаГрафик.ГрафикРаботыВБудни);
			График.Вставить("holidaysTime"	, СтрокаГрафик.ГрафикРаботыВВыходные);				
			МассивГрафик.Добавить(График);				
		КонецЦикла;	
		СтруктураКлуба.Вставить("departments", МассивГрафик);			
		МассивJSON.Добавить(СтруктураКлуба);
	КонецЦикла;	
	
	Если МассивJSON.Количество() = 0 Тогда
		ЗаписатьJSON(ЗаписьJSON, СтруктураJSON);
	Иначе
		ЗаписатьJSON(ЗаписьJSON, МассивJSON);
	КонецЕсли; 
	
	ПараметрыЗапроса.Вставить("ТелоОтвета", ЗаписьJSON.Закрыть());
	ПараметрыЗапроса.Вставить("НеСохранятьОтветВЛогах", Истина);
	
КонецПроцедуры

Процедура ПолучитьСписокПричинОтменыЗаписи(ПараметрыЗапроса)
	
	ДанныеЗапроса		= ПараметрыЗапроса.ДанныеЗапроса;
	ЯзыкПриложения		= ПараметрыЗапроса.ЯзыкПриложения;
	РезультатПроверки	= ПараметрыЗапроса.РезультатПроверки;
	
	ЗаписьJSON		= Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	МассивПричинОтмены  = Новый Массив;
	
	пЗапрос	= Новый Запрос;
	пЗапрос.Текст	= "ВЫБРАТЬ
	             	  |	ПричиныОтменыЗаписи.Ссылка КАК Ссылка,
	             	  |	ПричиныОтменыЗаписи.Наименование КАК Наименование
	             	  |ИЗ
	             	  |	Справочник.ПричиныОтменыЗаписи КАК ПричиныОтменыЗаписи
	             	  |ГДЕ
	             	  |	ПричиныОтменыЗаписи.Холдинг = &Холдинг
	             	  |	И НЕ ПричиныОтменыЗаписи.ПометкаУдаления";
	
	пЗапрос.УстановитьПараметр("Холдинг", РезультатПроверки.Холдинг);
	Выборка	= пЗапрос.Выполнить().Выбрать();	
	Пока Выборка.Следующий() Цикл
		СтруктураПричиныОтмены	= Новый Структура("uid,name", XMLСтрока(Выборка.Ссылка), Выборка.Наименование);
		МассивПричинОтмены.Добавить(СтруктураПричиныОтмены);
	КонецЦикла;
	
	ЗаписатьJSON(ЗаписьJSON, МассивПричинОтмены);	
	ПараметрыЗапроса.Вставить("ТелоОтвета", ЗаписьJSON.Закрыть());
	ПараметрыЗапроса.Вставить("НеСохранятьОтветВЛогах", Истина);
	
КонецПроцедуры

Процедура ПолучитьСписокСообщений(ПараметрыЗапроса)
	
	ДанныеЗапроса		= ПараметрыЗапроса.ДанныеЗапроса;
	ЯзыкПриложения		= ПараметрыЗапроса.ЯзыкПриложения;
	РезультатПроверки	= ПараметрыЗапроса.РезультатПроверки;
	
	ЗаписьJSON		= Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	МассивСообщений	= Новый Массив;
		
	ДатаРегистрации	= УниверсальноеВремя(?(ДанныеЗапроса.date = "", ТекущаяДата(), XMLЗначение(Тип("Дата"), ДанныеЗапроса.date)));
	
	Если РезультатПроверки.ВидПриложения = Перечисления.ВидыПриложений.Employee Тогда
		КаналИнформирования  = Перечисления.КаналыИнформирования.pushEmployee;
	ИначеЕсли РезультатПроверки.ВидПриложения = Перечисления.ВидыПриложений.Customer Тогда
		КаналИнформирования  = Перечисления.КаналыИнформирования.pushCustomer;
	Иначе
		КаналИнформирования  = Перечисления.КаналыИнформирования.ПустаяСсылка();
	КонецЕсли;
	
	пЗапрос	= Новый Запрос;
	пЗапрос.Текст	= "ВЫБРАТЬ ПЕРВЫЕ 20
	             	  |	Сообщения.Ссылка КАК Сообщение,
	             	  |	Сообщения.ДатаРегистрации КАК ДатаРегистрации,
	             	  |	Сообщения.Заголовок КАК Заголовок,
	             	  |	Сообщения.Текст КАК Текст,
	             	  |	Сообщения.ОбъектИД КАК ОбъектИД,
	             	  |	Сообщения.ОбъектТип КАК ОбъектТип
	             	  |ПОМЕСТИТЬ ВТ
	             	  |ИЗ
	             	  |	Справочник.Сообщения КАК Сообщения
	             	  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сообщения.ПриоритетыКаналовИнформирования КАК СообщенияПриоритетыКаналовИнформирования
	             	  |		ПО Сообщения.Ссылка = СообщенияПриоритетыКаналовИнформирования.Ссылка
	             	  |ГДЕ
	             	  |	СообщенияПриоритетыКаналовИнформирования.Канал = &КаналИнформирования
	             	  |	И Сообщения.Пользователь = &Пользователь
	             	  |	И Сообщения.ДатаРегистрации < &ДатаРегистрации
	             	  |
	             	  |УПОРЯДОЧИТЬ ПО
	             	  |	ДатаРегистрации УБЫВ
	             	  |;
	             	  |
	             	  |////////////////////////////////////////////////////////////////////////////////
	             	  |ВЫБРАТЬ
	             	  |	ВТ.Сообщение КАК Сообщение,
	             	  |	ВТ.ДатаРегистрации КАК ДатаРегистрации,
	             	  |	ВТ.Заголовок КАК Заголовок,
	             	  |	ВТ.Текст КАК Текст,
	             	  |	ВТ.ОбъектИД КАК ОбъектИД,
	             	  |	ВТ.ОбъектТип КАК ОбъектТип,
	             	  |	МАКСИМУМ(ВЫБОР
	             	  |			КОГДА ИсторияСообщенийСрезПоследних.СтатусСообщения = ЗНАЧЕНИЕ(Перечисление.СтатусыСообщений.Прочитано)
	             	  |				ТОГДА ИСТИНА
	             	  |			ИНАЧЕ ЛОЖЬ
	             	  |		КОНЕЦ) КАК Прочитано
	             	  |ИЗ
	             	  |	ВТ КАК ВТ
	             	  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСообщений.СрезПоследних КАК ИсторияСообщенийСрезПоследних
	             	  |		ПО ВТ.Сообщение = ИсторияСообщенийСрезПоследних.Сообщение
	             	  |
	             	  |СГРУППИРОВАТЬ ПО
	             	  |	ВТ.Сообщение,
	             	  |	ВТ.ДатаРегистрации,
	             	  |	ВТ.Заголовок,
	             	  |	ВТ.Текст,
	             	  |	ВТ.ОбъектИД,
	             	  |	ВТ.ОбъектТип
	             	  |
	             	  |УПОРЯДОЧИТЬ ПО
	             	  |	ДатаРегистрации УБЫВ";
	
	пЗапрос.УстановитьПараметр("ДатаРегистрации", ДатаРегистрации);
	пЗапрос.УстановитьПараметр("Пользователь", РезультатПроверки.Пользователь);
	пЗапрос.УстановитьПараметр("КаналИнформирования", КаналИнформирования);
	
	Выборка	= пЗапрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураСообщения	= Новый Структура;
		СтруктураСообщения.Вставить("noteId", XMLСтрока(Выборка.Сообщение));
		СтруктураСообщения.Вставить("date", XMLСтрока(МестноеВремя(Выборка.ДатаРегистрации, РезультатПроверки.ЧасовойПояс)));
		СтруктураСообщения.Вставить("title", Выборка.Заголовок);
		СтруктураСообщения.Вставить("text", Выборка.Текст);
		СтруктураСообщения.Вставить("read", Выборка.Прочитано);
		СтруктураСообщения.Вставить("objectId", Выборка.ОбъектИД);
		СтруктураСообщения.Вставить("objectType", Выборка.ОбъектТип);
		МассивСообщений.Добавить(СтруктураСообщения);
	КонецЦикла;
	
	ЗаписатьJSON(ЗаписьJSON, МассивСообщений);	
	ПараметрыЗапроса.Вставить("ТелоОтвета", ЗаписьJSON.Закрыть());	
	
КонецПроцедуры

Процедура ПрочитатьСообщение(ПараметрыЗапроса)
	
	ДанныеЗапроса		= ПараметрыЗапроса.ДанныеЗапроса;
	ЯзыкПриложения		= ПараметрыЗапроса.ЯзыкПриложения;
	РезультатПроверки	= ПараметрыЗапроса.РезультатПроверки;
	
	ЗаписьJSON		= Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();	
	СтруктураJSON	= Новый Структура;
	
	Если Не ДанныеЗапроса.Свойство("noteId") Или ДанныеЗапроса.noteId = "" Тогда		
		Сообщение	= Справочники.Сообщения.ПустаяСсылка();
	Иначе		
		Сообщение = XMLЗначение(Тип("СправочникСсылка.Сообщения"), ДанныеЗапроса.noteId);
	КонецЕсли;
	
	Если РезультатПроверки.ВидПриложения = Перечисления.ВидыПриложений.Employee Тогда
		КаналИнформирования  = Перечисления.КаналыИнформирования.pushEmployee;
	ИначеЕсли РезультатПроверки.ВидПриложения = Перечисления.ВидыПриложений.Customer Тогда
		КаналИнформирования  = Перечисления.КаналыИнформирования.pushCustomer;
	Иначе
		КаналИнформирования  = Перечисления.КаналыИнформирования.ПустаяСсылка();
	КонецЕсли;
	
	пЗапрос	= Новый Запрос;
	пЗапрос.Текст = "ВЫБРАТЬ
	                |	Сообщения.Ссылка КАК Сообщение
	                |ИЗ
	                |	Справочник.Сообщения КАК Сообщения
	                |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сообщения.ПриоритетыКаналовИнформирования КАК СообщенияПриоритетыКаналовИнформирования
	                |		ПО Сообщения.Ссылка = СообщенияПриоритетыКаналовИнформирования.Ссылка
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСообщений.СрезПоследних КАК ИсторияСообщенийСрезПоследних
	                |		ПО Сообщения.Ссылка = ИсторияСообщенийСрезПоследних.Сообщение
	                |ГДЕ
	                |	СообщенияПриоритетыКаналовИнформирования.Канал = &КаналИнформирования
	                |	И ЕСТЬNULL(ИсторияСообщенийСрезПоследних.СтатусСообщения, ЗНАЧЕНИЕ(Перечисление.СтатусыСообщений.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.СтатусыСообщений.Прочитано)
	                |	И Сообщения.Пользователь = &Пользователь";		
	
	пЗапрос.УстановитьПараметр("Пользователь", РезультатПроверки.Пользователь);
	пЗапрос.УстановитьПараметр("КаналИнформирования", КаналИнформирования);
	
	РезультатЗапроса	= пЗапрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда		
		Выборка	= РезультатЗапроса.Выбрать();
		КоличествоНеПрочитанныхСообщений	= Выборка.Количество();
		
		Если Сообщение.Пустая() Тогда				
			Пока Выборка.Следующий() Цикл
				Запись	= РегистрыСведений.ИсторияСообщений.СоздатьМенеджерЗаписи();
				Запись.Период				= УниверсальноеВремя(ТекущаяДата());
				Запись.Сообщение			= Выборка.Сообщение;
				Запись.Токен				= РезультатПроверки.Токен;
				Запись.ДатаСобытия			= Запись.Период;
				Запись.СтатусСообщения		= Перечисления.СтатусыСообщений.Прочитано;
				Запись.КаналИнформирования  = КаналИнформирования;
				Запись.Записать();
			КонецЦикла;
			КоличествоНеПрочитанныхСообщений	= 0;
		Иначе
			Если Выборка.НайтиСледующий(Новый Структура("Сообщение",Сообщение)) Тогда
				Запись	= РегистрыСведений.ИсторияСообщений.СоздатьМенеджерЗаписи();
				Запись.Период				= УниверсальноеВремя(ТекущаяДата());
				Запись.Сообщение			= Сообщение;
				Запись.Токен				= РезультатПроверки.Токен;
				Запись.ДатаСобытия			= Запись.Период;
				Запись.СтатусСообщения		= Перечисления.СтатусыСообщений.Прочитано;
				Запись.КаналИнформирования  = КаналИнформирования;
				Запись.Записать();
				КоличествоНеПрочитанныхСообщений	= КоличествоНеПрочитанныхСообщений - 1;
			КонецЕсли;
		КонецЕсли;
	Иначе
		КоличествоНеПрочитанныхСообщений	= 0;
	КонецЕсли;
	
	СтруктураJSON.Вставить("result", "Ok");
	СтруктураJSON.Вставить("quantity", КоличествоНеПрочитанныхСообщений);
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураJSON);	
	ПараметрыЗапроса.Вставить("ТелоОтвета", ЗаписьJSON.Закрыть());
	
КонецПроцедуры

Процедура КоличествоНеПрочитанныхСообщений(ПараметрыЗапроса)
	
	ДанныеЗапроса		= ПараметрыЗапроса.ДанныеЗапроса;
	ЯзыкПриложения		= ПараметрыЗапроса.ЯзыкПриложения;
	РезультатПроверки	= ПараметрыЗапроса.РезультатПроверки;
	
	ЗаписьJSON		= Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	СтруктураJSON	= Новый Структура;	
	
	Если РезультатПроверки.ВидПриложения = Перечисления.ВидыПриложений.Employee Тогда
		КаналИнформирования  = Перечисления.КаналыИнформирования.pushEmployee;
	ИначеЕсли РезультатПроверки.ВидПриложения = Перечисления.ВидыПриложений.Customer Тогда
		КаналИнформирования  = Перечисления.КаналыИнформирования.pushCustomer;
	Иначе
		КаналИнформирования  = Перечисления.КаналыИнформирования.ПустаяСсылка();
	КонецЕсли;
	
	пЗапрос	= Новый Запрос;
	пЗапрос.Текст	= "ВЫБРАТЬ
	             	  |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Сообщения.Ссылка) КАК Количество
	             	  |ИЗ
	             	  |	Справочник.Сообщения КАК Сообщения
	             	  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сообщения.ПриоритетыКаналовИнформирования КАК СообщенияПриоритетыКаналовИнформирования
	             	  |		ПО Сообщения.Ссылка = СообщенияПриоритетыКаналовИнформирования.Ссылка
	             	  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСообщений.СрезПоследних КАК ИсторияСообщенийСрезПоследних
	             	  |		ПО Сообщения.Ссылка = ИсторияСообщенийСрезПоследних.Сообщение
	             	  |ГДЕ
	             	  |	СообщенияПриоритетыКаналовИнформирования.Канал = &КаналИнформирования
	             	  |	И ЕСТЬNULL(ИсторияСообщенийСрезПоследних.СтатусСообщения, ЗНАЧЕНИЕ(Перечисление.СтатусыСообщений.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.СтатусыСообщений.Прочитано)
	             	  |	И Сообщения.Пользователь = &Пользователь";
	
	пЗапрос.УстановитьПараметр("Пользователь", РезультатПроверки.Пользователь);
	пЗапрос.УстановитьПараметр("КаналИнформирования", КаналИнформирования);
	
	Выборка	= пЗапрос.Выполнить().Выбрать();
	Выборка.Следующий();
	СтруктураJSON.Вставить("quantity", Выборка.Количество);
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураJSON);	
	ПараметрыЗапроса.Вставить("ТелоОтвета", ЗаписьJSON.Закрыть());
	
КонецПроцедуры

Процедура ВыполнитьВнешнийЗапрос(ПараметрыЗапроса)
	
	ДанныеЗапроса		= ПараметрыЗапроса.ДанныеЗапроса;
	ЯзыкПриложения		= ПараметрыЗапроса.ЯзыкПриложения;
	РезультатПроверки	= ПараметрыЗапроса.РезультатПроверки;
	ТелоОтвета			= "";	
	
	пЗапрос	= Новый Запрос;
	пЗапрос.Текст	= "ВЫБРАТЬ
	             	  |	СоответствиеЗапросовИсточникамИнформации.ВыполнятьВФоне КАК ВыполнятьВФоне,
	             	  |	СоответствиеЗапросовИсточникамИнформации.ЗапросПриемник КАК Приемник,
	             	  |	СоответствиеЗапросовИсточникамИнформации.Атрибут КАК Атрибут,
	             	  |	СоответствиеЗапросовИсточникамИнформации.ТолькоДляСотрудников КАК ТолькоДляСотрудников,
	             	  |	СоответствиеЗапросовИсточникамИнформации.НеСохранятьОтветВЛогах КАК НеСохранятьОтветВЛогах,
	             	  |	СоответствиеЗапросовИсточникамИнформации.СжиматьЛоги КАК СжиматьЛоги,
	             	  |	ПодключенияХолдинговКИсточникамИнформации.URL КАК URL,
	             	  |	ПодключенияХолдинговКИсточникамИнформации.Сервер КАК Сервер,
	             	  |	ПодключенияХолдинговКИсточникамИнформации.Порт КАК Порт,
	             	  |	ПодключенияХолдинговКИсточникамИнформации.Пользователь КАК УчетнаяЗапись,
	             	  |	ПодключенияХолдинговКИсточникамИнформации.Пароль КАК Пароль,
	             	  |	ПодключенияХолдинговКИсточникамИнформации.Таймаут КАК Таймаут,
	             	  |	ПодключенияХолдинговКИсточникамИнформации.ЗащищенноеСоединение КАК ЗащищенноеСоединение,
	             	  |	ПодключенияХолдинговКИсточникамИнформации.ИспользоватьАутентификациюОС КАК ИспользоватьАутентификациюОС
	             	  |ИЗ
	             	  |	РегистрСведений.ПодключенияХолдинговКИсточникамИнформации КАК ПодключенияХолдинговКИсточникамИнформации
	             	  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоответствиеЗапросовИсточникамИнформации.ИсточникиИнформации КАК СоответствиеЗапросовИсточникамИнформации
	             	  |		ПО ПодключенияХолдинговКИсточникамИнформации.ИсточникИнформации = СоответствиеЗапросовИсточникамИнформации.ИсточникИнформации
	             	  |			И (СоответствиеЗапросовИсточникамИнформации.ЗапросИсточник = &ИмяЗапроса)
	             	  |			И (НЕ СоответствиеЗапросовИсточникамИнформации.НеИспользовать)
	             	  |ГДЕ
	             	  |	ПодключенияХолдинговКИсточникамИнформации.Холдинг = &Холдинг
	             	  |	И НЕ СоответствиеЗапросовИсточникамИнформации.ЗапросПриемник ЕСТЬ NULL";
	
	пЗапрос.УстановитьПараметр("Холдинг", РезультатПроверки.Холдинг);
	пЗапрос.УстановитьПараметр("ИмяЗапроса", ПараметрыЗапроса.ИмяЗапроса);
	РезультатЗапроса	= пЗапрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ПараметрыЗапроса.Вставить("ОписаниеОшибки", Служебный.ПолучитьОписаниеОшибки(ЯзыкПриложения, "noUrl"));
	Иначе
		Заголовки	= Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/json");		
		
		Выборка		= РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ПараметрыЗапроса.Вставить("НеСохранятьОтветВЛогах", Выборка.НеСохранятьОтветВЛогах);
		ПараметрыЗапроса.Вставить("СжиматьЛоги", Выборка.СжиматьЛоги);
		
		Если Выборка.ТолькоДляСотрудников И РезультатПроверки.ТипПользователя <> "employee" Тогда
			ПараметрыЗапроса.Вставить("ОписаниеОшибки", Служебный.ПолучитьОписаниеОшибки(ЯзыкПриложения, "staffOnly"));
		Иначе
			
			ВыполнятьВФоне		= Выборка.ВыполнятьВФоне;				
			ТелоЗапроса			= РаботаСHTTP.ПодготовитьТелоHTTPЗапроса(ПараметрыЗапроса.КлючАвторизации, ДанныеЗапроса, РезультатПроверки.Пользователь, ЯзыкПриложения, РезультатПроверки.ЧасовойПояс, РезультатПроверки.ВидПриложения);
			МассивФЗ			= Новый Массив;			
			КодСостояния		= 200;
			
			Выборка.Сбросить();
			Пока Выборка.Следующий() Цикл
				
				Если ВыполнятьВФоне Тогда
					Адрес	= ПоместитьВоВременноеХранилище("");
					
					СтруктураПодключения	= Новый Структура;
					СтруктураПодключения.Вставить("Сервер", Выборка.Сервер);
					СтруктураПодключения.Вставить("УчетнаяЗапись", Выборка.УчетнаяЗапись);
					СтруктураПодключения.Вставить("Пароль", Выборка.Пароль);
					СтруктураПодключения.Вставить("Таймаут", Выборка.Таймаут);
					СтруктураПодключения.Вставить("ЗащищенноеСоединение", Выборка.ЗащищенноеСоединение);
					СтруктураПодключения.Вставить("ИспользоватьАутентификациюОС", Выборка.ИспользоватьАутентификациюОС);
					СтруктураПодключения.Вставить("URL", Выборка.URL);
					СтруктураПодключения.Вставить("Приемник", Выборка.Приемник);
					ФЗ	= РаботаСHTTP.ВыполнитьЗапросВФоне(СтруктураПодключения, Заголовки, ТелоЗапроса, Адрес);			
					
					СтруктураФЗ	= Новый Структура();
					СтруктураФЗ.Вставить("Адрес", Адрес);
					СтруктураФЗ.Вставить("ФЗ", ФЗ);
					СтруктураФЗ.Вставить("Атрибут", Выборка.Атрибут);				
					МассивФЗ.Добавить(СтруктураФЗ);
				Иначе
					HTTPСоединение	= Новый HTTPСоединение(Выборка.Сервер,, Выборка.УчетнаяЗапись, Выборка.Пароль,, Выборка.Таймаут, ?(Выборка.ЗащищенноеСоединение, Новый ЗащищенноеСоединениеOpenSSL(), Неопределено), Выборка.ИспользоватьАутентификациюОС);
					ЗапросHTTP = Новый HTTPЗапрос(Выборка.URL + Выборка.Приемник, Заголовки);				
					ЗапросHTTP.УстановитьТелоИзСтроки(ТелоЗапроса);				
					ОтветHTTP		= HTTPСоединение.ОтправитьДляОбработки(ЗапросHTTP);
					КодСостояния	= ОтветHTTP.КодСостояния;	
					ТелоОтвета		= ОтветHTTP.ПолучитьТелоКакСтроку();
				КонецЕсли;
				
			КонецЦикла;			
			
			Если ВыполнятьВФоне Тогда
				ТелоОтвета	= РаботаСHTTP.РезультаВыполненияФЗ(МассивФЗ);			
			КонецЕсли;
			
			Если КодСостояния <> 200 Тогда
				Если КодСостояния = 500 Или КодСостояния = 409 Тогда
					ПараметрыЗапроса.Вставить("ОписаниеОшибки", Служебный.ПолучитьОписаниеОшибки(ЯзыкПриложения, "system", ТелоОтвета));
				Иначе
					СтруктураHTTPЗапроса	= РаботаСHTTP.ТелоHTTPЗапросаВСтруктуру(ТелоОтвета);				
					Если СтруктураHTTPЗапроса.Свойство("result") Тогда
						ПараметрыЗапроса.Вставить("ОписаниеОшибки", Новый Структура("Служебное, Пользовательское", СтруктураHTTPЗапроса.result, СтруктураHTTPЗапроса.description));
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
			
	ПараметрыЗапроса.Вставить("ТелоОтвета", ТелоОтвета);	
		
КонецПроцедуры

//------------------------------------------------------------
//Обработчики внутренних запросов

Функция СоздатьЭлементыСправочника(СтруктураАтрибутов, ДанныеЗапроса, Холдинг)
	
	МассивЭлементов	= Новый Массив;
	
	Если ТипЗнч(ДанныеЗапроса) = Тип("Массив") Тогда
		Для Каждого ПараметрЗапроса Из ДанныеЗапроса Цикл
			СправочникСсылка	= Справочники[СтруктураАтрибутов.ИмяОбъектаМетаданных].ПолучитьСсылку(Новый УникальныйИдентификатор(ПараметрЗапроса.uid));
			СправочникОбъект	= СправочникСсылка.ПолучитьОбъект();
			УстановитьПароль	= Ложь;
			Если СправочникОбъект = Неопределено Тогда
				СправочникОбъект	= Справочники[СтруктураАтрибутов.ИмяОбъектаМетаданных].СоздатьЭлемент();
				СправочникОбъект.УстановитьСсылкуНового(СправочникСсылка);					
				Для Каждого Атрибут Из СтруктураАтрибутов.ТаблицаАтрибутовДляНовогоЭлемента Цикл
					Если Атрибут.Ключ = "Пароль" И ПараметрЗапроса.Свойство(Атрибут.Значение) Тогда
						УстановитьПароль	= Истина;
						Пароль				= XMLЗначение(Тип(Атрибут.Тип), ПараметрЗапроса[Атрибут.Значение])
					Иначе
						СправочникОбъект[Атрибут.Ключ]	= XMLЗначение(Тип(Атрибут.Тип), ПараметрЗапроса[Атрибут.Значение]);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;			
			Для Каждого Атрибут Из СтруктураАтрибутов.ТаблицаАтрибутов Цикл
				Если Атрибут.Тип = "ТабличнаяЧасть" Тогда 
					СправочникОбъект[Атрибут.Ключ].Очистить();
					Для Каждого ЭлементМассива Из ПараметрЗапроса[Атрибут.Значение] Цикл
						НоваяСтрока	= СправочникОбъект[Атрибут.Ключ].Добавить();						
						Для Каждого РеквизитТЧ Из СтруктураАтрибутов.СтруктураМД[Атрибут.Ключ] Цикл
							Если РеквизитТЧ.Тип	= "Ссылка" Тогда
								Для Каждого РеквизитСсылки Из СтруктураАтрибутов.СтруктураМД[РеквизитТЧ.Ключ] Цикл
									НоваяСтрока[РеквизитТЧ.Ключ] = Справочники[РеквизитСсылки.Ключ].ПолучитьСсылку(Новый УникальныйИдентификатор(ЭлементМассива[РеквизитТЧ.Значение][РеквизитСсылки.Значение]));
								КонецЦикла;
							Иначе
								НоваяСтрока[РеквизитТЧ.Ключ] = ЭлементМассива[РеквизитТЧ.Значение];
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
				ИначеЕсли Атрибут.Тип = "Ссылка" Тогда 
					Для Каждого РеквизитСсылки Из СтруктураАтрибутов.СтруктураМД[Атрибут.Ключ] Цикл
						СправочникОбъект[Атрибут.Ключ]	= Справочники[РеквизитСсылки.Ключ].ПолучитьСсылку(Новый УникальныйИдентификатор(ПараметрЗапроса[Атрибут.Значение][РеквизитСсылки.Значение]));
					КонецЦикла;
				Иначе
					СправочникОбъект[Атрибут.Ключ]	= XMLЗначение(Тип(Атрибут.Тип), ПараметрЗапроса[Атрибут.Значение]);
				КонецЕсли;				
			КонецЦикла;
			Если СтруктураАтрибутов.ИмяОбъектаМетаданных <> "СоответствиеЗапросовИсточникамИнформации" Тогда
				СправочникОбъект.Холдинг = Холдинг;
				СправочникОбъект.ДатаРегистрации = УниверсальноеВремя(ТекущаяДата());
			КонецЕсли;			
			СправочникОбъект.Записать();
			МассивЭлементов.Добавить(СправочникОбъект.Ссылка);
			Если УстановитьПароль Тогда
				Справочники.Пользователи.УстановитьПарольПользователя(СправочникОбъект.Ссылка, Пароль);	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивЭлементов;
	
КонецФункции

Функция ИзменитьСоздатьЭлементыСправочника(ИмяЗапроса, Запрос, ЯзыкПриложения)
	
	ЗаписьJSON		= Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(); 		
	СтруктураJSON	= Новый Структура;
	ОписаниеОшибки	= Служебный.ПолучитьОписаниеОшибки();
	
	СтруктураАтрибутов	= РаботаСHTTP.СтруктураАтрибутовВнешнегоЗапроса(ИмяЗапроса);

	Если СтруктураАтрибутов.ИмяОбъектаМетаданных = "" Тогда
		Ошибка	= "no request name";
	КонецЕсли;
	
	ТокенХолдинга		= Запрос.Заголовки.Получить("auth-key");
	Если ТокенХолдинга = Неопределено Тогда
		ОписаниеОшибки	= Служебный.ПолучитьОписаниеОшибки(ЯзыкПриложения, "userNotIdentified");
	Иначе
		Холдинг				= Справочники.Холдинги.НайтиПоРеквизиту("Токен", ТокенХолдинга);
		Если Холдинг.Пустая() Тогда
			ОписаниеОшибки	= Служебный.ПолучитьОписаниеОшибки(ЯзыкПриложения, "userNotIdentified");
		КонецЕсли;
	КонецЕсли;    	
	
	Если ОписаниеОшибки.Служебное = "" Тогда
		ДанныеЗапроса	= РаботаСHTTP.ПараметрыHTTPЗапросаВСтруктуру(Запрос).ДанныеЗапроса;
		СтруктураJSON.Вставить("result", "Ok");	
		СоздатьЭлементыСправочника(СтруктураАтрибутов, ДанныеЗапроса, Холдинг);
	КонецЕсли;
	
	Если ОписаниеОшибки.Служебное <> "" Тогда
		ЗаписьJSON		= Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();	
		СтруктураJSON	= Новый Структура;
		СтруктураJSON.Вставить("result", "error");
		СтруктураJSON.Вставить("description", Ошибка);
		ЗаписатьJSON(ЗаписьJSON, СтруктураJSON);
		JSONСтрока	= ЗаписьJSON.Закрыть();
	КонецЕсли;
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураJSON);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции 
