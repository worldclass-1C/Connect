
Функция ПолучательPush(DeviceID, ТипПодписчика) Экспорт
    xdtoПодписчик = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://v8.1c.ru/8.3/data/ext","DeliverableNotificationSubscriberID"));
    xdtoПодписчик.DeviceID = DeviceID;
    xdtoПодписчик.SubscriberType = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://v8.1c.ru/8.3/data/ext","DeliverableNotificationSubscriberType"), ТипПодписчика);
    НовыйСериализаторXDTO = Новый СериализаторXDTO(ФабрикаXDTO);
    Подписчик = НовыйСериализаторXDTO.ПрочитатьXDTO(xdtoПодписчик);        
    Возврат Подписчик;    
КонецФункции

Функция НовоеСообщение(ДанныеСообщения) Экспорт
	
	СообщениеОбъект	= Справочники.Сообщения.СоздатьЭлемент();
	
	СообщениеОбъект.ОбъектИД		= ?(ДанныеСообщения.Свойство("ОбъектИД"), ДанныеСообщения.ОбъектИД, "");
	СообщениеОбъект.ОбъектТип		= ?(ДанныеСообщения.Свойство("ОбъектТип"), ДанныеСообщения.ОбъектТип, "");
	СообщениеОбъект.Действие		= ?(ДанныеСообщения.Свойство("Действие"), ДанныеСообщения.Действие, "");
	СообщениеОбъект.ДатаРегистрации	= УниверсальноеВремя(ТекущаяДата());
	СообщениеОбъект.Заголовок		= ?(ДанныеСообщения.Свойство("Заголовок"), ДанныеСообщения.Заголовок, "");
	СообщениеОбъект.Клуб			= ?(ДанныеСообщения.Свойство("Клуб"), ДанныеСообщения.Клуб, Справочники.Клубы.ПустаяСсылка());
	СообщениеОбъект.НомерТелефона	= СтрЗаменить(?(ДанныеСообщения.Свойство("НомерТелефона"), ДанныеСообщения.НомерТелефона, ""),"+","");
	СообщениеОбъект.Пользователь	= ?(ДанныеСообщения.Свойство("Пользователь"), ДанныеСообщения.Пользователь, Справочники.Пользователи.ПустаяСсылка());
	//СообщениеОбъект.Токен			= ?(ДанныеСообщения.Свойство("Токен"), ДанныеСообщения.Токен, Справочники.Токены.ПустаяСсылка());
	СообщениеОбъект.Приоритет		= ?(ДанныеСообщения.Свойство("Приоритет"), ДанныеСообщения.Приоритет, 10000);
	СообщениеОбъект.Текст			= ?(ДанныеСообщения.Свойство("Текст"), ДанныеСообщения.Текст, "");
	СообщениеОбъект.Холдинг			= ДанныеСообщения.Холдинг;
	
	Для Каждого КаналИнформирования Из ДанныеСообщения.КаналыИнформирования Цикл
		НоваяСтрока	= СообщениеОбъект.ПриоритетыКаналовИнформирования.Добавить();
		НоваяСтрока.Канал	= КаналИнформирования;
	КонецЦикла;	
	СообщениеОбъект.Записать();
	
	Если СообщениеОбъект.ПриоритетыКаналовИнформирования.Количество() > 0 Тогда 
		ПланыОбмена.ЗарегистрироватьИзменения(ОбщегоНазначенияПовторноеИспользование.УзелСообщенияКОтправке(СообщениеОбъект.ПриоритетыКаналовИнформирования[0].Канал), СообщениеОбъект);
	КонецЕсли; 
	
	Возврат СообщениеОбъект.Ссылка;
	
КонецФункции

Функция ДанныеPush(action = "", objectId = "", objectType = "", noteId = "") Экспорт
	СтруктураJSON	= Новый Структура;
	СтруктураJSON.Вставить("action", action);
	СтруктураJSON.Вставить("objectId", objectId);
	СтруктураJSON.Вставить("objectType", objectType);
	СтруктураJSON.Вставить("noteId", XMLСтрока(noteId));
	Возврат	HTTP.GetJSONFromStructure(СтруктураJSON);    
КонецФункции

Процедура ОтправитьPush(Параметры) Экспорт
	
	Если Параметры.ТокенУстройства <> "" Тогда
		Уведомление				= Новый ДоставляемоеУведомление;
		Уведомление.Заголовок	= Параметры.Заголовок;
		Уведомление.Текст		= Параметры.Текст;
		Уведомление.Наклейка	= Параметры.Наклейка;		
		//Уведомление.ЗвуковоеОповещение = ЗвуковоеОповещение.ПоУмолчанию;	
		Уведомление.Получатели.Добавить(ПолучательPush(Параметры.ТокенУстройства, Параметры.ТипПодписчика));
		
		СтруктураJSON	= Новый Структура;
		СтруктураJSON.Вставить("action", Параметры.Действие);
		СтруктураJSON.Вставить("objectId", Параметры.ОбъектИД);
		СтруктураJSON.Вставить("objectType", Параметры.ОбъектТип);
		СтруктураJSON.Вставить("noteId", XMLСтрока(Параметры.Сообщение));
		Уведомление.Данные	= HTTP.GetJSONFromStructure(СтруктураJSON);
		
		ОтправкаДоставляемыхУведомлений.Отправить(Уведомление, ОбщегоНазначенияПовторноеИспользование.ДанныеАутентификации(Параметры.ОперационнаяСистема, Параметры.Сертификат));
		Если Не Параметры.Сообщение.Пустая() Тогда
			ДобавитьИсторию(Параметры.Сообщение, Параметры.КаналИнформирования, Перечисления.СтатусыСообщений.Отправлено, "", УниверсальноеВремя(ТекущаяДата()), Параметры.Токен);
		КонецЕсли;
	КонецЕсли;
	
	Если Не Параметры.Сообщение.Пустая() Тогда
		ПланыОбмена.УдалитьРегистрациюИзменений(Параметры.УзелСообщенияКОтправке, Параметры.Сообщение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьСМС(Параметры) Экспорт
	
	Ответ	= Новый Структура("ИД, СтатусСообщения, Ошибка, Период", "", Перечисления.СтатусыСообщений.НеОтправлено, "", Неопределено);
	
	Если Параметры.Провайдер = Перечисления.ПровайдерыСмс.Rapporto Тогда
		Ответ	= ИнтеграцияСRapporto.ОтправитьСМС(Параметры, Ответ);
	ИначеЕсли Параметры.Провайдер = Перечисления.ПровайдерыСмс.Smstraffic Тогда
		Ответ	= ИнтеграцияСSMSTraffic.ОтправитьСМС(Параметры, Ответ);
	ИначеЕсли Параметры.Провайдер = Перечисления.ПровайдерыСмс.IDMkg Тогда
		Ответ	= ИнтеграцияСIDMkg.ОтправитьСМС(Параметры, Ответ);
	ИначеЕсли Параметры.Провайдер = Перечисления.ПровайдерыСмс.Stramedia Тогда
		Ответ	= ИнтеграцияСStramedia.ОтправитьСМС(Параметры, Ответ);
	ИначеЕсли Параметры.Провайдер = Перечисления.ПровайдерыСмс.SmsGold Тогда
		Ответ	= ИнтеграцияСSmsGold.ОтправитьСМС(Параметры, Ответ);	
	КонецЕсли;	
	
	Если Ответ.СтатусСообщения = Перечисления.СтатусыСообщений.Отправлено Тогда
		ДобавитьИДСообщения(Параметры.Сообщение, Перечисления.КаналыИнформирования.sms, Ответ.ИД);
		ПланыОбмена.УдалитьРегистрациюИзменений(Параметры.УзелСообщенияКОтправке, Параметры.Сообщение);
		ПланыОбмена.ЗарегистрироватьИзменения(Параметры.УзелСообщенияПроверкаСтатуса, Параметры.Сообщение);
	ИначеЕсли Ответ.СтатусСообщения = Перечисления.СтатусыСообщений.НеОтправлено Тогда
		ПланыОбмена.УдалитьРегистрациюИзменений(Параметры.УзелСообщенияКОтправке, Параметры.Сообщение);
		ИспользоватьСледующийКаналИнформирования(Параметры.Сообщение, Перечисления.КаналыИнформирования.sms);
	КонецЕсли;
	
	ДобавитьИсторию(Параметры.Сообщение, Перечисления.КаналыИнформирования.sms, Ответ.СтатусСообщения, Ответ.Ошибка, Ответ.Период);
	
КонецПроцедуры

Процедура ОтправитьСообщения(КаналИнформирования) Экспорт
	
	УзелСообщенияКОтправке			= ОбщегоНазначенияПовторноеИспользование.УзелСообщенияКОтправке(КаналИнформирования);
	УзелСообщенияПроверкаСтатуса	= ОбщегоНазначенияПовторноеИспользование.УзелСообщенияПроверкаСтатуса(КаналИнформирования);	
	
	Если КаналИнформирования = Перечисления.КаналыИнформирования.sms Тогда
		ИмяМетода	= "РаботаССообщениями.ОтправитьСмсПоХолдингу";
	ИначеЕсли КаналИнформирования = Перечисления.КаналыИнформирования.pushEmployee Тогда
		ИмяМетода	= "РаботаССообщениями.ОтправитьPushПоХолдингу";
	ИначеЕсли КаналИнформирования = Перечисления.КаналыИнформирования.pushCustomer Тогда
		ИмяМетода	= "РаботаССообщениями.ОтправитьPushПоХолдингу";	
	Иначе
		ИмяМетода	= "";
	КонецЕсли;	
	
	Если ИмяМетода <> "" Тогда 		
		пЗапрос	= Новый Запрос;
		пЗапрос.Текст	= "ВЫБРАТЬ РАЗЛИЧНЫЕ
		             	  |	СообщенияИзменения.Ссылка.Холдинг КАК Холдинг
		             	  |ИЗ
		             	  |	Справочник.Сообщения.Изменения КАК СообщенияИзменения
		             	  |ГДЕ
		             	  |	СообщенияИзменения.Узел = &Узел";
		
		пЗапрос.УстановитьПараметр("Узел", УзелСообщенияКОтправке);		
		Выборка	= пЗапрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ПередаваемыеПараметры	= Новый Массив;
			ПередаваемыеПараметры.Добавить(УзелСообщенияКОтправке);
			ПередаваемыеПараметры.Добавить(УзелСообщенияПроверкаСтатуса);
			ПередаваемыеПараметры.Добавить(Выборка.Холдинг);
			ПередаваемыеПараметры.Добавить(КаналИнформирования);
			ФоновыеЗадания.Выполнить(ИмяМетода, ПередаваемыеПараметры, Новый УникальныйИдентификатор, "ОтправитьСообщения");			
		КонецЦикла;		
	КонецЕсли;
	
КонецПроцедуры 

Процедура ПроверитьСтатусСМС(Параметры) Экспорт
	
	Ответ	= Новый Структура("СтатусСообщения, Ошибка, Период", Перечисления.СтатусыСообщений.НеДоставлено, "", Неопределено);
	
	Если Параметры.Провайдер = Перечисления.ПровайдерыСмс.Rapporto Тогда
		Ответ	= ИнтеграцияСRapporto.ПроверитьСтатусСМС(Параметры, Ответ);
	ИначеЕсли Параметры.Провайдер = Перечисления.ПровайдерыСмс.Smstraffic Тогда
		Ответ	= ИнтеграцияСSMSTraffic.ПроверитьСтатусСМС(Параметры, Ответ);
	ИначеЕсли Параметры.Провайдер = Перечисления.ПровайдерыСмс.IDMkg Тогда
		Ответ	= ИнтеграцияСIDMkg.ПроверитьСтатусСМС(Параметры, Ответ);
	ИначеЕсли Параметры.Провайдер = Перечисления.ПровайдерыСмс.Stramedia Тогда
		Ответ	= ИнтеграцияСStramedia.ПроверитьСтатусСМС(Параметры, Ответ);
	ИначеЕсли Параметры.Провайдер = Перечисления.ПровайдерыСмс.SmsGold Тогда
		Ответ	= ИнтеграцияСSmsGold.ПроверитьСтатусСМС(Параметры, Ответ);
	КонецЕсли;	
	
	Если Ответ.СтатусСообщения = Перечисления.СтатусыСообщений.Доставлено Или Параметры.ВозрастСообщения > 2 Тогда		
		ПланыОбмена.УдалитьРегистрациюИзменений(Параметры.УзелСообщенияПроверкаСтатуса, Параметры.Сообщение);
	ИначеЕсли Ответ.СтатусСообщения = Перечисления.СтатусыСообщений.НеДоставлено Тогда		
		ИспользоватьСледующийКаналИнформирования(Параметры.Сообщение, Перечисления.КаналыИнформирования.sms);
	КонецЕсли;
	
	ДобавитьИсторию(Параметры.Сообщение, Перечисления.КаналыИнформирования.sms, Ответ.СтатусСообщения, Ответ.Ошибка, Ответ.Период);
	
КонецПроцедуры

Процедура ИспользоватьСледующийКаналИнформирования(Сообщение, ТекущийКаналИнформирования)
	СтрокаТекущийКанал	= Сообщение.ПриоритетыКаналовИнформирования.Найти(ТекущийКаналИнформирования, "Канал");
	Если СтрокаТекущийКанал <> Неопределено Тогда		
		КоличествоКаналов		= Сообщение.ПриоритетыКаналовИнформирования.Количество();
		ИндексТекущегоКанала	= СтрокаТекущийКанал.НомерСтроки - 1;
		Если ИндексТекущегоКанала < КоличествоКаналов - 1 Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(ОбщегоНазначенияПовторноеИспользование.УзелСообщенияКОтправке(Сообщение.ПриоритетыКаналовИнформирования[ИндексТекущегоКанала + 1].Канал), Сообщение);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьИсторию(Сообщение, КаналИнформирования, СтатусСообщения, Ошибка, ДатаСобытия = Неопределено, Токен = Неопределено) Экспорт
	Запись	= РегистрыСведений.ИсторияСообщений.СоздатьМенеджерЗаписи();
	Запись.Период				= УниверсальноеВремя(ТекущаяДата());
	Запись.Сообщение			= Сообщение;
	Запись.КаналИнформирования	= КаналИнформирования;	
	Запись.СтатусСообщения		= СтатусСообщения;
	Запись.Ошибка				= Ошибка;
	Запись.ДатаСобытия			= ?(ДатаСобытия = Неопределено, Дата(1,1,1), ДатаСобытия);
	Запись.Токен				= Токен; 
	Запись.Записать();	
КонецПроцедуры

Процедура ДобавитьИДСообщения(Сообщение, КаналИнформирования, ИД) Экспорт
	Запись	= РегистрыСведений.ИДСообщений.СоздатьМенеджерЗаписи();	
	Запись.Сообщение			= Сообщение;
	Запись.КаналИнформирования	= КаналИнформирования;		
	Запись.ИД					= ИД;
	Запись.Записать();	
КонецПроцедуры

Процедура ОтправитьСмсПоХолдингу(УзелСообщенияКОтправке, УзелСообщенияПроверкаСтатуса, Холдинг, КаналИнформирования) Экспорт
		
	пЗапрос	= Новый Запрос;
	пЗапрос.Текст	= "ВЫБРАТЬ ПЕРВЫЕ 100
	             	  |	СообщенияИзменения.Ссылка КАК Сообщение,
	             	  |	СообщенияИзменения.Ссылка.НомерТелефона КАК НомерТелефона,
	             	  |	СообщенияИзменения.Ссылка.Текст КАК Текст,
	             	  |	&УзелСообщенияКОтправке КАК УзелСообщенияКОтправке,
	             	  |	&УзелСообщенияПроверкаСтатуса КАК УзелСообщенияПроверкаСтатуса,
	             	  |	ЕСТЬNULL(СмсПровайдерПоКлубу.Провайдер, СмсПровайдер.Провайдер) КАК Провайдер,
	             	  |	ЕСТЬNULL(СмсПровайдерПоКлубу.Сервер, СмсПровайдер.Сервер) КАК Сервер,
	             	  |	ЕСТЬNULL(СмсПровайдерПоКлубу.Порт, СмсПровайдер.Порт) КАК Порт,
	             	  |	ЕСТЬNULL(СмсПровайдерПоКлубу.Пользователь, СмсПровайдер.Пользователь) КАК Пользователь,
	             	  |	ЕСТЬNULL(СмсПровайдерПоКлубу.Пароль, СмсПровайдер.Пароль) КАК Пароль,
	             	  |	ЕСТЬNULL(СмсПровайдерПоКлубу.Таймаут, СмсПровайдер.Таймаут) КАК Таймаут,
	             	  |	ЕСТЬNULL(СмсПровайдерПоКлубу.ЗащищенноеСоединение, СмсПровайдер.ЗащищенноеСоединение) КАК ЗащищенноеСоединение,
	             	  |	ЕСТЬNULL(СмсПровайдерПоКлубу.ИспользоватьАутентификациюОС, СмсПровайдер.ИспользоватьАутентификациюОС) КАК ИспользоватьАутентификациюОС,
					  |	ЕСТЬNULL(СмсПровайдерПоКлубу.ИмяОтправителя, СмсПровайдер.ИмяОтправителя) КАК ИмяОтправителя
	             	  |ИЗ
	             	  |	Справочник.Сообщения.Изменения КАК СообщенияИзменения
	             	  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодключенияХолдинговКСмсПровайдерам КАК СмсПровайдерПоКлубу
	             	  |		ПО (&Холдинг = СмсПровайдерПоКлубу.Холдинг)
	             	  |			И (СмсПровайдерПоКлубу.Клуб = СообщенияИзменения.Ссылка.Клуб)
	             	  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодключенияХолдинговКСмсПровайдерам КАК СмсПровайдер
	             	  |		ПО (&Холдинг = СмсПровайдер.Холдинг)
	             	  |			И (СмсПровайдер.Клуб = ЗНАЧЕНИЕ(Справочник.Клубы.ПустаяСсылка))
	             	  |ГДЕ
	             	  |	СообщенияИзменения.Узел = &УзелСообщенияКОтправке
	             	  |	И СообщенияИзменения.Ссылка.Холдинг = &Холдинг
	             	  |
	             	  |УПОРЯДОЧИТЬ ПО
	             	  |	СообщенияИзменения.Ссылка.Приоритет";
	
	пЗапрос.УстановитьПараметр("УзелСообщенияКОтправке", УзелСообщенияКОтправке);
	пЗапрос.УстановитьПараметр("УзелСообщенияПроверкаСтатуса", УзелСообщенияПроверкаСтатуса);
	пЗапрос.УстановитьПараметр("Холдинг", Холдинг);
	
	Выборка	= пЗапрос.Выполнить().Выбрать();	
	
	Пока Выборка.Следующий() Цикл		
		РаботаССообщениями.ОтправитьСМС(Выборка);
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПроверитьСтатусСмсПоХолдингу(УзелСообщенияПроверкаСтатуса, Холдинг) Экспорт
		
	пЗапрос	= Новый Запрос;
	пЗапрос.Текст	= "ВЫБРАТЬ
	             	  |	РАЗНОСТЬДАТ(СообщенияИзменения.Ссылка.ДатаРегистрации, &ТекущаяДата, ДЕНЬ) КАК ВозрастСообщения,
	             	  |	&ТекущаяДата КАК ТекущаяДата,
	             	  |	СообщенияИзменения.Ссылка КАК Сообщение,
	             	  |	ИДСообщений.ИД КАК ИД,
	             	  |	&УзелСообщенияПроверкаСтатуса КАК УзелСообщенияПроверкаСтатуса,
	             	  |	ЕСТЬNULL(СмсПровайдерПоКлубу.Провайдер, СмсПровайдер.Провайдер) КАК Провайдер,
	             	  |	ЕСТЬNULL(СмсПровайдерПоКлубу.Сервер, СмсПровайдер.Сервер) КАК Сервер,
	             	  |	ЕСТЬNULL(СмсПровайдерПоКлубу.Порт, СмсПровайдер.Порт) КАК Порт,
	             	  |	ЕСТЬNULL(СмсПровайдерПоКлубу.Пользователь, СмсПровайдер.Пользователь) КАК Пользователь,
	             	  |	ЕСТЬNULL(СмсПровайдерПоКлубу.Пароль, СмсПровайдер.Пароль) КАК Пароль,
	             	  |	ЕСТЬNULL(СмсПровайдерПоКлубу.Таймаут, СмсПровайдер.Таймаут) КАК Таймаут,
	             	  |	ЕСТЬNULL(СмсПровайдерПоКлубу.ЗащищенноеСоединение, СмсПровайдер.ЗащищенноеСоединение) КАК ЗащищенноеСоединение,
	             	  |	ЕСТЬNULL(СмсПровайдерПоКлубу.ИспользоватьАутентификациюОС, СмсПровайдер.ИспользоватьАутентификациюОС) КАК ИспользоватьАутентификациюОС
	             	  |ИЗ
	             	  |	Справочник.Сообщения.Изменения КАК СообщенияИзменения
	             	  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодключенияХолдинговКСмсПровайдерам КАК СмсПровайдерПоКлубу
	             	  |		ПО (&Холдинг = СмсПровайдерПоКлубу.Холдинг)
	             	  |			И (СмсПровайдерПоКлубу.Клуб = СообщенияИзменения.Ссылка.Клуб)
	             	  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодключенияХолдинговКСмсПровайдерам КАК СмсПровайдер
	             	  |		ПО (&Холдинг = СмсПровайдер.Холдинг)
	             	  |			И (СмсПровайдер.Клуб = ЗНАЧЕНИЕ(Справочник.Клубы.ПустаяСсылка))
	             	  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИДСообщений КАК ИДСообщений
	             	  |		ПО СообщенияИзменения.Ссылка = ИДСообщений.Сообщение
	             	  |			И (ИДСообщений.КаналИнформирования = ЗНАЧЕНИЕ(Перечисление.КаналыИнформирования.sms))
	             	  |ГДЕ
	             	  |	СообщенияИзменения.Узел = &УзелСообщенияПроверкаСтатуса
	             	  |	И СообщенияИзменения.Ссылка.Холдинг = &Холдинг";
	
	пЗапрос.УстановитьПараметр("УзелСообщенияПроверкаСтатуса", УзелСообщенияПроверкаСтатуса);
	пЗапрос.УстановитьПараметр("Холдинг", Холдинг);
	пЗапрос.УстановитьПараметр("ТекущаяДата", УниверсальноеВремя(ТекущаяДата()));
	                       
	Выборка	= пЗапрос.Выполнить().Выбрать();	
	
	Пока Выборка.Следующий() Цикл		
		РаботаССообщениями.ПроверитьСтатусСМС(Выборка);
	КонецЦикла;	
	
КонецПроцедуры

Процедура ОтправитьPushПоХолдингу(УзелСообщенияКОтправке, УзелСообщенияПроверкаСтатуса, Холдинг, КаналИнформирования) Экспорт
		
	пЗапрос	= Новый Запрос;
	пЗапрос.Текст	= "ВЫБРАТЬ ПЕРВЫЕ 100
	             	  |	СообщенияИзменения.Ссылка КАК Сообщение,
	             	  |	СообщенияИзменения.Ссылка.Заголовок КАК Заголовок,
	             	  |	СообщенияИзменения.Ссылка.Текст КАК Текст,
	             	  |	СообщенияИзменения.Ссылка.Действие КАК Действие,
	             	  |	СообщенияИзменения.Ссылка.ОбъектИД КАК ОбъектИД,
	             	  |	СообщенияИзменения.Ссылка.ОбъектТип КАК ОбъектТип,
	             	  |	&УзелСообщенияКОтправке КАК УзелСообщенияКОтправке,
	             	  |	ЕСТЬNULL(Токены.Ссылка, ЗНАЧЕНИЕ(Справочник.Токены.ПустаяСсылка)) КАК Токен,
	             	  |	Токены.Сеть КАК Сеть,
	             	  |	Токены.ВидПриложения КАК ВидПриложения,
	             	  |	Токены.ОперационнаяСистема КАК ОперационнаяСистема,
	             	  |	СообщенияИзменения.Ссылка.Пользователь КАК Пользователь,
	             	  |	ВЫБОР
	             	  |		КОГДА Токены.ОперационнаяСистема = ЗНАЧЕНИЕ(Перечисление.ОперационныеСистемы.Android)
	             	  |			ТОГДА ""GCM""
	             	  |		КОГДА Токены.ОперационнаяСистема = ЗНАЧЕНИЕ(Перечисление.ОперационныеСистемы.iOS)
	             	  |			ТОГДА ""APNS""
	             	  |		ИНАЧЕ """"
	             	  |	КОНЕЦ КАК ТипПодписчика
	             	  |ПОМЕСТИТЬ ВТ
	             	  |ИЗ
	             	  |	Справочник.Сообщения.Изменения КАК СообщенияИзменения
	             	  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Токены КАК Токены
	             	  |		ПО СообщенияИзменения.Ссылка.Пользователь = Токены.Пользователь
	             	  |			И СообщенияИзменения.Ссылка.Токен <> Токены.Ссылка
	             	  |			И (Токены.ДатаБлокировки = ДАТАВРЕМЯ(1, 1, 1))
	             	  |ГДЕ
	             	  |	СообщенияИзменения.Узел = &УзелСообщенияКОтправке
	             	  |
	             	  |УПОРЯДОЧИТЬ ПО
	             	  |	СообщенияИзменения.Ссылка.Приоритет
	             	  |;
	             	  |
	             	  |////////////////////////////////////////////////////////////////////////////////
	             	  |ВЫБРАТЬ
	             	  |	ВТ.Пользователь КАК Пользователь,
	             	  |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Сообщения.Ссылка) КАК Количество
	             	  |ПОМЕСТИТЬ ВТ_НеПрочитанныеСообщения
	             	  |ИЗ
	             	  |	ВТ КАК ВТ
	             	  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сообщения КАК Сообщения
	             	  |		ПО ВТ.Пользователь = Сообщения.Пользователь
	             	  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сообщения.ПриоритетыКаналовИнформирования КАК СообщенияПриоритетыКаналовИнформирования
	             	  |		ПО (Сообщения.Ссылка = СообщенияПриоритетыКаналовИнформирования.Ссылка)
	             	  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСообщений.СрезПоследних КАК ИсторияСообщенийСрезПоследних
	             	  |		ПО (Сообщения.Ссылка = ИсторияСообщенийСрезПоследних.Сообщение)
	             	  |ГДЕ
	             	  |	СообщенияПриоритетыКаналовИнформирования.Канал = &КаналИнформирования
	             	  |	И ЕСТЬNULL(ИсторияСообщенийСрезПоследних.СтатусСообщения, ЗНАЧЕНИЕ(Перечисление.СтатусыСообщений.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.СтатусыСообщений.Прочитано)
	             	  |
	             	  |СГРУППИРОВАТЬ ПО
	             	  |	ВТ.Пользователь
	             	  |;
	             	  |
	             	  |////////////////////////////////////////////////////////////////////////////////
	             	  |ВЫБРАТЬ
	             	  |	ВТ.Сообщение КАК Сообщение,
	             	  |	ВТ.Заголовок КАК Заголовок,
	             	  |	ВТ.Текст КАК Текст,
	             	  |	ВТ.Действие КАК Действие,
	             	  |	ВТ.ОбъектИД КАК ОбъектИД,
	             	  |	ВТ.ОбъектТип КАК ОбъектТип,
	             	  |	ВТ.УзелСообщенияКОтправке КАК УзелСообщенияКОтправке,
	             	  |	ВТ.Сеть КАК Сеть,
	             	  |	ВТ.ВидПриложения КАК ВидПриложения,
	             	  |	ВТ.ОперационнаяСистема КАК ОперационнаяСистема,
	             	  |	ВТ.ТипПодписчика КАК ТипПодписчика,
	             	  |	ЕСТЬNULL(ЗарегистрированныеУстройства.ТокенУстройства, """") КАК ТокенУстройства,
	             	  |	ВТ.Токен КАК Токен,
	             	  |	ВТ.Пользователь КАК Пользователь,
	             	  |	&КаналИнформирования КАК КаналИнформирования
	             	  |ПОМЕСТИТЬ ВТ_Устройства
	             	  |ИЗ
	             	  |	ВТ КАК ВТ
	             	  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗарегистрированныеУстройства КАК ЗарегистрированныеУстройства
	             	  |		ПО ВТ.Токен = ЗарегистрированныеУстройства.Токен
	             	  |;
	             	  |
	             	  |////////////////////////////////////////////////////////////////////////////////
	             	  |ВЫБРАТЬ
	             	  |	ВТ_Устройства.Сообщение КАК Сообщение,
	             	  |	ВТ_Устройства.Заголовок КАК Заголовок,
	             	  |	ВТ_Устройства.Текст КАК Текст,
	             	  |	ВТ_Устройства.Действие КАК Действие,
	             	  |	ВТ_Устройства.ОбъектИД КАК ОбъектИД,
	             	  |	ВТ_Устройства.ОбъектТип КАК ОбъектТип,
	             	  |	ВТ_Устройства.УзелСообщенияКОтправке КАК УзелСообщенияКОтправке,
	             	  |	ВТ_Устройства.ОперационнаяСистема КАК ОперационнаяСистема,
	             	  |	ВТ_Устройства.ТипПодписчика КАК ТипПодписчика,
	             	  |	ВТ_Устройства.ТокенУстройства КАК ТокенУстройства,
	             	  |	ВТ_Устройства.Токен КАК Токен,
	             	  |	ВТ_Устройства.КаналИнформирования КАК КаналИнформирования,
	             	  |	ЕСТЬNULL(СертификатПриложенияДляСети.Сертификат, СертификатПриложенияОбщий.Сертификат) КАК Сертификат,
	             	  |	ЕСТЬNULL(НеПрочитанныеСообщения.Количество, 0) КАК Наклейка
	             	  |ИЗ
	             	  |	ВТ_Устройства КАК ВТ_Устройства
	             	  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СертификатыПриложений КАК СертификатПриложенияДляСети
	             	  |		ПО ВТ_Устройства.Сеть = СертификатПриложенияДляСети.Сеть
	             	  |			И ВТ_Устройства.ВидПриложения = СертификатПриложенияДляСети.ВидПриложения
	             	  |			И ВТ_Устройства.ОперационнаяСистема = СертификатПриложенияДляСети.ОперационнаяСистема
	             	  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СертификатыПриложений КАК СертификатПриложенияОбщий
	             	  |		ПО (СертификатПриложенияОбщий.Сеть = ЗНАЧЕНИЕ(Справочник.Сети.ПустаяСсылка))
	             	  |			И ВТ_Устройства.ВидПриложения = СертификатПриложенияОбщий.ВидПриложения
	             	  |			И ВТ_Устройства.ОперационнаяСистема = СертификатПриложенияОбщий.ОперационнаяСистема
	             	  |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НеПрочитанныеСообщения КАК НеПрочитанныеСообщения
	             	  |		ПО ВТ_Устройства.Пользователь = НеПрочитанныеСообщения.Пользователь";
	
	пЗапрос.УстановитьПараметр("УзелСообщенияКОтправке", УзелСообщенияКОтправке);	
	пЗапрос.УстановитьПараметр("Холдинг", Холдинг);
	пЗапрос.УстановитьПараметр("КаналИнформирования", КаналИнформирования);
	
	Если КаналИнформирования = Перечисления.КаналыИнформирования.pushEmployee Тогда 
		пЗапрос.УстановитьПараметр("ВидПриложения", Перечисления.ВидыПриложений.Employee);
	ИначеЕсли КаналИнформирования = Перечисления.КаналыИнформирования.pushCustomer Тогда 
		пЗапрос.УстановитьПараметр("ВидПриложения", Перечисления.ВидыПриложений.Customer);
	КонецЕсли;
	
	Выборка	= пЗапрос.Выполнить().Выбрать();	
	
	Пока Выборка.Следующий() Цикл		
		Если Выборка.ТокенУстройства = "" Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(Выборка.УзелСообщенияКОтправке, Выборка.Сообщение);
			ИспользоватьСледующийКаналИнформирования(Выборка.Сообщение, Выборка.КаналИнформирования);
			ДобавитьИсторию(Выборка.Сообщение, Выборка.КаналИнформирования, Перечисления.СтатусыСообщений.НеОтправлено, "", УниверсальноеВремя(ТекущаяДата()), Выборка.Токен);
		Иначе
			РаботаССообщениями.ОтправитьPush(Выборка);
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры