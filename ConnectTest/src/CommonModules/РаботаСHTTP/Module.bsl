Функция ТелоHTTPЗапросаВСтруктуру(ТелоЗапроса) Экспорт
	ЧтениеJSON = Новый ЧтениеJSON;
	Если СтрДлина(СокрЛП(ТелоЗапроса)) = 0 Тогда
		ДанныеЗапроса = Новый Структура;
	Иначе
		ЧтениеJSON.УстановитьСтроку(ТелоЗапроса);
		ДанныеЗапроса = ПрочитатьJSON(ЧтениеJSON);
	КонецЕсли;
	ЧтениеJSON.Закрыть();
	Возврат ДанныеЗапроса;
КонецФункции

Функция ПараметрыHTTPЗапросаВСтруктуру(Запрос) Экспорт
	ТелоЗапроса = Запрос.ПолучитьТелоКакСтроку();
	ДанныеЗапроса = РаботаСHTTP.ТелоHTTPЗапросаВСтруктуру(ТелоЗапроса);
	Возврат Новый Структура("ДанныеЗапроса, ТелоЗапроса", ДанныеЗапроса, ТелоЗапроса);
КонецФункции

Функция СтруктуруВПараметрыHTTPЗапроса(СтруктураJSON) Экспорт
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, СтруктураJSON);
	Возврат ЗаписьJSON.Закрыть();
КонецФункции

Функция ПодготовитьТелоHTTPЗапроса(Знач Токен, Знач ДанныеЗапроса,
		Знач Пользователь, Знач ЯзыкПриложения, Знач ЧасовойПояс,
		Знач ВидПриложения) Экспорт

	Если ТипЗнч(ДанныеЗапроса) = Тип("Структура") Тогда
		СтруктураJSON = ДанныеЗапроса;
	Иначе
		СтруктураJSON = Новый Структура;
		СтруктураJSON.Вставить("array", ДанныеЗапроса);
	КонецЕсли;

	СтруктураJSON.Вставить("token", Токен);
	СтруктураJSON.Вставить("language", ЯзыкПриложения);
	СтруктураJSON.Вставить("userId", XMLСтрока(Пользователь));
	СтруктураJSON.Вставить("currentTime", МестноеВремя(УниверсальноеВремя(ТекущаяДата()), ЧасовойПояс));
	Если ВидПриложения = Перечисления.ВидыПриложений.Customer Тогда
		СтруктураJSON.Вставить("appType", "Customer");
	ИначеЕсли ВидПриложения = Перечисления.ВидыПриложений.Employee Тогда
		СтруктураJSON.Вставить("appType", "Employee");
	ИначеЕсли ВидПриложения = Перечисления.ВидыПриложений.Web Тогда
		СтруктураJSON.Вставить("appType", "Web");
	Иначе
		СтруктураJSON.Вставить("appType", СокрЛП(ВидПриложения));
	КонецЕсли;

	Возврат РаботаСHTTP.СтруктуруВПараметрыHTTPЗапроса(СтруктураJSON);

КонецФункции

Функция СформироватьСтруктуруОтвета(ТелоОтвета = "", ТелоЗапроса = "",
		ОписаниеОшибки = "", Токен = "") Экспорт
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("ТелоЗапроса", ТелоЗапроса);
	СтруктураОтвета.Вставить("ТелоОтвета", ТелоОтвета);
	СтруктураОтвета.Вставить("ОписаниеОшибки", ОписаниеОшибки);
	СтруктураОтвета.Вставить("Токен", Токен);
	Возврат СтруктураОтвета;
КонецФункции

Функция РезультаВыполненияФЗ(МассивФЗ) Экспорт

	СтруктураОтвета = Новый Структура;
	JSONСтрока = "";

	Для Каждого СтруктураФЗ Из МассивФЗ Цикл

		Если СтруктураФЗ.ФЗ.Состояние = СостояниеФоновогоЗадания.Активно Тогда
			ФЗ = СтруктураФЗ.ФЗ.ОжидатьЗавершенияВыполнения(25);
			Если ФЗ.Состояние <> СостояниеФоновогоЗадания.Активно Тогда
				JSONСтрока = ПолучитьИзВременногоХранилища(СтруктураФЗ.Адрес);
				ЧтениеJSON = Новый ЧтениеJSON;
				ЧтениеJSON.УстановитьСтроку(JSONСтрока);
				СтруктураОтвета.Вставить(СтруктураФЗ.Атрибут, ПрочитатьJSON(ЧтениеJSON));
				ЧтениеJSON.Закрыть();
			КонецЕсли;
		Иначе
			JSONСтрока = ПолучитьИзВременногоХранилища(СтруктураФЗ.Адрес);
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(JSONСтрока);
			СтруктураОтвета.Вставить(СтруктураФЗ.Атрибут, ПрочитатьJSON(ЧтениеJSON));
			ЧтениеJSON.Закрыть();
		КонецЕсли;

	КонецЦикла;

	Если СтруктураОтвета.Количество() > 0 Тогда
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
		JSONСтрока = ЗаписьJSON.Закрыть();
	КонецЕсли;

	Возврат JSONСтрока;

КонецФункции

Функция ВыполнитьЗапросВФоне(Выборка, Заголовки, ТелоЗапроса, Адрес,
		ПараметрыЗапросаИзURL) Экспорт
	ПередаваемыеПараметры = Новый Массив;
	ПередаваемыеПараметры.Добавить(Выборка);
	ПередаваемыеПараметры.Добавить(Заголовки);
	ПередаваемыеПараметры.Добавить(ТелоЗапроса);
	ПередаваемыеПараметры.Добавить(Адрес);
	ПередаваемыеПараметры.Добавить(ПараметрыЗапросаИзURL);
	Возврат ФоновыеЗадания.Выполнить("РаботаСHTTP.ВыполнитьЗапросВУчетнойСистеме", ПередаваемыеПараметры, Новый УникальныйИдентификатор);
КонецФункции

Функция СтруктураВнешнегоHTTPЗапроса(ЗапросИсточник, Холдинг) Экспорт

	СтруктураЗапроса = Новый Структура;

	пЗапрос = Новый Запрос;
	пЗапрос.Текст = "ВЫБРАТЬ
		|	ПодключенияХолдинговКИсточникамИнформации.Холдинг КАК Холдинг,
		|	ПодключенияХолдинговКИсточникамИнформации.ИсточникИнформации КАК ИсточникИнформации,
		|	ПодключенияХолдинговКИсточникамИнформации.Сервер КАК Сервер,
		|	ПодключенияХолдинговКИсточникамИнформации.Порт КАК Порт,
		|	ПодключенияХолдинговКИсточникамИнформации.Пользователь КАК Пользователь,
		|	ПодключенияХолдинговКИсточникамИнформации.Пароль КАК Пароль,
		|	ПодключенияХолдинговКИсточникамИнформации.URL КАК URL,
		|	ПодключенияХолдинговКИсточникамИнформации.Таймаут КАК Таймаут,
		|	ПодключенияХолдинговКИсточникамИнформации.ЗащищенноеСоединение КАК ЗащищенноеСоединение,
		|	ПодключенияХолдинговКИсточникамИнформации.ИспользоватьАутентификациюОС КАК ИспользоватьАутентификациюОС
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	РегистрСведений.ПодключенияХолдинговКИсточникамИнформации КАК ПодключенияХолдинговКИсточникамИнформации
		|ГДЕ
		|	ПодключенияХолдинговКИсточникамИнформации.Холдинг = &Холдинг
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.Сервер КАК Сервер,
		|	ВТ.Порт КАК Порт,
		|	ВТ.Пользователь КАК УчетнаяЗапись,
		|	ВТ.Пароль КАК Пароль,
		|	ВТ.Таймаут КАК Таймаут,
		|	ВТ.ЗащищенноеСоединение КАК ЗащищенноеСоединение,
		|	ВТ.ИспользоватьАутентификациюОС КАК ИспользоватьАутентификациюОС,
		|	ВТ.URL КАК URL,
		|	ИсточникиИнформации.ЗапросПриемник КАК Приемник
		|ИЗ
		|	Справочник.СоответствиеЗапросовИсточникамИнформации.ИсточникиИнформации КАК ИсточникиИнформации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ КАК ВТ
		|		ПО ИсточникиИнформации.ИсточникИнформации = ВТ.ИсточникИнформации
		|ГДЕ
		|	ИсточникиИнформации.ЗапросИсточник = &ЗапросИсточник";

	пЗапрос.УстановитьПараметр("Холдинг", Холдинг);
	пЗапрос.УстановитьПараметр("ЗапросИсточник", ЗапросИсточник);

	РезультатЗапроса = пЗапрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		СтруктураЗапроса.Вставить("Сервер", Выборка.Сервер);
		СтруктураЗапроса.Вставить("Порт", Выборка.Порт);
		СтруктураЗапроса.Вставить("УчетнаяЗапись", Выборка.УчетнаяЗапись);
		СтруктураЗапроса.Вставить("Пароль", Выборка.Пароль);
		СтруктураЗапроса.Вставить("Таймаут", Выборка.Таймаут);
		СтруктураЗапроса.Вставить("ЗащищенноеСоединение", Выборка.ЗащищенноеСоединение);
		СтруктураЗапроса.Вставить("ИспользоватьАутентификациюОС", Выборка.ИспользоватьАутентификациюОС);
		СтруктураЗапроса.Вставить("URL", Выборка.URL);
		СтруктураЗапроса.Вставить("Приемник", Выборка.Приемник);
	КонецЕсли;

	Возврат СтруктураЗапроса;

КонецФункции

Процедура ДобавитьСтрокуВТаблицуАтрибутов(ТаблицаАтрибутов, Ключ, Значение,
		Тип)
	НоваяСтрока = ТаблицаАтрибутов.Добавить();
	НоваяСтрока.Ключ = Ключ;
	НоваяСтрока.Значение = Значение;
	НоваяСтрока.Тип = Тип;
КонецПроцедуры

Функция СтруктураАтрибутовВнешнегоЗапроса(ИмяЗапроса) Экспорт

	ТаблицаАтрибутов = Новый ТаблицаЗначений;
	ТаблицаАтрибутов.Колонки.Добавить("Ключ");
	ТаблицаАтрибутов.Колонки.Добавить("Значение");
	ТаблицаАтрибутов.Колонки.Добавить("Тип");

	ТаблицаАтрибутовДляНовогоЭлемента = Новый ТаблицаЗначений;
	ТаблицаАтрибутовДляНовогоЭлемента.Колонки.Добавить("Ключ");
	ТаблицаАтрибутовДляНовогоЭлемента.Колонки.Добавить("Значение");
	ТаблицаАтрибутовДляНовогоЭлемента.Колонки.Добавить("Тип");

	СтруктураМД = Новый Структура;
	ИмяОбъектаМетаданных = "";

	Если ИмяЗапроса = "users" Тогда

		ИмяОбъектаМетаданных = "Пользователи";

		ДобавитьСтрокуВТаблицуАтрибутов(ТаблицаАтрибутов, "Email", "email", "Строка");
		ДобавитьСтрокуВТаблицуАтрибутов(ТаблицаАтрибутов, "ДатаРождения", "birthdayDate", "Дата");
		ДобавитьСтрокуВТаблицуАтрибутов(ТаблицаАтрибутов, "Фамилия", "lastName", "Строка");
		ДобавитьСтрокуВТаблицуАтрибутов(ТаблицаАтрибутов, "Имя", "firstName", "Строка");
		ДобавитьСтрокуВТаблицуАтрибутов(ТаблицаАтрибутов, "Отчество", "secondName", "Строка");
		ДобавитьСтрокуВТаблицуАтрибутов(ТаблицаАтрибутов, "КодПользователя", "cid", "Строка");
		ДобавитьСтрокуВТаблицуАтрибутов(ТаблицаАтрибутов, "НомерТелефона", "phoneNumber", "Строка");
		ДобавитьСтрокуВТаблицуАтрибутов(ТаблицаАтрибутов, "Пол", "gender", "Строка");
		ДобавитьСтрокуВТаблицуАтрибутов(ТаблицаАтрибутов, "ТипПользователя", "userType", "Строка");
		ДобавитьСтрокуВТаблицуАтрибутов(ТаблицаАтрибутов, "Штрихкод", "barcode", "Строка");
		ДобавитьСтрокуВТаблицуАтрибутов(ТаблицаАтрибутов, "НеУчаствоватьВРассылкеEmail", "noSubscriptionEmail", "Булево");
		ДобавитьСтрокуВТаблицуАтрибутов(ТаблицаАтрибутов, "НеУчаствоватьВРассылкеСообщений", "noSubscriptionSms", "Булево");

		ДобавитьСтрокуВТаблицуАтрибутов(ТаблицаАтрибутовДляНовогоЭлемента, "Логин", "cid", "Строка");
		ДобавитьСтрокуВТаблицуАтрибутов(ТаблицаАтрибутовДляНовогоЭлемента, "Пароль", "password", "Строка");

	ИначеЕсли ИмяЗапроса = "gyms" Тогда

		ИмяОбъектаМетаданных = "Клубы";

		ДобавитьСтрокуВТаблицуАтрибутов(ТаблицаАтрибутов, "Наименование", "name", "Строка");
		ДобавитьСтрокуВТаблицуАтрибутов(ТаблицаАтрибутов, "Адрес", "gymAddress", "Строка");
		ДобавитьСтрокуВТаблицуАтрибутов(ТаблицаАтрибутов, "Сегмент", "division", "Строка");
		ДобавитьСтрокуВТаблицуАтрибутов(ТаблицаАтрибутов, "Широта", "latitude", "Число");
		ДобавитьСтрокуВТаблицуАтрибутов(ТаблицаАтрибутов, "Долгота", "longitude", "Число");
		ДобавитьСтрокуВТаблицуАтрибутов(ТаблицаАтрибутов, "Тип", "type", "Строка");
		ДобавитьСтрокуВТаблицуАтрибутов(ТаблицаАтрибутов, "ГрафикРаботыОтделов", "departments", "ТабличнаяЧасть");
		ДобавитьСтрокуВТаблицуАтрибутов(ТаблицаАтрибутов, "Город", "city", "Ссылка");

		ТаблицаАтрибутовТЧГрафикРаботыОтделов = Новый ТаблицаЗначений;
		ТаблицаАтрибутовТЧГрафикРаботыОтделов.Колонки.Добавить("Ключ");
		ТаблицаАтрибутовТЧГрафикРаботыОтделов.Колонки.Добавить("Значение");
		ТаблицаАтрибутовТЧГрафикРаботыОтделов.Колонки.Добавить("Тип");

		ДобавитьСтрокуВТаблицуАтрибутов(ТаблицаАтрибутовТЧГрафикРаботыОтделов, "Отдел", "name", "Строка");
		ДобавитьСтрокуВТаблицуАтрибутов(ТаблицаАтрибутовТЧГрафикРаботыОтделов, "Телефон", "phone", "Строка");
		ДобавитьСтрокуВТаблицуАтрибутов(ТаблицаАтрибутовТЧГрафикРаботыОтделов, "ГрафикРаботыВБудни", "weekdaysTime", "Строка");
		ДобавитьСтрокуВТаблицуАтрибутов(ТаблицаАтрибутовТЧГрафикРаботыОтделов, "ГрафикРаботыВВыходные", "holidaysTime", "Строка");

		СтруктураГород = Новый Структура;
		СтруктураГород.Вставить("Города", "id");

		СтруктураМД.Вставить("ГрафикРаботыОтделов", ТаблицаАтрибутовТЧГрафикРаботыОтделов);
		СтруктураМД.Вставить("Город", СтруктураГород);

	ИначеЕсли ИмяЗапроса = "cities" Тогда

		ИмяОбъектаМетаданных = "Города";
		ДобавитьСтрокуВТаблицуАтрибутов(ТаблицаАтрибутов, "Наименование", "name", "Строка");

	ИначеЕсли ИмяЗапроса = "cancelcauses" Тогда

		ИмяОбъектаМетаданных = "ПричиныОтменыЗаписи";
		ДобавитьСтрокуВТаблицуАтрибутов(ТаблицаАтрибутов, "Наименование", "name", "Строка");

	ИначеЕсли ИмяЗапроса = "request" Тогда

		ИмяОбъектаМетаданных = "СоответствиеЗапросовИсточникамИнформации";

		ДобавитьСтрокуВТаблицуАтрибутов(ТаблицаАтрибутов, "Код", "code", "Строка");
		ДобавитьСтрокуВТаблицуАтрибутов(ТаблицаАтрибутов, "ВыполнятьВФоне", "background", "Булево");
		ДобавитьСтрокуВТаблицуАтрибутов(ТаблицаАтрибутов, "НеСохранятьОтветВЛогах", "notSaveLogs", "Булево");
		ДобавитьСтрокуВТаблицуАтрибутов(ТаблицаАтрибутов, "СжиматьЛоги", "compressLogs", "Булево");
		ДобавитьСтрокуВТаблицуАтрибутов(ТаблицаАтрибутов, "ТолькоДляСотрудников", "staffOnly", "Булево");

		ДобавитьСтрокуВТаблицуАтрибутов(ТаблицаАтрибутов, "ИсточникиИнформации", "informationSources", "ТабличнаяЧасть");

		ТаблицаАтрибутовТЧИсточникиИнформации = Новый ТаблицаЗначений;
		ТаблицаАтрибутовТЧИсточникиИнформации.Колонки.Добавить("Ключ");
		ТаблицаАтрибутовТЧИсточникиИнформации.Колонки.Добавить("Значение");
		ТаблицаАтрибутовТЧИсточникиИнформации.Колонки.Добавить("Тип");

		ДобавитьСтрокуВТаблицуАтрибутов(ТаблицаАтрибутовТЧИсточникиИнформации, "Атрибут", "atribute", "Строка");
		ДобавитьСтрокуВТаблицуАтрибутов(ТаблицаАтрибутовТЧИсточникиИнформации, "ВыполнятьВФоне", "background", "Булево");
		ДобавитьСтрокуВТаблицуАтрибутов(ТаблицаАтрибутовТЧИсточникиИнформации, "НеСохранятьОтветВЛогах", "notSaveLogs", "Булево");
		ДобавитьСтрокуВТаблицуАтрибутов(ТаблицаАтрибутовТЧИсточникиИнформации, "СжиматьЛоги", "compressLogs", "Булево");
		ДобавитьСтрокуВТаблицуАтрибутов(ТаблицаАтрибутовТЧИсточникиИнформации, "ТолькоДляСотрудников", "staffOnly", "Булево");
		ДобавитьСтрокуВТаблицуАтрибутов(ТаблицаАтрибутовТЧИсточникиИнформации, "НеИспользовать", "notUse", "Булево");
		ДобавитьСтрокуВТаблицуАтрибутов(ТаблицаАтрибутовТЧИсточникиИнформации, "ЗапросИсточник", "requestSource", "Строка");
		ДобавитьСтрокуВТаблицуАтрибутов(ТаблицаАтрибутовТЧИсточникиИнформации, "ЗапросПриемник", "requestReceiver", "Строка");
		ДобавитьСтрокуВТаблицуАтрибутов(ТаблицаАтрибутовТЧИсточникиИнформации, "ИсточникИнформации", "informationSource", "Ссылка");

		СтруктураИсточникИнформации = Новый Структура;
		СтруктураИсточникИнформации.Вставить("ИсточникиИнформации", "uid");

		СтруктураМД.Вставить("ИсточникиИнформации", ТаблицаАтрибутовТЧИсточникиИнформации);
		СтруктураМД.Вставить("ИсточникИнформации", СтруктураИсточникИнформации);

	КонецЕсли;

	Возврат Новый Структура("ИмяОбъектаМетаданных, ТаблицаАтрибутов, ТаблицаАтрибутовДляНовогоЭлемента, СтруктураМД", ИмяОбъектаМетаданных, ТаблицаАтрибутов, ТаблицаАтрибутовДляНовогоЭлемента, СтруктураМД);

КонецФункции

Процедура ВыполнитьЗапросВУчетнойСистеме(Выборка, Заголовки, ТелоЗапроса,
		Адрес, ПараметрыЗапросаИзURL) Экспорт
	HTTPСоединение = Новый HTTPСоединение(Выборка.Сервер, , Выборка.УчетнаяЗапись, Выборка.Пароль, , Выборка.Таймаут, ?(Выборка.ЗащищенноеСоединение, Новый ЗащищенноеСоединениеOpenSSL(), Неопределено), Выборка.ИспользоватьАутентификациюОС);
	ЗапросHTTP = Новый HTTPЗапрос(Выборка.URL + Выборка.Приемник
		+ ПараметрыЗапросаИзURL, Заголовки);
	ЗапросHTTP.УстановитьТелоИзСтроки(ТелоЗапроса);
	Если Выборка.ТипЗапроса = Перечисления.ТипыHTTPЗапросов.GET Тогда
		ОтветHTTP = HTTPСоединение.Получить(ЗапросHTTP);
	Иначе
		ОтветHTTP = HTTPСоединение.ОтправитьДляОбработки(ЗапросHTTP);
	КонецЕсли;
	JSONСтрока = ОтветHTTP.ПолучитьТелоКакСтроку();
	ПоместитьВоВременноеХранилище(JSONСтрока, Адрес);
КонецПроцедуры

