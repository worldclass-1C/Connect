
Функция ОпределитьДоступныеПроекты() Экспорт
	
	пЗапрос	= Новый Запрос;
	пЗапрос.Текст	= "ВЫБРАТЬ
	             	  |	ПроектыУчастники.Ссылка КАК Проект
	             	  |ИЗ
	             	  |	Справочник.Проекты.Участники КАК ПроектыУчастники
	             	  |ГДЕ
	             	  |	ПроектыУчастники.Участник = &Участник
	             	  |
	             	  |СГРУППИРОВАТЬ ПО
	             	  |	ПроектыУчастники.Ссылка";
	
	пЗапрос.УстановитьПараметр("Участник", ПараметрыСеанса.ТекущийПользователь);				  
	
	Массив	= пЗапрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Проект");
	
	Если Не ПараметрыСеанса.ТекущийПользователь.Аутсорсинг Тогда
		Массив.Добавить(Справочники.Проекты.ПустаяСсылка());
	КонецЕсли;
	
	Возврат Массив;	
	
КонецФункции

Функция ОпределитьДоступныеИнформационныеСистемы() Экспорт
	
	пЗапрос	= Новый Запрос;
	пЗапрос.Текст	= "ВЫБРАТЬ
	             	  |	ПраваДоступаКИнформационнымСистемам.ИнформационнаяСистема
	             	  |ИЗ
	             	  |	РегистрСведений.ПраваДоступаКИнформационнымСистемам КАК ПраваДоступаКИнформационнымСистемам
	             	  |ГДЕ
	             	  |	ПраваДоступаКИнформационнымСистемам.Пользователь = &Пользователь
	             	  |
	             	  |СГРУППИРОВАТЬ ПО
	             	  |	ПраваДоступаКИнформационнымСистемам.ИнформационнаяСистема";
	
	пЗапрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);				  
	
	Массив	= пЗапрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИнформационнаяСистема");
	
	Если Не ПараметрыСеанса.ТекущийПользователь.Аутсорсинг И Не РольДоступна("Пользователь") Тогда
		Массив.Добавить(Справочники.БазыДанных.ПустаяСсылка());
	КонецЕсли;
	
	Возврат Массив;
	
КонецФункции

// Процедура, определяет пользователя, под которым запущен сеанс и пытается
// найти соответсвие ему в справочнике Пользователи. Если соответствие
// не найдено - создается новый элемент. Параметр сеанса ТекущийПользователь
// устанавливается как ссылка на найденный (созданный) элемент справочника.
//
Процедура ОпределитьТекущегоПользователя(Знач ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если ИмяПараметра <> "ТекущийПользователь" Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьПользователя = Ложь;
	
	Если ПользователиИнформационнойБазы.ПолучитьПользователей().Количество() = 0 Тогда
		ИмяПользователя			= "<Не указан>";
		ПолноеИмяПользователя	= "<Не указан>";
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Пользователи.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.Код = &Имя";
		
		Запрос.Параметры.Вставить("Имя", ИмяПользователя);
		
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			СоздатьПользователя = Истина;
			ИдентификаторПользователяИБ = Новый УникальныйИдентификатор;
		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ПараметрыСеанса.ТекущийПользователь = Выборка.Ссылка;
		КонецЕсли;
	Иначе
		ИдентификаторПользователяИБ = ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Пользователи.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.ИдентификаторПользователяИБ = &ИдентификаторПользователяИБ";
		
		Запрос.Параметры.Вставить("ИдентификаторПользователяИБ ", ИдентификаторПользователяИБ);
		
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			ПользовательПоКоду = ПроверитьПользователяПоКоду(ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
			Если ПользовательПоКоду <> Неопределено Тогда
				ПараметрыСеанса.ТекущийПользователь = ПользовательПоКоду;
				ПользовательОбъект = ПользовательПоКоду.ПолучитьОбъект();
				ПользовательОбъект.ИдентификаторПользователяИБ = ИдентификаторПользователяИБ;
				ПользовательОбъект.Записать();
			Иначе
				СоздатьПользователя = Истина;
				ИмяПользователя			= ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
				ПолноеИмяПользователя	= ПользователиИнформационнойБазы.ТекущийПользователь().ПолноеИмя;
			КонецЕсли;
		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ПараметрыСеанса.ТекущийПользователь = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Если СоздатьПользователя Тогда
		СсылкаНового = Справочники.Пользователи.ПолучитьСсылку();
		ПараметрыСеанса.ТекущийПользователь = СсылкаНового;
		
		НовыйПользователь = Справочники.Пользователи.СоздатьЭлемент();
		НовыйПользователь.Код			= ИмяПользователя;
		НовыйПользователь.Наименование	= ПолноеИмяПользователя;
		НовыйПользователь.ИдентификаторПользователяИБ = ИдентификаторПользователяИБ;
		НовыйПользователь.УстановитьСсылкуНового(СсылкаНового);
		
		Попытка
			НовыйПользователь.Записать();
		Исключение
			ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru = 'Пользователь: %1 не был найден в справочнике пользователей. Возникла ошибка при добавлении пользователя в справочник.
													|%2'"),
													ИмяПользователя, ОписаниеОшибки() );
			ВызватьИсключение ТекстСообщенияОбОшибке;
		КонецПопытки;
				
		
	КонецЕсли;
	
	УстановленныеПараметры.Вставить(ИмяПараметра);
	
КонецПроцедуры

Функция ОпределитьНачалоСеансаПользователя() Экспорт	
	Возврат ТекущаяДатаСеанса();		
КонецФункции

Функция ПроверитьПользователяПоКоду(ИмяПользователя)
	
	Если НЕ ПроверитьНеоднозначностьИмениПользователя(ИмяПользователя) Тогда
		ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'В информационной базе уже существует пользователь с таким именем: %1 (совпадают первые %2 символов)'"),
								ИмяПользователя,
								Метаданные.Справочники.Пользователи.ДлинаКода);
		ВызватьИсключение ТекстСообщенияОбОшибке;
	КонецЕсли;
	
	ДопустимаяДлинаИмени = Метаданные.Справочники.Пользователи.ДлинаКода;
	
	Если СтрДлина(ИмяПользователя) > ДопустимаяДлинаИмени Тогда
		ИмяПользователя = Лев(ИмяПользователя, ДопустимаяДлинаИмени);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Пользователи.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Код = &ИмяПользователя";
	
	Запрос.Параметры.Вставить("ИмяПользователя", ИмяПользователя);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Пользователь = Выборка.Ссылка;
		Если ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
					Пользователь.ИдентификаторПользователяИБ) = Неопределено Тогда
			Возврат Пользователь;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ПроверитьНеоднозначностьИмениПользователя(знач ИмяПользователя)
	
	ТаблицаПользователей = Новый ТаблицаЗначений;
	ТаблицаПользователей.Колонки.Добавить("Имя");
	
	Для Каждого ПользовательИБ Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
		НоваяСтрока = ТаблицаПользователей.Добавить();
		НоваяСтрока.Имя = Лев(ПользовательИБ.Имя, Метаданные.Справочники.Пользователи.ДлинаКода);
	КонецЦикла;
	
	КоличествоСтрокДо = ТаблицаПользователей.Количество();
	
	ТаблицаПользователей.Свернуть("Имя");
	
	Если КоличествоСтрокДо = 0 ИЛИ КоличествоСтрокДо = ТаблицаПользователей.Количество() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Функция проверяет существования пользователя информационной базы
// Параметры
// ЗначениеПоиска - уникальный идентификатор, строка - УИД пользователя ИБ
//												или имя пользователя ИБ
// 
// Возвращаемое значение:
// Истина	- пользователь существует
// Ложь		- пользователь не существует
//
Функция ПользовательСуществует(знач ЗначениеПоиска) Экспорт
	
	Если ТипЗнч(ЗначениеПоиска) = Тип("УникальныйИдентификатор") Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ЗначениеПоиска);
	Иначе
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ЗначениеПоиска);
	КонецЕсли;
	
	Если ПользовательИБ = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция РассинхронизацияИмениПользователя(Ссылка) Экспорт
	
	ИмяПользователя = СокрЛП(Ссылка.Код);
	ПолноеИмяПользователя = СокрЛП(Ссылка.Наименование);
	
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Ссылка.ИдентификаторПользователяИБ);
	
	Если ПользовательИБ = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПользовательИБ.Имя <> ИмяПользователя
		ИЛИ СокрЛП(ПолноеИмяПользователя) <> СокрЛП(ПользовательИБ.ПолноеИмя) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Проверяет, является ли текущий или указанный пользователь полноправным.
// 
// Полноправным считается пользователь, который
// а) при не пустом списке пользователей информационной базы, 
//    имеет роль ПолныеПрава и роль для администрирования системы (если ПроверятьПраваАдминистрированияСистемы = Истина)
// б) при пустом списке пользователей информационной базы
//    основная роль конфигурации не задана или ПолныеПрава.
//
// Параметры:
//  Пользователь - Неопределено - проверяется текущий пользователь ИБ.
//               - СправочникСсылка.Пользователи, СправочникСсылка.ВнешниеПользователи - осуществляется
//                    поиск пользователя ИБ по уникальному идентификатору, заданному в реквизите
//                    ИдентификаторПользователяИБ. Если пользователь ИБ не найден, возвращается Ложь.
//               - ПользовательИнформационнойБазы - проверяется указанный пользователь ИБ.
//
//  ПроверятьПраваАдминистрированияСистемы - Булево - если задано Истина, тогда проверяется наличие
//                 роли для администрирования системы
//
//  УчитыватьПривилегированныйРежим - Булево - если задано Истина, тогда для текущего пользователя
//                 функция возвращает Истина, когда установлен привилегированный режим.
//
// Возвращаемое значение:
//  Булево - если Истина, пользователь является полноправным.
//
Функция ЭтоПолноправныйПользователь(Пользователь = Неопределено,
                                    ПроверятьПраваАдминистрированияСистемы = Ложь,
                                    УчитыватьПривилегированныйРежим = Истина) Экспорт
	
	ПривилегированныйРежимУстановлен = ПривилегированныйРежим();
	
	УстановитьПривилегированныйРежим(Истина);
	Свойства = СвойстваПроверяемогоПользователяИБ(Пользователь);
	ПользовательИБ = Свойства.ПользовательИБ;
	
	ПроверитьРольПолныеПрава = Не ПроверятьПраваАдминистрированияСистемы;
	ПроверитьРольАдминистратораСистемы = ПроверятьПраваАдминистрированияСистемы;
	
	Если ПользовательИБ = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли НЕ Свойства.УказанТекущийПользовательИБ Тогда
		// Для не текущего пользователя ИБ проверяются роли в записанном пользователе ИБ.
		Если ПроверитьРольПолныеПрава
		   И НЕ ПользовательИБ.Роли.Содержит(Метаданные.Роли.ПолныеПрава) Тогда
			Возврат Ложь;
		КонецЕсли;
		Если ПроверитьРольАдминистратораСистемы
		   И НЕ ПользовательИБ.Роли.Содержит(РольАдминистратораСистемы(Истина)) Тогда
			Возврат Ложь;
		КонецЕсли;
		Возврат Истина;
	Иначе
		Если УчитыватьПривилегированныйРежим И ПривилегированныйРежимУстановлен Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если ОбщегоНазначенияСервер.ПривилегированныйРежимУстановленПриЗапуске() Тогда
			// Когда клиентское приложение запущено с параметром UsePrivilegedMode, тогда
			// пользователь является полноправным, если привилегированный режим установлен.
			Возврат Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПользовательИБ.Имя) И Метаданные.ОсновныеРоли.Количество() = 0 Тогда
			// Когда основные роли не указаны, тогда у неуказанного пользователя
			// есть все права (как в привилегированном режиме).
			Возврат Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПользовательИБ.Имя)
		   И ПривилегированныйРежимУстановлен
		   И ПравоДоступа("Администрирование", Метаданные, ПользовательИБ) Тогда
			// Когда у неуказанного пользователя есть право Администрирование,
			// тогда привилегированный режим учитывается всегда для поддержки
			// параметра запуска UsePrivilegedMode у не клиентских приложений.
			Возврат Истина;
		КонецЕсли;
		
		// Для текущего пользователя ИБ проверяются роли не в записанном пользователе ИБ,
		// а роли в текущем сеансе.
		Если ПроверитьРольПолныеПрава
		   И НЕ РольДоступна(Метаданные.Роли.ПолныеПрава) Тогда
			Возврат Ложь;
		КонецЕсли;
		Если ПроверитьРольАдминистратораСистемы
		   И НЕ РольДоступна(РольАдминистратораСистемы(Истина)) Тогда
			Возврат Ложь;
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Для функций ЭтоПолноправныйПользователь и РолиДоступны
Функция СвойстваПроверяемогоПользователяИБ(Пользователь)
	
	Свойства = Новый Структура;
	Свойства.Вставить("ТекущийПользовательИБ", ПользователиИнформационнойБазы.ТекущийПользователь());
	Свойства.Вставить("ПользовательИБ", Неопределено);
	
	Если ТипЗнч(Пользователь) = Тип("ПользовательИнформационнойБазы") Тогда
		Свойства.Вставить("ПользовательИБ", Пользователь);
		
	ИначеЕсли Пользователь = Неопределено ИЛИ Пользователь = ПараметрыСеанса.ТекущийПользователь Тогда
		Свойства.Вставить("ПользовательИБ", Свойства.ТекущийПользовательИБ);
	Иначе
		// Задан не текущий пользователь.
		Если ЗначениеЗаполнено(Пользователь) Тогда
			Свойства.Вставить("ПользовательИБ", ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
				ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Пользователь, "ИдентификаторПользователяИБ")));
		КонецЕсли;
	КонецЕсли;
	
	Если Свойства.ПользовательИБ <> Неопределено Тогда
		Свойства.Вставить("УказанТекущийПользовательИБ",
			Свойства.ПользовательИБ.УникальныйИдентификатор
				= Свойства.ТекущийПользовательИБ.УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат Свойства;
	
КонецФункции

// Возвращает свойства пользователя для пользователя ИБ с пустым именем.
Функция СвойстваНеуказанногоПользователя() Экспорт
		
	Свойства = Новый Структура;
	
	// Ссылка на найденный элемент справочника
	// соответствующий неуказанному пользователю.
	Свойства.Вставить("Ссылка", Неопределено);
	
	// Ссылка, используемая для поиска и создания
	// неуказанного пользователя в справочнике Пользователи.
	Свойства.Вставить("СтандартнаяСсылка", Справочники.Пользователи.ПолучитьСсылку(
		Новый УникальныйИдентификатор("aa00559e-ad84-4494-88fd-f0826edc46f0")));
	
	// Полное имя, которое устанавливается в элемент справочника Пользователи
	// при создании несуществующего неуказанного пользователя.
	Свойства.Вставить("ПолноеИмя", УправлениеПользователями.ПолноеИмяНеуказанногоПользователя());
	
	// Полное имя, которое используется для поиска неуказанного пользователя
	// старым способом, необходимым для поддержки старых версий
	// неуказанного пользователя. Это имя не требуется изменять.
	Свойства.Вставить("ПолноеИмяДляПоиска", НСтр("ru = '<Не указан>'"));
	
	// Поиск по уникальному идентификатору.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Свойства.СтандартнаяСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Ссылка = &Ссылка";
	
	НачатьТранзакцию();
	Попытка
		Если Запрос.Выполнить().Пустой() Тогда
			Запрос.УстановитьПараметр("ПолноеИмя", Свойства.ПолноеИмяДляПоиска);
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Пользователи.Ссылка
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|ГДЕ
			|	Пользователи.Наименование = &ПолноеИмя";
			Результат = Запрос.Выполнить();
			
			Если НЕ Результат.Пустой() Тогда
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				Свойства.Ссылка = Выборка.Ссылка;
			КонецЕсли;
		Иначе
			Свойства.Ссылка = Свойства.СтандартнаяСсылка;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Свойства;
	
КонецФункции

// Возвращает роль, предоставляющую права администрирования системы.
//
// Параметры:
//  ДляПроверки - Булево - вернуть роль для проверки, а не для установки.
//                 Для базовых версий роль для установки АдминистраторСистемы,
//                 а роль для проверки может быть ПолныеПрава с правом Администрирование.
//
// Возвращаемое значение:
//  ОбъектМетаданных - Роль.
//
Функция РольАдминистратораСистемы(ДляПроверки = Ложь) Экспорт
	
	РольАдминистратораСистемы = Метаданные.Роли.АдминистраторСистемы;
	
	Если ДляПроверки
	   И ПравоДоступа("Администрирование", Метаданные, Метаданные.Роли.ПолныеПрава) Тогда
	
		РольАдминистратораСистемы = Метаданные.Роли.ПолныеПрава;
	КонецЕсли;
	
	Возврат РольАдминистратораСистемы;
	
КонецФункции

Процедура ДобавитьЗадачуВУРВ(Заявка, Время, Исполнитель) Экспорт
	
	пЗапрос	= Новый Запрос;
	пЗапрос.Текст	= "ВЫБРАТЬ
	             	  |	ЕжедневныйОтчет.Ссылка
	             	  |ИЗ
	             	  |	Документ.ЕжедневныйОтчет КАК ЕжедневныйОтчет
	             	  |ГДЕ
	             	  |	ЕжедневныйОтчет.Исполнитель = &Исполнитель
	             	  |	И ЕжедневныйОтчет.Проведен
	             	  |	И ЕжедневныйОтчет.ОтчетнаяДата = &ОтчетнаяДата";
	
	пЗапрос.УстановитьПараметр("Исполнитель", Исполнитель);	
	пЗапрос.УстановитьПараметр("ОтчетнаяДата", НачалоДня(ТекущаяДатаСеанса()));
	
	РезультатЗапроса	= пЗапрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		ЕжедневныйОтчет	= Документы.ЕжедневныйОтчет.СоздатьДокумент();
		ЕжедневныйОтчет.Дата			= ТекущаяДатаСеанса();
		ЕжедневныйОтчет.ОтчетнаяДата	= ТекущаяДатаСеанса();
		ЕжедневныйОтчет.Исполнитель		= Исполнитель;	
				
	Иначе
		
		Выборка	= РезультатЗапроса.Выбрать();
		Выборка.Следующий();		
		ЕжедневныйОтчет	= Выборка.Ссылка.ПолучитьОбъект();		
	
	КонецЕсли;
	
	СтрокаТЧ	= ЕжедневныйОтчет.ИспользованиеВремени.Добавить();
		
	СтрокаТЧ.Длительность		= Время;
	СтрокаТЧ.Заявка				= Заявка;
	
	ЕжедневныйОтчет.ЗатратыВремени	= ЕжедневныйОтчет.ЗатратыВремени + (СтрокаТЧ.Длительность - НачалоДня(СтрокаТЧ.Длительность));
	
	ЕжедневныйОтчет.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
	
КонецПроцедуры