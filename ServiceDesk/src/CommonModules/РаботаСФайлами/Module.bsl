////////////////////////////////////////////////////////////////////////////////
// МОДУЛЬ СОДЕРЖИТ РЕАЛИЗАЦИЮ МЕХАНИКИ РАБОТЫ С ФАЙЛАМИ
// 

// Освобождает файл
// Параметры:
// ДанныеФайла - структура, содержащая сведения о Файле
// 	см. функцию ПолучитьДанныеФайла()
Процедура ОсвободитьФайл(ДанныеФайла) Экспорт
	
	ФайлОбъект = ДанныеФайла.Ссылка.ПолучитьОбъект();
	ФайлОбъект.Редактирует = Справочники.Пользователи.ПустаяСсылка();
	ФайлОбъект.Записать();
	
КонецПроцедуры	

// Занимает файл на редактирование (checkout)
Процедура ЗанятьФайл(ДанныеФайла) Экспорт

	ФайлОбъект = ДанныеФайла.Ссылка.ПолучитьОбъект();
	ФайлОбъект.Редактирует = ПараметрыСеанса.ТекущийПользователь;
	ФайлОбъект.Записать();
	
	ДанныеФайла = ПолучитьДанныеФайла(
		ДанныеФайла.Ссылка, ДанныеФайла.Версия);
	
КонецПроцедуры // ЗанятьФайл()

// Переносит Файл в другую папку
Процедура ПеренестиФайл(ДанныеФайла, Папка) Экспорт 
	
	ФайлОбъект = ДанныеФайла.Ссылка.ПолучитьОбъект();
	ФайлОбъект.ВладелецФайла = Папка;
	ФайлОбъект.Записать();
	
КонецПроцедуры

// Создает карточку Файла в БД
Функция СоздатьФайл(Знач Владелец, Знач Комментарий, Знач ИмяБезРасширения, Знач Расширение, Знач ХранитьВерсии, Знач АдресВременногоХранилищаТекста) Экспорт
	
	Файл = Справочники.Файлы.СоздатьЭлемент();
	Файл.ВладелецФайла = Владелец;
	Файл.Наименование = ИмяБезРасширения;
	Файл.ПолноеНаименование = ИмяБезРасширения;
	Файл.Автор = ПараметрыСеанса.ТекущийПользователь;
	Файл.ДатаСоздания = ТекущаяДата();
	Файл.Описание = Комментарий;
	Файл.ИндексКартинки = ПолучитьИндексПиктограммыФайла(Неопределено);
	Файл.ХранитьВерсии = ХранитьВерсии;
	
	Текст = ПолучитьСтрокуИзВременногоХранилища(АдресВременногоХранилищаТекста);
	Файл.ТекстХранилище = Новый ХранилищеЗначения(Текст, Новый СжатиеДанных);
	
	Файл.Записать();
	Возврат Файл.Ссылка;
	
КонецФункции // СоздатьФайл()

// Функция предназначена для преобразования расширения файла в следующий
// вид: без точки и в нижнем регистре
// 
// Параметры:
//  стрРасширение - Строка. Расширение для преобразования
// Возвращаемое значение:
//  Преобразованная строка
//
Функция РасширениеБезТочки(стрРасширение)
	Расширение = НРег(СокрЛП(стрРасширение));
	Если Сред(Расширение, 1, 1) = "." Тогда
		Расширение = Сред(Расширение, 2);
	КонецЕсли;
	Возврат Расширение;
КонецФункции // РасширениеБезТочки()

// Создает версию сохраняемого файла для сохранения в карточке Файла
// и подставляет ссылку на версию в карточку Файла
Процедура СоздатьВерсиюИОбновитьВерсиюВФайле(
	ВремяИзменения,
	ВремяИзмененияУниверсальное,
	ДокСсылка, 
	ИмяБезРасширения, 
	Размер, 
	Расширение, 
	АдресВременногоХранилищаФайла, 
	АдресВременногоХранилищаТекста,
	ЭтоВебКлиент = Ложь) Экспорт
	
	ВерсияСсылка = СоздатьВерсию(
		ВремяИзменения, 
		ВремяИзмененияУниверсальное,
		ДокСсылка, 
		ИмяБезРасширения, 
		Размер, 
		Расширение, 
		АдресВременногоХранилищаФайла, 
		АдресВременногоХранилищаТекста);

	ОбновитьВерсиюВФайле(ДокСсылка, ВерсияСсылка, АдресВременногоХранилищаТекста);
	
КонецПроцедуры // СоздатьВерсиюИОбновитьВерсиюВФайле()


// Создает версию сохраняемого файла для сохранения в карточке Файла
Функция СоздатьВерсию(
	ВремяИзменения,
	ВремяИзмененияУниверсальное,
	ДокСсылка, 
	ИмяБезРасширения, 
	Размер, 
	Расширение, 
	АдресВременногоХранилищаФайла, 
	АдресВременногоХранилищаТекста,
	ЭтоВебКлиент = Ложь) Экспорт

	Версия = Справочники.ВерсииФайлов.СоздатьЭлемент();
	
	Версия.Владелец = ДокСсылка;
	Версия.Автор = ПараметрыСеанса.ТекущийПользователь;
	Версия.ДатаМодификации = ВремяИзменения;
	Версия.ДатаМодификацииЗимняя = ВремяИзмененияУниверсальное;
	Версия.ДатаСоздания = ТекущаяДата();
	Версия.ПолноеНаименование = ИмяБезРасширения;
	Версия.Размер = Размер;
	Версия.Расширение = РасширениеБезТочки(Расширение);

	Если ТипЗнч(АдресВременногоХранилищаФайла) = Тип("ХранилищеЗначения") Тогда
		// При создании Файла из шаблона хранилище значения копируется напрямую
		Версия.ФайлХранилище = АдресВременногоХранилищаФайла;
	Иначе	
		Версия.ФайлХранилище = Новый ХранилищеЗначения(
			ПолучитьИзВременногоХранилища(АдресВременногоХранилищаФайла), Новый СжатиеДанных);
	КонецЕсли;	

	Если ТипЗнч(АдресВременногоХранилищаТекста) = Тип("ХранилищеЗначения") Тогда
		// При создании Файла из шаблона хранилище значения копируется напрямую
		Версия.ТекстХранилище = АдресВременногоХранилищаТекста;
	Иначе
		Текст = ПолучитьСтрокуИзВременногоХранилища(АдресВременногоХранилищаТекста);
		Версия.ТекстХранилище = Новый ХранилищеЗначения(Текст, Новый СжатиеДанных);
	КонецЕсли;

	Если Константы.ИзвлекатьТекстыФайловНаСервере.Получить() Тогда 
		Версия.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
	КонецЕсли;	

	Если (ЭтоВебКлиент = Истина) И (Версия.Размер = 0) Тогда
		Попытка
			ДвоичныеДанныеФайла = Версия.ФайлХранилище.Получить();
			Версия.Размер = ДвоичныеДанныеФайла.Размер();
		Исключение // Ничего не пишем - это нормальная ситуация - когда Текст некому извлечь
		КонецПопытки;
	КонецЕсли;

	Версия.Записать();
	
	Возврат Версия.Ссылка;
КонецФункции // СоздатьВерсию()

// Подставляет ссылку на версию в карточку Файла
Процедура ОбновитьВерсиюВФайле(ФайлСсылка, Версия, Знач АдресВременногоХранилищаТекста) Экспорт
	
	ФайлОбъект = ФайлСсылка.ПолучитьОбъект();
	
	ФайлОбъект.ТекущаяВерсия = Версия.Ссылка;
	
	Если ТипЗнч(АдресВременногоХранилищаТекста) = Тип("ХранилищеЗначения") Тогда
		// При создании Файла из шаблона хранилище значения копируется напрямую
		ФайлОбъект.ТекстХранилище = АдресВременногоХранилищаТекста;
	Иначе
		Текст = ПолучитьСтрокуИзВременногоХранилища(АдресВременногоХранилищаТекста);
		ФайлОбъект.ТекстХранилище = Новый ХранилищеЗначения(Текст, Новый СжатиеДанных);
	КонецЕсли;
	
	ФайлОбъект.Записать();
	
КонецПроцедуры // ОбновитьВерсиюВФайле()

// Обновляет текстовую порцию из файла в карточке файла
Процедура ОбновитьТекстВФайле(ФайлСсылка, Знач АдресВременногоХранилищаТекста)
	
	ФайлОбъект = ФайлСсылка.ПолучитьОбъект();
	
	Текст = ПолучитьСтрокуИзВременногоХранилища(АдресВременногоХранилищаТекста);
	ФайлОбъект.ТекстХранилище = Новый ХранилищеЗначения(Текст, Новый СжатиеДанных);
	
	ФайлОбъект.Записать();
	
КонецПроцедуры // ОбновитьТекстВФайле()

// Обновление или создание версии Файла и возврат ссылки на обновленную версию
Функция ОбновитьВерсию(
	Файл, 
	СоздаватьВерсию, 
	АдресВременногоХранилищаФайла,
	Комментарий, 
	ВремяИзменения, 
	ВремяИзмененияУниверсальное,
	Размер, 
	ИмяБезРасширения, 
	Расширение, 
	ПолныйПутьКФайлу,
	АдресВременногоХранилищаТекста,
	ЭтоВебКлиент) 

	Если СоздаватьВерсию Тогда
		Версия = Справочники.ВерсииФайлов.СоздатьЭлемент();
		Версия.РодительскаяВерсия = Файл.ТекущаяВерсия;
	Иначе	
		Версия = Файл.ТекущаяВерсия.ПолучитьОбъект();
	КонецЕсли;
	
	Версия.Владелец = Файл.Ссылка;
	Версия.Автор = ПараметрыСеанса.ТекущийПользователь;
	Версия.ДатаМодификации = ВремяИзменения;
	Версия.ДатаМодификацииЗимняя = ВремяИзмененияУниверсальное;
	Версия.ДатаСоздания = ТекущаяДата();
	Версия.Размер = Размер;
	Версия.ПолноеНаименование = ИмяБезРасширения;
	Версия.Комментарий = Комментарий;
	
	Версия.Расширение = РасширениеБезТочки(Расширение);
	
	Версия.ФайлХранилище = Новый ХранилищеЗначения(
		ПолучитьИзВременногоХранилища(АдресВременногоХранилищаФайла), Новый СжатиеДанных);
		
	Если НЕ ЭтоВебКлиент Тогда		
		ИзвлекатьТекстыФайловНаСервере = Константы.ИзвлекатьТекстыФайловНаСервере.Получить();
		Если ИзвлекатьТекстыФайловНаСервере = Ложь Тогда
			Текст = ПолучитьСтрокуИзВременногоХранилища(АдресВременногоХранилищаТекста);
			Версия.ТекстХранилище = Новый ХранилищеЗначения(Текст, Новый СжатиеДанных);
		Иначе
			Версия.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
		КонецЕсли;
	Иначе		
		Версия.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
	КонецЕсли;

	Если (ЭтоВебКлиент = Истина) И (Версия.Размер = 0) Тогда
		Попытка
			ДвоичныеДанныеФайла = Версия.ФайлХранилище.Получить();
			Версия.Размер = ДвоичныеДанныеФайла.Размер();
		Исключение // Ничего не пишем - это нормальная ситуация - когда Текст некому извлечь
		КонецПопытки;
	КонецЕсли;
	
	Версия.Записать();
	
	НавигационнаяСсылкаФайла = ПолучитьНавигационнуюСсылку(Файл);
	ИсторияРаботыПользователя.Добавить(НавигационнаяСсылкаФайла);
	
	Возврат Версия.Ссылка;
	
КонецФункции // ОбновитьВерсию

// Обновляет или создает версию Файла и снимает заем
Процедура ОпубликоватьИОсвободитьФайл(
	ДанныеФайла, 
	СоздаватьВерсию, 
	АдресВременногоХранилищаФайла, 
	Комментарий, 
	ВремяИзменения,
	ВремяИзмененияУниверсальное,
	Размер, 
	ИмяБезРасширения, 
	Расширение, 
	ПолныйПутьКФайлу,
	АдресВременногоХранилищаТекста,
	ЭтоВебКлиент) Экспорт
	
	НачатьТранзакцию();
	
	ПредыдущаяВерсия = ДанныеФайла.ТекущаяВерсия;
	НоваяВерсия = ОбновитьВерсию(
		ДанныеФайла.Ссылка, 
		СоздаватьВерсию, 
		АдресВременногоХранилищаФайла, 
		Комментарий, 
		ВремяИзменения, 
		ВремяИзмененияУниверсальное,
		Размер, 
		ИмяБезРасширения, 
		Расширение, 
		ПолныйПутьКФайлу,
		АдресВременногоХранилищаТекста,
		ЭтоВебКлиент);

	Если СоздаватьВерсию Тогда
		ОбновитьВерсиюВФайле(ДанныеФайла.Ссылка, НоваяВерсия, АдресВременногоХранилищаТекста);
	Иначе
		ОбновитьТекстВФайле(ДанныеФайла.Ссылка, АдресВременногоХранилищаТекста);
	КонецЕсли;
	ДанныеФайла.ТекущаяВерсия = НоваяВерсия;
	
	ОсвободитьФайл(ДанныеФайла);
	
	Если НЕ ЭтоВебКлиент Тогда
		ИмяКаталога = ХранилищеОбщихНастроекЗагрузить("РабочийКаталог", "ПутьКРабочемуКаталогу");
		УдалитьВерсиюИЗанестиИнформациюФайлаВРегистр(
			ПредыдущаяВерсия, 
			НоваяВерсия, 
			ПолныйПутьКФайлу, 
			ИмяКаталога);
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // ОпубликоватьИОсвободитьФайл()

// Получает данные файла, затем обновляет или создает версию Файла и снимает заем
// Нужно для случаев, когда на клиенте нет ДанныеФайла (из соображений экономии вызовов клиент-сервер)
Процедура ПолучитьДанныеФайлаИОпубликоватьИОсвободитьФайл(
	ОбъектСсылка, 
	ДанныеФайла,
	СоздаватьВерсию, 
	АдресВременногоХранилищаФайла, 
	Комментарий, 
	ВремяИзменения, 
	ВремяИзмененияУниверсальное,
	Размер, 
	ИмяБезРасширения, 
	Расширение, 
	ПолныйПутьКФайлу,
	АдресВременногоХранилищаТекста,
	ЭтоВебКлиент) Экспорт

	ДанныеФайла = ПолучитьДанныеФайла(ОбъектСсылка);
	
	НачатьТранзакцию();
	
	ПредыдущаяВерсия = ДанныеФайла.ТекущаяВерсия;
	НоваяВерсия = ОбновитьВерсию(
		ДанныеФайла.Ссылка, 
		СоздаватьВерсию, 
		АдресВременногоХранилищаФайла, 
		Комментарий, 
		ВремяИзменения, 
		ВремяИзмененияУниверсальное,
		Размер, 
		ИмяБезРасширения, 
		Расширение, 
		ПолныйПутьКФайлу,
		АдресВременногоХранилищаТекста,
		ЭтоВебКлиент);

	Если СоздаватьВерсию Тогда
		ОбновитьВерсиюВФайле(ДанныеФайла.Ссылка, НоваяВерсия, АдресВременногоХранилищаТекста);
	Иначе
		ОбновитьТекстВФайле(ДанныеФайла.Ссылка, АдресВременногоХранилищаТекста);
	КонецЕсли;
	ДанныеФайла.ТекущаяВерсия = НоваяВерсия;
	
	ОсвободитьФайл(ДанныеФайла);
	
	Если НЕ ЭтоВебКлиент Тогда
		ИмяКаталога = ХранилищеОбщихНастроекЗагрузить("РабочийКаталог", "ПутьКРабочемуКаталогу");
		УдалитьВерсиюИЗанестиИнформациюФайлаВРегистр(
			ПредыдущаяВерсия, 
			НоваяВерсия, 
			ПолныйПутьКФайлу, 
			ИмяКаталога);
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // ОпубликоватьИОсвободитьФайл()

// Процедура предназначена для опубликования файла без его освобождения
Процедура ОпубликоватьФайл(
	Файл, 
	СоздаватьВерсию, 
	АдресВременногоХранилищаФайла, 
	Комментарий, 
	ВремяИзменения,
	ВремяИзмененияУниверсальное,
	Размер, 
	ИмяБезРасширения, 
	Расширение, 
	ОтносительныйПутьКФайлу, 
	ПолныйПутьКФайлу,
	АдресВременногоХранилищаТекста,
	ЭтоВебКлиент) Экспорт
	
	НачатьТранзакцию();
	
	СтараяВерсия = Файл.ТекущаяВерсия;
	
	Версия = ОбновитьВерсию(
		Файл, 
		СоздаватьВерсию, 
		АдресВременногоХранилищаФайла, 
		Комментарий, 
		ВремяИзменения, 
		ВремяИзмененияУниверсальное,
		Размер, 
		ИмяБезРасширения, 
		Расширение, 
		ПолныйПутьКФайлу,
		АдресВременногоХранилищаТекста,
		ЭтоВебКлиент);

	Если СоздаватьВерсию Тогда
		ОбновитьВерсиюВФайле(Файл, Версия, АдресВременногоХранилищаТекста);
	Иначе
		ОбновитьТекстВФайле(Файл, АдресВременногоХранилищаТекста);
	КонецЕсли;
	
	Если НЕ ЭтоВебКлиент Тогда
		УдалитьИзРегистра(СтараяВерсия);
		ЗаписатьИмяФайлаСПутемВРегистр(Версия, ОтносительныйПутьКФайлу);
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // ОпубликоватьФайл()

// Функция возвращает структуру, содержащую различные сведения о Файле и версии
Функция ПолучитьДанныеФайла(ФайлСсылка, ВерсияСсылка = Неопределено) Экспорт
	
	Запрос = Новый Запрос;

	Если ВерсияСсылка = Справочники.ВерсииФайлов.ПустаяСсылка() Тогда
		ВерсияСсылка = Неопределено
	КонецЕсли;
	
	Если ВерсияСсылка = Неопределено Тогда
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	Файлы.Ссылка,
		               |	Файлы.Редактирует,
		               |	Файлы.ТекущаяВерсия,
		               |	Файлы.ВладелецФайла,
		               |	Файлы.ХранитьВерсии,
		               |	ВерсииФайлов.ПолноеНаименование,
		               |	ВерсииФайлов.Расширение,
		               |	ВерсииФайлов.Размер,
		               |	ВерсииФайлов.ДатаМодификацииЗимняя
		               |ИЗ
		               |	Справочник.Файлы КАК Файлы
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииФайлов КАК ВерсииФайлов
		               |		ПО Файлы.ТекущаяВерсия = ВерсииФайлов.Ссылка";
		
		Если ТипЗнч(ФайлСсылка) = Тип("Массив") Тогда 
			Запрос.Текст = Запрос.Текст + " ГДЕ Файлы.Ссылка В (&Файл) ";
		Иначе
			Запрос.Текст = Запрос.Текст + " ГДЕ Файлы.Ссылка = &Файл ";
		КонецЕсли;

		Запрос.Параметры.Вставить("Файл", ФайлСсылка);
		
	Иначе
		
		Если ФайлСсылка <> Неопределено Тогда 
			Запрос.Текст = "ВЫБРАТЬ
			               |	Файлы.Ссылка,
			               |	Файлы.Редактирует,
			               |	Файлы.ТекущаяВерсия,
			               |	Файлы.ВладелецФайла,
			               |	Файлы.ХранитьВерсии,
			               |	ВерсииФайлов.ПолноеНаименование,
			               |	ВерсииФайлов.Расширение,
			               |	ВерсииФайлов.Размер,
			               |	ВерсииФайлов.ДатаМодификацииЗимняя
			               |ИЗ
			               |	Справочник.Файлы КАК Файлы
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииФайлов КАК ВерсииФайлов
			               |		ПО (ИСТИНА)
			               |ГДЕ
			               |	Файлы.Ссылка = &Файл
			               |	И ВерсииФайлов.Ссылка = &Версия";
						   
			Запрос.Параметры.Вставить("Файл", ФайлСсылка);
			Запрос.Параметры.Вставить("Версия", ВерсияСсылка);
		Иначе
			Запрос.Текст = "ВЫБРАТЬ
			               |	Файлы.Ссылка,
			               |	Файлы.Редактирует,
			               |	Файлы.ТекущаяВерсия,
			               |	Файлы.ВладелецФайла,
			               |	Файлы.ХранитьВерсии,
			               |	ВерсииФайлов.ПолноеНаименование,
			               |	ВерсииФайлов.Расширение,
			               |	ВерсииФайлов.Размер,
			               |	ВерсииФайлов.ДатаМодификацииЗимняя
			               |ИЗ
			               |	Справочник.Файлы КАК Файлы
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииФайлов КАК ВерсииФайлов
			               |		ПО (ИСТИНА)
			               |ГДЕ
			               |	ВерсииФайлов.Ссылка = &Версия
			               |	И Файлы.Ссылка = ВерсииФайлов.Владелец";
						   
			Запрос.Параметры.Вставить("Версия", ВерсияСсылка);
		КонецЕсли;	
		
	КонецЕсли;	
	
	МассивДанныеФайла = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
	
		ДанныеФайла = Новый Структура;
		ДанныеФайла.Вставить("Ссылка", Выборка.Ссылка);
		ДанныеФайла.Вставить("Редактирует", Выборка.Редактирует);
		ДанныеФайла.Вставить("Владелец", Выборка.ВладелецФайла);
		ДанныеФайла.Вставить("НавигационнаяСсылка", ПолучитьНавигационнуюСсылку(Выборка.Ссылка));
		
		Если ВерсияСсылка <> Неопределено Тогда
			ДанныеФайла.Вставить("Версия", ВерсияСсылка);
		Иначе
			ДанныеФайла.Вставить("Версия", Выборка.ТекущаяВерсия);
		КонецЕсли;	

		ДанныеФайла.Вставить("ТекущаяВерсия", Выборка.ТекущаяВерсия);
		ДанныеФайла.Вставить("НавигационнаяСсылкаТекущейВерсии", ПолучитьНавигационнуюСсылку(ДанныеФайла.ТекущаяВерсия, "ФайлХранилище"));
		
		ДанныеФайла.Вставить("Размер", Выборка.Размер);
		ДанныеФайла.Вставить("ДатаМодификацииЗимняя", Выборка.ДатаМодификацииЗимняя);
		ДанныеФайла.Вставить("Расширение", Выборка.Расширение);
		ДанныеФайла.Вставить("ПолноеНаименованиеВерсии", СокрЛП(Выборка.ПолноеНаименование));
		ДанныеФайла.Вставить("ХранитьВерсии", Выборка.ХранитьВерсии);
		
		НаЧтение = ДанныеФайла.Редактирует <> ПараметрыСеанса.ТекущийПользователь;
		ДанныеФайла.Вставить("НаЧтение", НаЧтение);
		
		ВРабочемКаталогеНаЧтение = Истина;
		ИмяКаталога = ХранилищеОбщихНастроекЗагрузить("РабочийКаталог", "ПутьКРабочемуКаталогу");

		Если ВерсияСсылка <> Неопределено Тогда
			ИмяФайлаСПутемВРабочемКаталоге = ПолучитьИмяФайлаСПутемИзРегистра(ВерсияСсылка, ИмяКаталога, ВРабочемКаталогеНаЧтение);
		Иначе
			ИмяФайлаСПутемВРабочемКаталоге = ПолучитьИмяФайлаСПутемИзРегистра(Выборка.ТекущаяВерсия, ИмяКаталога, ВРабочемКаталогеНаЧтение);
		КонецЕсли;	

		ДанныеФайла.Вставить("ИмяФайлаСПутемВРабочемКаталоге", ИмяФайлаСПутемВРабочемКаталоге);
		ДанныеФайла.Вставить("ВРабочемКаталогеНаЧтение", ВРабочемКаталогеНаЧтение);
		
		РедактируетТекущийПользователь = (ДанныеФайла.Редактирует = ПараметрыСеанса.ТекущийПользователь);
		ДанныеФайла.Вставить("РедактируетТекущийПользователь", РедактируетТекущийПользователь);
		
		МассивДанныеФайла.Добавить(ДанныеФайла); 
		
	КонецЦикла;
	
	// если был передан массив - возвращаем массив
	Если ТипЗнч(ФайлСсылка) = Тип("Массив") Тогда 
		Возврат МассивДанныеФайла;
	КонецЕсли;

	Если МассивДанныеФайла.Количество() > 0 Тогда 
		Возврат МассивДанныеФайла[0];
	Иначе
		Возврат Новый Структура;
	КонецЕсли;
	
КонецФункции

// Получает строку из временного хранилища (передача с клиента на сервер 
//делается через временное хранилище)
Функция ПолучитьСтрокуИзВременногоХранилища(АдресВременногоХранилищаТекста)
	Если ПустаяСтрока(АдресВременногоХранилищаТекста) Тогда
		Возврат "";
 	КонецЕсли;

	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ПолучитьИзВременногоХранилища(АдресВременногоХранилищаТекста).Записать(ИмяВременногоФайла);

	ТекстовыйФайл = Новый ЧтениеТекста(ИмяВременногоФайла, КодировкаТекста.UTF8);
	Текст = ТекстовыйФайл.Прочитать();
	ТекстовыйФайл.Закрыть();
	УдалитьФайлы(ИмяВременногоФайла);
	Возврат Текст;
КонецФункции

// Создает карточку Файла в БД вместе с версией
Функция СоздатьФайлСВерсией(
	ВладелецФайла,
	ИмяБезРасширения,
	РасширениеБезТочки,
	ВремяИзменения,
	ВремяИзмененияУниверсальное,
	Размер,
	АдресВременногоХранилищаФайла,
	АдресВременногоХранилищаТекста,
	ЭтоВебКлиент) Экспорт

	НачатьТранзакцию();

	// Создадим карточку Файла в БД
	Док = СоздатьФайл(
		ВладелецФайла,
		"",
		ИмяБезРасширения,
		РасширениеБезТочки,
		Истина,
		АдресВременногоХранилищаТекста);
	
	// Создадим версию сохраняемого файла для сохранения в карточке Файла
	Версия = СоздатьВерсию(
		ВремяИзменения,
		ВремяИзмененияУниверсальное,
		Док,
		ИмяБезРасширения,
		Размер,
		РасширениеБезТочки,
		АдресВременногоХранилищаФайла,
		АдресВременногоХранилищаТекста,
		ЭтоВебКлиент);

	// Подставим ссылку на версию в карточку Файла
	ОбновитьВерсиюВФайле(Док, Версия, АдресВременногоХранилищаТекста);

	ЗафиксироватьТранзакцию();

	Возврат Док;
КонецФункции

// Получает данные файла и делает заем (checkout) - для экономии вызовов 
//клиент сервер поместили ПолучитьДанныеФайла и ЗанятьФайл в одну функцию
Функция ПолучитьДанныеФайлаИЗанятьФайл(ФайлСсылка, ДанныеФайла, СтрокаОшибки) Экспорт

	ДанныеФайла = ПолучитьДанныеФайла(ФайлСсылка);

	СтрокаОшибки = "";
	Если НЕ РаботаСФайламиКлиентСервер.МожноЛиЗанятьФайл(ДанныеФайла, СтрокаОшибки) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Если ДанныеФайла.Редактирует.Пустая() Тогда
		ЗанятьФайл(ДанныеФайла);
	КонецЕсли;
	
	Возврат Истина;
КонецФункции // ПолучитьДанныеФайлаИЗанятьФайл()

// Освобождение Файла с получением данных
Процедура ПолучитьДанныеФайлаИОсвободитьФайл(ФайлСсылка, ДанныеФайла) Экспорт
	
	ДанныеФайла = ПолучитьДанныеФайла(
		ФайлСсылка);
	
	ОсвободитьФайл(ДанныеФайла);	
КонецПроцедуры	

// Процедура предназначена для опубликования файла без его освобождения
Процедура ПолучитьДанныеФайлаИОпубликоватьФайл(
	Файл, 
	ДанныеФайла,
	СоздаватьВерсию, 
	АдресВременногоХранилищаФайла, 
	Комментарий, 
	ВремяИзменения, 
	ВремяИзмененияУниверсальное,
	Размер, 
	ИмяБезРасширения, 
	Расширение, 
	ОтносительныйПутьКФайлу, 
	ПолныйПутьКФайлу,
	АдресВременногоХранилищаТекста,
	ЭтоВебКлиент) Экспорт

	ДанныеФайла = ПолучитьДанныеФайла(
		Файл);

	ОпубликоватьФайл(
		Файл, 
		СоздаватьВерсию,
		АдресВременногоХранилищаФайла,
		Комментарий,
		ВремяИзменения,
		ВремяИзмененияУниверсальное,
		Размер,
		ИмяБезРасширения,
		Расширение,
		ОтносительныйПутьКФайлу,
		ПолныйПутьКФайлу,
		АдресВременногоХранилищаТекста,
		ЭтоВебКлиент);
КонецПроцедуры	

// Находит запись в регистре сведений ФайлыВРабочемКаталоге по пути файла на диске (относительному)
Функция НайтиВРегистреПоПути(Имяфайла, Версия, ДатаПомещения) Экспорт
	
	Версия = Новый ("СправочникСсылка.ВерсииФайлов");
	
	// Для каждого по пути находим запись в регистре сведений - оттуда берем поле 
	// Версия и Размер и ДатаПомещенияВРабочийКаталог
	ЗапросВРегистр = Новый Запрос;
	ЗапросВРегистр.УстановитьПараметр("Имяфайла", Имяфайла);
	ЗапросВРегистр.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	ЗапросВРегистр.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                       |	ФайлыВРабочемКаталоге.Версия,
	                       |	ФайлыВРабочемКаталоге.ДатаПомещенияВРабочийКаталог
	                       |ИЗ
	                       |	РегистрСведений.ФайлыВРабочемКаталоге КАК ФайлыВРабочемКаталоге
	                       |ГДЕ
	                       |	ФайлыВРабочемКаталоге.Путь = &Имяфайла
	                       |	И ФайлыВРабочемКаталоге.Пользователь = &Пользователь";
	
	РезультатЗапроса = ЗапросВРегистр.Выполнить(); 
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Версия = Выборка.Версия;
		ДатаПомещения = Выборка.ДатаПомещенияВРабочийКаталог;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

// Возвращает с сервера на клиент идентификатор текущего пользователя
Функция ПараметрыСеансаИдентификаторТекущегоПользователя() Экспорт
	Возврат ПараметрыСеанса.ТекущийПользователь.УникальныйИдентификатор();
КонецФункции

// Передает с клиента на сервер для записи массив настроек 
//(массив структур с полями Объект Настройка Значение)
Процедура ХранилищеОбщихНастроекСохранитьМассив(Знач МассивСтруктур) Экспорт
	Для Каждого Элемент Из МассивСтруктур Цикл
		ХранилищеОбщихНастроек.Сохранить(Элемент.Объект, Элемент.Настройка, Элемент.Значение);
	КонецЦикла;
КонецПроцедуры

// Передает с клиента на сервер для записи настройку
Процедура ХранилищеОбщихНастроекСохранить(Знач Объект, Знач Настройка, Знач Значение) Экспорт
	ХранилищеОбщихНастроек.Сохранить(Объект, Настройка, Значение);
КонецПроцедуры

// Передает с клиента на сервер для записи
Функция ХранилищеОбщихНастроекЗагрузить(Знач Объект, Знач Настройка) Экспорт
	Возврат ХранилищеОбщихНастроек.Загрузить(Объект, Настройка);
КонецФункции

Функция ПолучитьИмяФайлаСПутемИзРегистра(Знач Версия, Знач ИмяКаталога, ВРабочемКаталогеНаЧтение) Экспорт
	ИмяФайлаСПутем = "";
	
	// Подготовить структуру отбора по измерениям      
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Версия", Версия.Ссылка);
	СтруктураОтбора.Вставить("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	   
	// Получить структуру с данными ресурсов записи
	СтруктураРесурсов = РегистрыСведений.ФайлыВРабочемКаталоге.Получить(СтруктураОтбора);
	   
	// Получить путь из регистра
	ИмяФайлаСПутем = СтруктураРесурсов.Путь;
	ВРабочемКаталогеНаЧтение = СтруктураРесурсов.НаЧтение;
	Если ИмяФайлаСПутем <> "" Тогда
		ИмяФайлаСПутем = ИмяКаталога + ИмяФайлаСПутем;
	КонецЕсли;
	
	Возврат ИмяФайлаСПутем;
КонецФункции

Функция ПолучитьИмяФайлаИзРегистра(Знач Ссылка) Экспорт
	ИмяФайлаСПутем = "";
	
	// Подготовить структуру отбора по измерениям      
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Версия", Ссылка);
	СтруктураОтбора.Вставить("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	   
	// Получить структуру с данными ресурсов записи
	СтруктураРесурсов = РегистрыСведений.ФайлыВРабочемКаталоге.Получить(СтруктураОтбора);
	   
	// Получить путь из регистра
	ИмяФайлаСПутем = СтруктураРесурсов.Путь;
	
	Возврат ИмяФайлаСПутем;
КонецФункции

Процедура ЗаписатьИмяФайлаСПутемВРегистр(Знач ТекущаяВерсия, Знач ИмяФайлаСПутем) Экспорт
	// Создать набор записей
	НаборЗаписей = РегистрыСведений.ФайлыВРабочемКаталоге.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Версия.Установить(ТекущаяВерсия.Ссылка);
	НаборЗаписей.Отбор.Пользователь.Установить(ПараметрыСеанса.ТекущийПользователь);

	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Версия = ТекущаяВерсия.Ссылка;
	НоваяЗапись.Путь = ИмяФайлаСПутем;
	НоваяЗапись.Размер = ТекущаяВерсия.Размер;
	НоваяЗапись.ДатаПомещенияВРабочийКаталог = ТекущаяДата();
	НоваяЗапись.Пользователь = ПараметрыСеанса.ТекущийПользователь;

	НаборЗаписей.Записать();
КонецПроцедуры

Процедура УдалитьИзРегистра(Знач Версия) Экспорт
	НаборЗаписей = РегистрыСведений.ФайлыВРабочемКаталоге.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Версия.Установить(Версия);
	НаборЗаписей.Отбор.Пользователь.Установить(ПараметрыСеанса.ТекущийПользователь);
	
	НаборЗаписей.Записать();
КонецПроцедуры

Процедура ОчиститьВсеСвоиКромеЗанятых() Экспорт
	// Отбираем все в регистре сведений. Перебираем - находим те, что не заняты текущим пользователем -
	//  и все удаляем - считаем, что на диске они уже удалены
	
	СписокУдалить = Новый Массив;
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;

	// для каждой нашей записи находим запись в регистре сведений - оттуда берем поле Версия и Редактирует
	ЗапросВРегистр = Новый Запрос;
	ЗапросВРегистр.УстановитьПараметр("Пользователь", ТекущийПользователь);
	ЗапросВРегистр.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                       |	ФайлыВРабочемКаталоге.Версия,
	                       |	ФайлыВРабочемКаталоге.Версия.Владелец.Редактирует КАК Редактирует
	                       |ИЗ
	                       |	РегистрСведений.ФайлыВРабочемКаталоге КАК ФайлыВРабочемКаталоге
	                       |ГДЕ
	                       |	ФайлыВРабочемКаталоге.Пользователь = &Пользователь";
	
	РезультатЗапроса = ЗапросВРегистр.Выполнить(); 
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТаблицаВыгрузки = РезультатЗапроса.Выгрузить();
		Для Каждого Выборка Из ТаблицаВыгрузки Цикл
			Версия = Выборка.Версия;
			Редактирует = Выборка.Редактирует;
			
			Если Редактирует <> ТекущийПользователь Тогда
				СписокУдалить.Добавить(Версия);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Версия из СписокУдалить Цикл
		// Создать набор записей
		НаборЗаписей = РегистрыСведений.ФайлыВРабочемКаталоге.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Версия.Установить(Версия);
		НаборЗаписей.Отбор.Пользователь.Установить(ТекущийПользователь);
		
		НаборЗаписей.Записать();
	КонецЦикла;
КонецПроцедуры

Процедура УдалитьВерсиюИЗанестиИнформациюФайлаВРегистр(Знач СтараяВерсия, Знач НоваяВерсия, Знач ПолноеИмяФайла, Знач ИмяКаталога)
	УдалитьИзРегистра(СтараяВерсия);
	НаЧтение = Истина;
	ЗанестиИнформациюФайлаВРегистр(НоваяВерсия, ПолноеИмяФайла, ИмяКаталога, НаЧтение, 0);
КонецПроцедуры

Процедура ЗанестиИнформациюФайлаВРегистр(Знач Версия, Знач ПолныйПуть, Знач ИмяКаталога, Знач НаЧтение, Знач РазмерФайла)  Экспорт
	ИмяФайлаСПутем = ПолныйПуть;
	
	Если Найти(ПолныйПуть, ИмяКаталога) = 1 Тогда
		ИмяФайлаСПутем = Сред(ПолныйПуть, СтрДлина(ИмяКаталога) + 1);
	КонецЕсли;            
	
	// Создать набор записей
	НаборЗаписей = РегистрыСведений.ФайлыВРабочемКаталоге.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Версия.Установить(Версия.Ссылка);
	НаборЗаписей.Отбор.Пользователь.Установить(ПараметрыСеанса.ТекущийПользователь);

	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Версия = Версия.Ссылка;
	НоваяЗапись.Путь = ИмяФайлаСПутем;

	Если РазмерФайла <> 0 Тогда
		НоваяЗапись.Размер = РазмерФайла;
	Иначе 
		НоваяЗапись.Размер = Версия.Размер;
	КонецЕсли;

	НоваяЗапись.ДатаПомещенияВРабочийКаталог = ТекущаяДата();
	НоваяЗапись.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	НоваяЗапись.НаЧтение = НаЧтение;

	НаборЗаписей.Записать();
КонецПроцедуры

Функция СписокФайловВРегистре() Экспорт
	СписокФайлов = Новый Массив;
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	
	// Для каждой нашей записи находим запись в регистре сведений - оттуда берем поле Версия и Редактирует
	ЗапросВРегистр = Новый Запрос;
	ЗапросВРегистр.УстановитьПараметр("Пользователь", ТекущийПользователь);
	
	ЗапросВРегистр.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФайлыВРабочемКаталоге.Версия,
	|	ФайлыВРабочемКаталоге.НаЧтение,
	|	ФайлыВРабочемКаталоге.Размер
	|ИЗ
	|	РегистрСведений.ФайлыВРабочемКаталоге КАК ФайлыВРабочемКаталоге
	|ГДЕ
	|	ФайлыВРабочемКаталоге.Пользователь = &Пользователь";
	
	РезультатЗапроса = ЗапросВРегистр.Выполнить(); 
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТаблицаВыгрузки = РезультатЗапроса.Выгрузить();
	
		Для Каждого Выборка Из ТаблицаВыгрузки Цикл
			Версия = Выборка.Версия;
			
			Запись = Новый Структура;
			Запись.Вставить("ДатаМодификации", Версия.ДатаМодификации);
			Запись.Вставить("ПолноеНаименование", Версия.ПолноеНаименование);
			Запись.Вставить("ИндексКартинки", Версия.ИндексКартинки);
			Запись.Вставить("Размер", Выборка.Размер);
			Запись.Вставить("Ссылка", Версия.Ссылка);
			Запись.Вставить("Редактирует", Версия.Владелец.Редактирует);
			Запись.Вставить("НаЧтение", Выборка.НаЧтение);
			
			СписокФайлов.Добавить(Запись);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписокФайлов;
КонецФункции	

Функция СправочникиПапкиСоздатьЭлемент(Знач Имя, Знач Родитель) Экспорт
	Папка = Справочники.ПапкиФайлов.СоздатьЭлемент();
	Папка.Наименование = Имя;
	Папка.Родитель = Родитель;
	Папка.ДатаСоздания = ТекущаяДата();
	Папка.Записать();
	Возврат Папка.Ссылка;
КонецФункции

Функция ИмпортФайловСформироватьОтчет(Знач МассивИменФайловСОшибками) Экспорт
	ТабДок = Новый ТабличныйДокумент;
	ТабМакет = Обработки.ИмпортФайлов.ПолучитьМакет("МакетОтчета");
	
	ОбластьЗаголовок = ТабМакет.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовок.Параметры.Описание = "Файлы с ошибками:";
	ТабДок.Вывести(ОбластьЗаголовок);
	
	ОбластьСтрока = ТабМакет.ПолучитьОбласть("Строка");

	Для Каждого Выборка Из МассивИменФайловСОшибками Цикл
		ОбластьСтрока.Параметры.Название = Выборка.ИмяФайла;
		ОбластьСтрока.Параметры.Ошибка = Выборка.Ошибка;
		ТабДок.Вывести(ОбластьСтрока);
	КонецЦикла; 	
	
	Отчет = Новый ТабличныйДокумент;
	Отчет.Вывести(ТабДок);

	Возврат Отчет;
КонецФункции

Функция ПолучитьИндексПиктограммыФайла(Знач РасширениеФайла) Экспорт
	
	Если ТипЗнч(РасширениеФайла) <> Тип("Строка")
		ИЛИ ПустаяСтрока(РасширениеФайла) Тогда
		Возврат 0;
	КонецЕсли;
	
	РасширениеФайла = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(РасширениеФайла);
	
	Расширение = "." + НРег(РасширениеФайла) + ";";
	
	Если СтрНайти(".dt;.1cd;.cf;.cfu;", Расширение) <> 0 Тогда
		Возврат 6; // Файлы 1С.
		
	ИначеЕсли Расширение = ".mxl;" Тогда
		Возврат 8; // Табличный Файл.
		
	ИначеЕсли СтрНайти(".txt;.log;.ini;", Расширение) <> 0 Тогда
		Возврат 10; // Текстовый Файл.
		
	ИначеЕсли Расширение = ".epf;" Тогда
		Возврат 12; // Внешние обработки.
		
	ИначеЕсли СтрНайти(".ico;.wmf;.emf;",Расширение) <> 0 Тогда
		Возврат 14; // Картинки.
		
	ИначеЕсли СтрНайти(".htm;.html;.url;.mht;.mhtml;",Расширение) <> 0 Тогда
		Возврат 16; // HTML.
		
	ИначеЕсли СтрНайти(".doc;.dot;.rtf;",Расширение) <> 0 Тогда
		Возврат 18; // Файл Microsoft Word.
		
	ИначеЕсли СтрНайти(".xls;.xlw;",Расширение) <> 0 Тогда
		Возврат 20; // Файл Microsoft Excel.
		
	ИначеЕсли СтрНайти(".ppt;.pps;",Расширение) <> 0 Тогда
		Возврат 22; // Файл Microsoft PowerPoint.
		
	ИначеЕсли СтрНайти(".vsd;",Расширение) <> 0 Тогда
		Возврат 24; // Файл Microsoft Visio.
		
	ИначеЕсли СтрНайти(".mpp;",Расширение) <> 0 Тогда
		Возврат 26; // Файл Microsoft Visio.
		
	ИначеЕсли СтрНайти(".mdb;.adp;.mda;.mde;.ade;",Расширение) <> 0 Тогда
		Возврат 28; // База данных Microsoft Access.
		
	ИначеЕсли СтрНайти(".xml;",Расширение) <> 0 Тогда
		Возврат 30; // xml.
		
	ИначеЕсли СтрНайти(".msg;.eml;",Расширение) <> 0 Тогда
		Возврат 32; // Письмо электронной почты.
		
	ИначеЕсли СтрНайти(".zip;.rar;.arj;.cab;.lzh;.ace;",Расширение) <> 0 Тогда
		Возврат 34; // Архивы.
		
	ИначеЕсли СтрНайти(".exe;.com;.bat;.cmd;",Расширение) <> 0 Тогда
		Возврат 36; // Исполняемые файлы.
		
	ИначеЕсли СтрНайти(".grs;",Расширение) <> 0 Тогда
		Возврат 38; // Графическая схема.
		
	ИначеЕсли СтрНайти(".geo;",Расширение) <> 0 Тогда
		Возврат 40; // Географическая схема.
		
	ИначеЕсли СтрНайти(".jpg;.jpeg;.jp2;.jpe;",Расширение) <> 0 Тогда
		Возврат 42; // jpg.
		
	ИначеЕсли СтрНайти(".bmp;.dib;",Расширение) <> 0 Тогда
		Возврат 44; // bmp.
		
	ИначеЕсли СтрНайти(".tif;.tiff;",Расширение) <> 0 Тогда
		Возврат 46; // tif.
		
	ИначеЕсли СтрНайти(".gif;",Расширение) <> 0 Тогда
		Возврат 48; // gif.
		
	ИначеЕсли СтрНайти(".png;",Расширение) <> 0 Тогда
		Возврат 50; // png.
		
	ИначеЕсли СтрНайти(".pdf;",Расширение) <> 0 Тогда
		Возврат 52; // pdf.
		
	ИначеЕсли СтрНайти(".odt;",Расширение) <> 0 Тогда
		Возврат 54; // Open Office writer.
		
	ИначеЕсли СтрНайти(".odf;",Расширение) <> 0 Тогда
		Возврат 56; // Open Office math.
		
	ИначеЕсли СтрНайти(".odp;",Расширение) <> 0 Тогда
		Возврат 58; // Open Office Impress.
		
	ИначеЕсли СтрНайти(".odg;",Расширение) <> 0 Тогда
		Возврат 60; // Open Office draw.
		
	ИначеЕсли СтрНайти(".ods;",Расширение) <> 0 Тогда
		Возврат 62; // Open Office calc.
		
	ИначеЕсли СтрНайти(".mp3;",Расширение) <> 0 Тогда
		Возврат 64;
		
	ИначеЕсли СтрНайти(".erf;",Расширение) <> 0 Тогда
		Возврат 66; // Внешние отчеты.
		
	ИначеЕсли СтрНайти(".docx;",Расширение) <> 0 Тогда
		Возврат 68; // Файл Microsoft Word docx.
		
	ИначеЕсли СтрНайти(".xlsx;",Расширение) <> 0 Тогда
		Возврат 70; // Файл Microsoft Excel xlsx.
		
	ИначеЕсли СтрНайти(".pptx;",Расширение) <> 0 Тогда
		Возврат 72; // Файл Microsoft PowerPoint pptx.
		
	ИначеЕсли СтрНайти(".p7s;",Расширение) <> 0 Тогда
		Возврат 74; // Файл подписи.
		
	ИначеЕсли СтрНайти(".p7m;",Расширение) <> 0 Тогда
		Возврат 76; // зашифрованное сообщение.
	Иначе
		Возврат 4;
	КонецЕсли;
	
КонецФункции

// Сортирует массив структур по полю Дата - на сервере, т.к. на тонком клиенте нет ТаблицаЗначений
Процедура СортироватьМассивСтруктур(МассивСтруктур) Экспорт
	
	ТаблицаФайлов = Новый ТаблицаЗначений;
	ТаблицаФайлов.Колонки.Добавить("Путь");
	ТаблицаФайлов.Колонки.Добавить("Версия");
	ТаблицаФайлов.Колонки.Добавить("Размер");
	
	ОписаниеТиповС = Новый ОписаниеТипов("Дата");
	ТаблицаФайлов.Колонки.Добавить("ДатаПомещенияВРабочийКаталог", ОписаниеТиповС);
	
	Для Каждого Строка из МассивСтруктур Цикл
		НоваяСтрока = ТаблицаФайлов.Добавить();
		НоваяСтрока.Путь = Строка.Путь;
		НоваяСтрока.Размер = Строка.Размер;
		НоваяСтрока.Версия = Строка.Версия;
		НоваяСтрока.ДатаПомещенияВРабочийКаталог = Строка.ДатаПомещенияВРабочийКаталог;
	КонецЦикла;
	
	// Сортировка по дате - в начале будут самые давно помещенные в рабочий каталог
	ТаблицаФайлов.Сортировать("ДатаПомещенияВРабочийКаталог Возр");  
	
	МассивСтруктурВозврат = Новый Массив;
	
	Для Каждого Строка из ТаблицаФайлов Цикл
		Запись = Новый Структура;
		Запись.Вставить("Путь", Строка.Путь);
		Запись.Вставить("Размер", Строка.Размер);
		Запись.Вставить("Версия", Строка.Версия);
		Запись.Вставить("ДатаПомещенияВРабочийКаталог", Строка.ДатаПомещенияВРабочийКаталог);
		МассивСтруктурВозврат.Добавить(Запись);
	КонецЦикла;			
	
	МассивСтруктур = МассивСтруктурВозврат;	
КонецПроцедуры // СортироватьМассивСтруктур()

Функция СпрашиватьРежимРедактированияПриОткрытииФайла()
	СпрашиватьРежимРедактированияПриОткрытииФайла = 
		ХранилищеОбщихНастроек.Загрузить("НастройкиОткрытияФайлов", "СпрашиватьРежимРедактированияПриОткрытииФайла");
	Если СпрашиватьРежимРедактированияПриОткрытииФайла = Неопределено Тогда
		СпрашиватьРежимРедактированияПриОткрытииФайла = Ложь;
		ХранилищеОбщихНастроек.Сохранить("НастройкиОткрытияФайлов", "СпрашиватьРежимРедактированияПриОткрытииФайла", СпрашиватьРежимРедактированияПриОткрытииФайла);
	КонецЕсли;
	
	Возврат СпрашиватьРежимРедактированияПриОткрытииФайла;
КонецФункции	
	
// Считаем ДействиеПоДвойномуЩелчкуМыши - если первый раз - поставим правильное значение
Функция ДействиеПоДвойномуЩелчкуМыши()
	КакОткрывать = ХранилищеОбщихНастроекЗагрузить("НастройкиОткрытияФайлов", "ДействиеПоДвойномуЩелчкуМыши");
	
	Если КакОткрывать = Неопределено Или КакОткрывать = Перечисления.ДействияСФайламиПоДвойномуЩелчку.ПустаяСсылка() Тогда
		КакОткрывать = Перечисления.ДействияСФайламиПоДвойномуЩелчку.ОткрыватьФайл;
		ХранилищеОбщихНастроекСохранить("НастройкиОткрытияФайлов", "ДействиеПоДвойномуЩелчкуМыши", КакОткрывать);
	КонецЕсли;
	
	Если КакОткрывать = Перечисления.ДействияСФайламиПоДвойномуЩелчку.ОткрыватьФайл Тогда
		Возврат 0;
	Иначе
		Возврат 1;
	КонецЕсли;
КонецФункции

// Функция возвращает количество Файлов, занятых текущим пользователем
// в разрезе владельца
Функция КоличествоЗанятыхФайлов(ВладелецФайла) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ КОЛИЧЕСТВО(Код) КАК Количество
		|ИЗ Справочник.Файлы
		|ГДЕ Редактирует = &Редактирует И ВладелецФайла = &Владелец";

	Запрос.УстановитьПараметр("Редактирует", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("Владелец", ВладелецФайла);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = Число(Выборка.Количество);
	
	Возврат Результат;
КонецФункции

// Возвращает структуру, содержащую различные персональные настройки
// по работе с файлами
Функция ПолучитьПерсональныеНастройкиРаботыСФайламиСервер() Экспорт
	Настройки = Новый Структура;
	
	КакОткрывать = ДействиеПоДвойномуЩелчкуМыши();	
	Настройки.Вставить("ДействиеПоДвойномуЩелчкуМыши", КакОткрывать);
	
	СпрашиватьРежимРедактированияПриОткрытииФайла = СпрашиватьРежимРедактированияПриОткрытииФайла();
	Настройки.Вставить("СпрашиватьРежимРедактированияПриОткрытииФайла", СпрашиватьРежимРедактированияПриОткрытииФайла);
	
	МаксимальныйРазмерРабочегоКаталога = ХранилищеОбщихНастроекЗагрузить("РабочийКаталог", "МаксимальныйРазмерРабочегоКаталога");
	Если МаксимальныйРазмерРабочегоКаталога = Неопределено Тогда
		МаксимальныйРазмерРабочегоКаталога = 100*1024*1024; // 100 мб		
		ХранилищеОбщихНастроекСохранить("РабочийКаталог", "МаксимальныйРазмерРабочегоКаталога", МаксимальныйРазмерРабочегоКаталога);
	КонецЕсли;
	Настройки.Вставить("МаксимальныйРазмерРабочегоКаталога", МаксимальныйРазмерРабочегоКаталога);

	ПутьКРабочемуКаталогу = ХранилищеОбщихНастроекЗагрузить("РабочийКаталог", "ПутьКРабочемуКаталогу");
	Настройки.Вставить("ПутьКРабочемуКаталогу", ПутьКРабочемуКаталогу);
	
	УдалятьФайлИзРабочегоКаталогаПриЗавершенииРедактирования = ХранилищеОбщихНастроекЗагрузить("РабочийКаталог", "УдалятьФайлИзРабочегоКаталогаПриЗавершенииРедактирования");
	Настройки.Вставить("УдалятьФайлИзРабочегоКаталогаПриЗавершенииРедактирования", УдалятьФайлИзРабочегоКаталогаПриЗавершенииРедактирования);
	
	РольДоступнаПолныеПрава = РольДоступна("Администратор");
	Настройки.Вставить("РольДоступнаПолныеПрава", РольДоступнаПолныеПрава);
	
	ИзвлекатьТекстыФайловНаСервере = Константы.ИзвлекатьТекстыФайловНаСервере.Получить();
	Настройки.Вставить("ИзвлекатьТекстыФайловНаСервере", ИзвлекатьТекстыФайловНаСервере);
	
	МаксимальныйРазмерФайла = Константы.МаксимальныйРазмерФайла.Получить();
	Если МаксимальныйРазмерФайла = Неопределено ИЛИ МаксимальныйРазмерФайла = 0 Тогда
		МаксимальныйРазмерФайла = 50*1024*1024; // 50 мб		
		Константы.МаксимальныйРазмерФайла.Установить(МаксимальныйРазмерФайла);
	КонецЕсли;
	Настройки.Вставить("МаксимальныйРазмерФайла", МаксимальныйРазмерФайла);
	
	ОткрыватьНачалоРаботы = ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы", "ОткрыватьНачалоРаботыПриЗапуске");
    Если ОткрыватьНачалоРаботы = Неопределено Тогда
		ОткрыватьНачалоРаботы = Истина;
 	КонецЕсли;
	Настройки.Вставить("ОткрыватьНачалоРаботы", ОткрыватьНачалоРаботы);
	
	Настройки.Вставить("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);	

	ПоказыватьПодсказкиПриРедактированииФайлов = ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы", "ПоказыватьПодсказкиПриРедактированииФайлов");
	Если ПоказыватьПодсказкиПриРедактированииФайлов = Неопределено Тогда
		ПоказыватьПодсказкиПриРедактированииФайлов = Истина;
		ХранилищеОбщихНастроекСохранить("НастройкиПрограммы", "ПоказыватьПодсказкиПриРедактированииФайлов", ПоказыватьПодсказкиПриРедактированииФайлов);
	КонецЕсли;
	Настройки.Вставить("ПоказыватьПодсказкиПриРедактированииФайлов", ПоказыватьПодсказкиПриРедактированииФайлов);

	Возврат Настройки;
КонецФункции
