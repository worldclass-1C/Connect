
Функция ПолучитьЗаявку(СтрокаСодержащаяНомерЗаявки) Экспорт
	
	Позиция	= Найти(СтрокаСодержащаяНомерЗаявки, "SC-");
	
	Если Позиция > 0 Тогда
		НомерЗаявки	= Сред(СтрокаСодержащаяНомерЗаявки, Позиция, Позиция + 9);
		Возврат Документы.ЗаявкаПользователя.НайтиПоНомеру(НомерЗаявки);		
	Иначе
		Возврат Документы.ЗаявкаПользователя.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции	
	
Функция ОтправлениеИнтернетПочты(ПараметрыСообщения) Экспорт
	
	// Описание параметров
	//ПараметрыСообщения = Новый Структура;
	//ПараметрыСообщения.Вставить("Текст",);
	//ПараметрыСообщения.Вставить("Тема",);
	//ПараметрыСообщения.Вставить("ТЗСписокПолучателей",);
	//ПараметрыСообщения.Вставить("ИмяОтправителя",);
	//ПараметрыСообщения.Вставить("HTML",);
	//ПараметрыСообщения.Вставить("ОтправлятьАттачи",);
	//ПараметрыСообщения.Вставить("ДокументСсылка",);
	
	таблицаСписокПолучателей = ПараметрыСообщения.ТЗСписокПолучателей;
	
	//Отбор = Новый Структура("СоздаватьЗадачу",Истина);
	//МассивЗадач = таблицаСписокПолучателей.НайтиСтроки(Отбор);
	//Если МассивЗадач.Количество() <> 0 Тогда
	//	Попытка
	//		Outlook = Новый COMОбъект("Outlook.Application");
	//		Задача = Outlook.CreateItem(3);
	//		Задача.Subject = ПараметрыСообщения.Тема;
	//		Задача.StartDate = ТекущаяДата();
	//		Задача.Body = ПараметрыСообщения.Текст;
	//		Задача.Recipients.Add(МассивЗадач.Получатель);
	//		Задача.Status = 0;
	//		Задача.Display();
	//		Задача.Importance = 2;
	//		Задача.ReminderSet = 1;
	//		Задача.ReminderTime = "" +  ТекущаяДата() + " 9:00:00";
	//		Задача.Save();
	//	Исключение
	//		ЗаписьЖурналаРегистрации("Не удалось создать объект Outlook.Application", УровеньЖурналаРегистрации.Информация, , , ОписаниеОшибки());
	//	КонецПопытки;
	//КонецЕсли;
	
	таблицаСписокПолучателей.Свернуть("Получатель");
	СписокПолучателей = таблицаСписокПолучателей.ВыгрузитьКолонку("Получатель");
	
	УдалосьОтправить =  Истина;	
	
	Сообщение = Новый ИнтернетПочтовоеСообщение;
	Если ПараметрыСообщения.HTML Тогда 
		Сообщение.Тексты.Добавить(ПараметрыСообщения.Текст,ТипТекстаПочтовогоСообщения.HTML);
	Иначе
		Сообщение.Тексты.Добавить(ПараметрыСообщения.Текст);
	КонецЕсли;
	Сообщение.ОбработатьТексты();
	Сообщение.Отправитель = "Send1CMail_05@wclass.ru";
	Сообщение.Тема = ПараметрыСообщения.Тема;
	Для Каждого СтрокаМассива Из СписокПолучателей Цикл
		Сообщение.Получатели.Добавить(СтрокаМассива);
	КонецЦикла;	
	Сообщение.ИмяОтправителя = ПараметрыСообщения.ИмяОтправителя;
	
	Если ПараметрыСообщения.ОтправлятьАттачи Тогда
		Для каждого СтрокаАттач Из ПараметрыСообщения.ДокументСсылка.ВложенныеФайлы Цикл
			Сообщение.Вложения.Добавить(СтрокаАттач.Хранилище.Получить());
		КонецЦикла; 
	КонецЕсли;
	
	Профиль = Новый ИнтернетПочтовыйПрофиль;
	Профиль.АдресСервераSMTP = "cas.wcfc.local";         
	Профиль.АутентификацияSMTP = СпособSMTPАутентификации.БезАутентификации;
	Профиль.ПортSMTP = 25;
	
	Почта = Новый ИнтернетПочта;
	Почта.Подключиться(Профиль);
	Попытка
		Почта.Послать(Сообщение);
	Исключение
		ЗаписьЖурналаРегистрации("Не удалось отправить эл.почту", УровеньЖурналаРегистрации.Информация, , , ОписаниеОшибки());
		УдалосьОтправить = Ложь;
	КонецПопытки;
	Возврат УдалосьОтправить;
	
КонецФункции

Функция ПринятьПочту() Экспорт
	
	УдалосьПринять =  Истина;	
	
	Профиль = Новый ИнтернетПочтовыйПрофиль;
	
	Профиль.АдресСервераIMAP		= Константы.АдресСервераPOP3.Получить();         
	Профиль.ПарольIMAP				= Константы.Пароль.Получить();
	Профиль.ПортIMAP				= "143";
	Профиль.ПользовательIMAP		= Константы.Пользователь.Получить();
	Профиль.Таймаут					= Константы.Таймаут.Получить();
	Профиль.ИспользоватьSSLIMAP		= Истина;
	
	Почта = Новый ИнтернетПочта;
	Попытка
		Почта.Подключиться(Профиль, ПротоколИнтернетПочты.IMAP);
	Исключение
		Сообщить("Ошибка подключения к почте",СтатусСообщения.Важное);
		Сообщить(ОписаниеОшибки(),СтатусСообщения.Важное);
	КонецПопытки;
	
	Выборка					= Почта.Выбрать(Истина);
	Индекс					= 1;
	МассивДляУдаления		= Новый Массив;
			
	Для Каждого Письмо Из Выборка Цикл		
		
		Если Найти(НРег(Письмо.Отправитель.Адрес), "postmaster") > 0 Тогда
			МассивДляУдаления.Добавить(Письмо);
			Продолжить;
		КонецЕсли;
		
		
		СтруктураЗаказчик	= Новый Структура;			
		СтруктураЗаказчик.Вставить("ЭлектроннаяПочта", Письмо.Отправитель.Адрес);
		СтруктураЗаказчик.Вставить("Наименование", Письмо.ИмяОтправителя);
		
		СтруктураОтвета	= Новый Структура;
		СтруктураОтвета.Вставить("Заказчик", СтруктураЗаказчик);
		СтруктураОтвета.Вставить("ЗадачаКратко", Письмо.Тема);
		
		ЭлектроннаяПочта.ОтправитьПисьмоПоЗаявкеВФоне(СтруктураОтвета, "АвтоОтклонениеЗаявки", "Отправить письмо по заявке в фоне");
		
		//ТекстСообщения	= "";
		//СотрудникСсылка	= Справочники.Пользователи.НайтиПоРеквизиту("ЭлектроннаяПочта", Письмо.Отправитель.Адрес);
								
		//Если СотрудникСсылка.Пустая() Тогда
		//									
		//	СтруктураЗаказчик	= Новый Структура;			
		//	СтруктураЗаказчик.Вставить("ЭлектроннаяПочта", Письмо.Отправитель.Адрес);
		//	СтруктураЗаказчик.Вставить("Наименование", Письмо.ИмяОтправителя);
		//	
		//	СтруктураОтвета	= Новый Структура;
		//	СтруктураОтвета.Вставить("Заказчик", СтруктураЗаказчик);
		//	СтруктураОтвета.Вставить("ЗадачаКратко", Письмо.Тема);
		//	
		//	ЭлектроннаяПочта.ОтправитьПисьмоПоЗаявкеВФоне(СтруктураОтвета, "АвтоОтклонениеЗаявки", "Отправить письмо по заявке в фоне");
		//	
		//Иначе	
		//	
		//	//Надо проверить, что уже существует заявка и новую не создавать.
		//	Заявка	= ПолучитьЗаявку(Письмо.Тема);
		//	
		//	Если Заявка.Пустая() Тогда
		//		
		//		ФД	= Новый ФорматированныйДокумент;
		//		
		//		Если Письмо.Тексты.Количество() > 0 Тогда
		//			ТекстСообщения 	= Письмо.Тексты[0].Текст;				
		//		КонецЕсли;
		//		
		//		Заявка						= Документы.ЗаявкаПользователя.СоздатьДокумент();
		//		Заявка.Дата 				= ТекущаяДата();
		//		Заявка.ЗадачаКратко 		= ?(Письмо.Тема = "", "!!! Тема не заполнена", Письмо.Тема);
		//		Заявка.ВидДеятельности 		= Справочники.ВидыДеятельности.Консультация;
		//		Заявка.Заказчик 			= СотрудникСсылка;
		//		Заявка.БизнесНаправление    = ?(СотрудникСсылка.Пустая(), Перечисления.БизнесНаправления.ПустаяСсылка(), СотрудникСсылка.Родитель.БизнесНаправление);				
		//		Заявка.Исполнитель 			= Справочники.Пользователи.ДляНовыхЗаявок;
		//		
		//		Если Письмо.Вложения.Количество() > 0 Тогда
		//			Для Каждого Вложение Из Письмо.Вложения Цикл
		//				
		//				Если ТипЗнч(Вложение.Данные) = Тип("ИнтернетПочтовоеСообщение") Тогда
		//				ИначеЕсли ЗначениеЗаполнено(Вложение.Идентификатор) И ТипЗнч(Вложение.Данные) = Тип("ДвоичныеДанные") Тогда //Это вложенная картинка
		//					ИмяНовогоФайла = "data:image/png;base64," + Base64Строка(Вложение.Данные);
		//					ТекстСообщения	= СтрЗаменить(ТекстСообщения, "cid:" + Вложение.Идентификатор, ИмяНовогоФайла);
		//				Иначе	
		//					НоваяСтрока = Заявка.ВложенныеФайлы.Добавить();		
		//					НоваяСтрока.ИмяФайла = Вложение.Имя;
		//					НоваяСтрока.Хранилище =  Новый ХранилищеЗначения(Вложение.Данные, Новый СжатиеДанных(9));					
		//				КонецЕсли;
		//				
		//			КонецЦикла; 
		//		КонецЕсли;
		//		
		//		Заявка.Записать(РежимЗаписиДокумента.Проведение);
		//		
		//		//Добавляем комментарий к заявке			
		//		КомментарийОбъект	= Справочники.КомментарииЗаявок.СоздатьЭлемент();
		//		КомментарийОбъект.Заявка			= Заявка.Ссылка;
		//		КомментарийОбъект.ПорядковыйНомер	= 1;			
		//		КомментарийОбъект.АвторИзменения	= СотрудникСсылка;
		//		КомментарийОбъект.ДатаИзменения		= ТекущаяДатаСеанса();
		//		КомментарийОбъект.ОписаниеHTML		= РаботаСHTML.ПолучитьТелоHTML(ТекстСообщения);
		//		КомментарийОбъект.Записать();
		//						
		//	Иначе //Заявка по данному письму существует, надо прибавить текст к существующей заявке
		//		
		//		Если Письмо.Тексты.Количество() > 0 Тогда
		//			ТекстСообщения 	= Письмо.Тексты[0].Текст;				
		//		КонецЕсли;
		//		
		//		ЗаявкаОбъект			= Неопределено;
		//						
		//		Если Письмо.Вложения.Количество() > 0 Тогда
		//			Для Каждого Вложение Из Письмо.Вложения Цикл
		//				
		//				Если ТипЗнч(Вложение.Данные) = Тип("ИнтернетПочтовоеСообщение") Тогда
		//				ИначеЕсли ЗначениеЗаполнено(Вложение.Идентификатор) И ТипЗнч(Вложение.Данные) = Тип("ДвоичныеДанные") Тогда //Это вложенная картинка
		//					ИмяНовогоФайла = "data:image/png;base64," + Base64Строка(Вложение.Данные);
		//					ТекстСообщения	= СтрЗаменить(ТекстСообщения, "cid:" + Вложение.Идентификатор, ИмяНовогоФайла);
		//				Иначе	
		//					Если ЗаявкаОбъект = Неопределено Тогда
		//						ЗаявкаОбъект	= Заявка.ПолучитьОбъект();
		//					КонецЕсли; 
		//					НайденаяСтрока	= ЗаявкаОбъект.ВложенныеФайлы.Найти(Вложение.Имя, "ИмяФайла");
		//					Если НайденаяСтрока = Неопределено Тогда							
		//						НоваяСтрока = ЗаявкаОбъект.ВложенныеФайлы.Добавить();		
		//						НоваяСтрока.ИмяФайла = Вложение.Имя;
		//						НоваяСтрока.Хранилище =  Новый ХранилищеЗначения(Вложение.Данные, Новый СжатиеДанных(9));					
		//					КонецЕсли;
		//				КонецЕсли;
		//				
		//			КонецЦикла; 
		//		КонецЕсли;
		//		
		//		Если ЗаявкаОбъект <> Неопределено Тогда					
		//			ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Проведение);				
		//		КонецЕсли;
		//		
		//		Если ТекстСообщения <> "" Тогда					
		//			СтруктураПараметров	= Новый Структура;
		//			СтруктураПараметров.Вставить("Заявка", Заявка);
		//			СтруктураПараметров.Вставить("Комментарий", Справочники.КомментарииЗаявок.ПустаяСсылка());					
		//			СтруктураПараметров.Вставить("АдресатВопроса", Справочники.Пользователи.ПустаяСсылка());
		//			СтруктураПараметров.Вставить("ДляВнутреннегоИспользования", Ложь);
		//			СтруктураПараметров.Вставить("ТекущийПользователь", СотрудникСсылка);
		//			СтруктураПараметров.Вставить("ТекстHTML", РаботаСHTML.ПолучитьТелоHTMLИзОтвета(ТекстСообщения));
		//			СтруктураПараметров.Вставить("Вложения", Новый Массив);
		//			//СтруктураПараметров.Вставить("Основание", 0);
		//			СтруктураПараметров.Вставить("Основание", 9999);
		//			Справочники.КомментарииЗаявок.ДобавитьОбновитьКомментарий(СтруктураПараметров);
		//		КонецЕсли;			
		//		
		//	КонецЕсли;
		//КонецЕсли;
		
		МассивДляУдаления.Добавить(Письмо);
		
	КонецЦикла;
	
	Если МассивДляУдаления.Количество() <> 0 Тогда
		Почта.УдалитьСообщения(МассивДляУдаления);
		Почта.ОчиститьУдаленныеСообщения();
	КонецЕсли;
		
	Почта.Отключиться();
	
	Возврат УдалосьПринять;
	
КонецФункции

Процедура ОтправитьПисьмо(Почта, СписокПолучателей, ТемаСообщения, Текст, Вложения = Неопределено, Картинки = Неопределено, Наблюдатели = Неопределено, ТипТекстаПочтовогоСообщения, Отправитель, ИмяОтправителя) Экспорт
			
	Сообщение = Новый ИнтернетПочтовоеСообщение;
	
	Если Картинки <> Неопределено Тогда
		Для Каждого Картинка Из Картинки Цикл
			Текст						= СтрЗаменить(Текст, Картинка.Ключ, "cid:" + Картинка.Ключ);
			ДанныеВложения				= Картинка.Значение.ПолучитьДвоичныеДанные(); 
			Изображение					= Сообщение.Вложения.Добавить(ДанныеВложения);
			Изображение.Идентификатор	= Картинка.Ключ;			
		КонецЦикла;
	КонецЕсли;
	
	Если Вложения <> Неопределено Тогда
		Для Каждого Вложение Из Вложения Цикл
			ДанныеВложения					= Вложение.Хранилище.Получить(); 
			ВложениеСообщения				= Сообщение.Вложения.Добавить(ДанныеВложения);
			ВложениеСообщения.Идентификатор	= Вложение.ИмяФайла;			
			ВложениеСообщения.Имя			= Вложение.ИмяФайла;			
		КонецЦикла;
	КонецЕсли;
		
	Сообщение.Тексты.Добавить(Текст, ТипТекстаПочтовогоСообщения);
		
	Сообщение.ОбработатьТексты();
	Сообщение.Отправитель	= Отправитель;
	Сообщение.Тема 			= ТемаСообщения;
	
	Для Каждого СтрокаМассива Из СписокПолучателей Цикл
		Сообщение.Получатели.Добавить(СтрокаМассива);
	КонецЦикла;
	
	Если Наблюдатели <> Неопределено Тогда
		Для Каждого СтрокаТЧ Из Наблюдатели Цикл
			Если ЗначениеЗаполнено(СтрокаТЧ.Наблюдатель.ЭлектроннаяПочта) И Не СтрокаТЧ.Наблюдатель.НеОтправлятьОповещенияНаПочту Тогда
				Сообщение.Копии.Добавить(СтрокаТЧ.Наблюдатель.ЭлектроннаяПочта);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Сообщение.ИмяОтправителя = ИмяОтправителя;
	
	Попытка
		Почта.Послать(Сообщение);
	Исключение
		ЗаписьЖурналаРегистрации("Не удалось отправить эл.почту", УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры	

Процедура ОтправитьПисьмоПоЗаявкеВФоне(Заявка, Событие, Наименование = "", СтруктураОповещения = Неопределено, АдресатВопроса = Неопределено) Экспорт 
	
	ПередаваемыеПараметры	= Новый Массив;
	ПередаваемыеПараметры.Добавить(Заявка);
	ПередаваемыеПараметры.Добавить(Событие);
	ПередаваемыеПараметры.Добавить(СтруктураОповещения);
	ПередаваемыеПараметры.Добавить(АдресатВопроса);
	ФоновыеЗадания.Выполнить("ЭлектроннаяПочта.ОтправитьПисьмоПоЗаявке", ПередаваемыеПараметры, Новый УникальныйИдентификатор, Наименование);
	
КонецПроцедуры

Процедура ОтправитьПисьмоПоЗаявке(Заявка, Событие, СтруктураОповещения = Неопределено, АдресатВопроса = Неопределено, ДляВнутреннегоИспользования = Ложь) Экспорт 
	
	Профиль = Новый ИнтернетПочтовыйПрофиль;
	
	Профиль.АдресСервераIMAP		= Константы.АдресСервераPOP3.Получить();         
	Профиль.ПарольIMAP				= Константы.Пароль.Получить();
	Профиль.ПортIMAP				= "143";
	Профиль.ПользовательIMAP		= Константы.Пользователь.Получить();
	Профиль.Таймаут					= Константы.Таймаут.Получить();
	Профиль.ИспользоватьSSLIMAP		= Истина;
	
	Профиль.АдресСервераSMTP		= Константы.АдресСервераSMTP.Получить();         
	Профиль.АутентификацияSMTP		= СпособSMTPАутентификации.БезАутентификации;
	Профиль.ПортSMTP				= Константы.ПортSMTP.Получить();
	
	Почта = Новый ИнтернетПочта;
	Попытка
		Почта.Подключиться(Профиль, ПротоколИнтернетПочты.IMAP);
	Исключение
		Сообщить("Ошибка подключения к почте",СтатусСообщения.Важное);
		Сообщить(ОписаниеОшибки(),СтатусСообщения.Важное);
	КонецПопытки;
	
	Отправитель		= Константы.Отправитель.Получить();
	ИмяОтправителя	= Константы.ИмяОтправителя.Получить();	
	
	ТЗСписокПолучателей		= Новый ТаблицаЗначений;
	ТЗСписокПолучателей.Колонки.Добавить("Получатель");		
	
	Приветствие1	= "Уважаемый(-ая) "; 
	
	ТекущийЧас		= Час(ТекущаяДатаСеанса());		
	
	Если ТекущийЧас <= 10 Тогда
		Приветствие2	= ", доброе утро.";	
	ИначеЕсли ТекущийЧас >= 17 Тогда
		Приветствие2	= ", добрый вечер.";
	Иначе 
		Приветствие2	= ", добрый день.";
	КонецЕсли;
	
	пЗапрос	= Новый Запрос;
	
	Если Событие = "АвтоОтклонениеЗаявки" Тогда
				
		СписокПолучателей	= Новый Массив;
		
		Если ЗначениеЗаполнено(Заявка.Заказчик.ЭлектроннаяПочта) Тогда
			
			ТемаСообщения		= "Ваша заявка отклонена";
			Приветствие			= Приветствие1 + Заявка.Заказчик.Наименование + Приветствие2;
			//Текст				= ПодготовитьТекстПисьма(Приветствие, "Для формирования заявки обратитесь к своему руководителю", Заявка.ЗадачаКратко);
			Текст				= ПодготовитьТекстПисьма(Приветствие, "Все обращения регистрируются только в системе учета заявок", Заявка.ЗадачаКратко);
			
			СписокПолучателей.Добавить(Заявка.Заказчик.ЭлектроннаяПочта);
			
			ОтправитьПисьмо(Почта, СписокПолучателей, ТемаСообщения, Текст, , , , ТипТекстаПочтовогоСообщения.HTML, Отправитель, ИмяОтправителя);
			
		КонецЕсли;
		
		
	ИначеЕсли Событие = "ЗаявкаЗарегистированна" Тогда
		
		пЗапрос.Текст	= "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		             	  |	ЗаявкаПользователя.Заказчик.ЭлектроннаяПочта КАК ЗаказчикЭлектроннаяПочта,
		             	  |	ЗаявкаПользователя.Номер КАК ЗаявкаПользователяНомер,
		             	  |	ЗаявкаПользователя.ЗадачаКратко КАК Тема,
		             	  |	ЗаявкаПользователя.Дата КАК Дата,
		             	  |	ЗаявкаПользователя.Заказчик.Наименование КАК ЗаказчикНаименование
		             	  |ИЗ
		             	  |	Документ.ЗаявкаПользователя КАК ЗаявкаПользователя
		             	  |ГДЕ
		             	  |	ЗаявкаПользователя.Ссылка = &Заявка";
		
		пЗапрос.УстановитьПараметр("Заявка", Заявка);
		
		РезультатЗапроса	= пЗапрос.Выполнить();
		
		Выборка	= РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СписокПолучателей	= Новый Массив;
			
			Если ЗначениеЗаполнено(Выборка.ЗаказчикЭлектроннаяПочта) Тогда
				
				ТемаСообщения		= "Зарегистрирована заявка № " + Выборка.ЗаявкаПользователяНомер + " от "  + Формат(Выборка.Дата, "ДЛФ=Д") + " ";
				Приветствие			= Приветствие1 + Выборка.ЗаказчикНаименование + Приветствие2;
			    Текст				= ПодготовитьТекстПисьма(Приветствие, "Ваша заявка зарегистрирована", Выборка.Тема);
				
				СписокПолучателей.Добавить(Выборка.ЗаказчикЭлектроннаяПочта);
				
				ОтправитьПисьмо(Почта, СписокПолучателей, ТемаСообщения, Текст, , , Заявка.Наблюдатели, ТипТекстаПочтовогоСообщения.HTML, Отправитель, ИмяОтправителя);
				
			КонецЕсли;
		
		КонецЦикла; 
		
	ИначеЕсли Событие = "ЗаявкаВыполнена" Тогда
		
		пЗапрос.Текст	= "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		             	  |	ЗаявкаПользователя.Заказчик.ЭлектроннаяПочта КАК ЗаказчикЭлектроннаяПочта,
		             	  |	ЗаявкаПользователя.Номер КАК ЗаявкаПользователяНомер,
		             	  |	ЗаявкаПользователя.Дата КАК Дата,
		             	  |	ЗаявкаПользователя.Релиз КАК Релиз,
		             	  |	ЗаявкаПользователя.Релиз.ДатаВыхода КАК РелизДатаВыхода
		             	  |ИЗ
		             	  |	Документ.ЗаявкаПользователя КАК ЗаявкаПользователя
		             	  |ГДЕ
		             	  |	ЗаявкаПользователя.Ссылка = &Заявка";
		
		пЗапрос.УстановитьПараметр("Заявка", Заявка);		
		                                                         
		РезультатЗапроса	= пЗапрос.Выполнить();
		
		Выборка	= РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СписокПолучателей	= Новый Массив;
			
			Если ЗначениеЗаполнено(Выборка.ЗаказчикЭлектроннаяПочта) Тогда
				
				ТемаСообщения	= "Выполнена заявка № " + Выборка.ЗаявкаПользователяНомер + " от "  + Формат(Выборка.Дата, "ДЛФ=Д") + ?(ЗначениеЗаполнено(Выборка.Релиз), ", заявка попадет в релиз " + Выборка.Релиз + " от "  + Формат(Выборка.РелизДатаВыхода, "ДЛФ=Д"), "");
								
				ФД				= Новый ФорматированныйДокумент;
				ФД.УстановитьHTML(РаботаСHTML.ПолучитьHTMLИзЗаявки(Заявка).ОписаниеHTML, Новый Структура);
				Текст			= "";
				Картинки		= Новый Структура;
				ФД.ПолучитьHTML(Текст, Картинки);				
				
				СписокПолучателей.Добавить(Выборка.ЗаказчикЭлектроннаяПочта);
				
				ОтправитьПисьмо(Почта, СписокПолучателей, ТемаСообщения, Текст, Заявка.ВложенныеФайлы, Картинки, Заявка.Наблюдатели, ТипТекстаПочтовогоСообщения.HTML, Отправитель, ИмяОтправителя);
				
			КонецЕсли;
		
		КонецЦикла;
		
	ИначеЕсли Событие = "ЗаявкаОтклонена" Тогда
		
		пЗапрос.Текст	= "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		             	  |	ЗаявкаПользователя.Заказчик.ЭлектроннаяПочта КАК ЗаказчикЭлектроннаяПочта,
		             	  |	ЗаявкаПользователя.Номер КАК ЗаявкаПользователяНомер,
		             	  |	ЗаявкаПользователя.ЗадачаКратко КАК Тема,
		             	  |	ЗаявкаПользователя.Дата КАК Дата,
		             	  |	ЗаявкаПользователя.Заказчик.Наименование КАК ЗаказчикНаименование,
		             	  |	ЗаявкаПользователя.Описание КАК Описание
		             	  |ИЗ
		             	  |	Документ.ЗаявкаПользователя КАК ЗаявкаПользователя
		             	  |ГДЕ
		             	  |	ЗаявкаПользователя.Ссылка = &Заявка";
		
		пЗапрос.УстановитьПараметр("Заявка", Заявка);
		
		РезультатЗапроса	= пЗапрос.Выполнить();
		
		Выборка	= РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СписокПолучателей	= Новый Массив;
			
			Если ЗначениеЗаполнено(Выборка.ЗаказчикЭлектроннаяПочта) Тогда
				
				ТемаСообщения	= "Отклонена заявка № " + Выборка.ЗаявкаПользователяНомер + " от "  + Формат(Выборка.Дата, "ДЛФ=Д");
								
				ФД				= Новый ФорматированныйДокумент;
				ФД.УстановитьHTML(РаботаСHTML.ПолучитьHTMLИзЗаявки(Заявка).ОписаниеHTML, Новый Структура);
				Текст			= "";
				Картинки		= Новый Структура;
				ФД.ПолучитьHTML(Текст, Картинки);				
				
				СписокПолучателей.Добавить(Выборка.ЗаказчикЭлектроннаяПочта);
				
				ОтправитьПисьмо(Почта, СписокПолучателей, ТемаСообщения, Текст, Заявка.ВложенныеФайлы, Картинки, Заявка.Наблюдатели, ТипТекстаПочтовогоСообщения.HTML, Отправитель, ИмяОтправителя);
				
			КонецЕсли;
		
		КонецЦикла;	
		
	ИначеЕсли Событие = "ЗадатьВопрос" Тогда
		
		СписокПолучателей	= Новый Массив;
		
		Если ЗначениеЗаполнено(АдресатВопроса.ЭлектроннаяПочта) Тогда
			
			ТемаСообщения	= "Вопрос по заявке № " + Заявка.Номер + " от "  + Формат(Заявка.Дата, "ДЛФ=Д") + " ";				
			
			ФД				= Новый ФорматированныйДокумент;
			Если ДляВнутреннегоИспользования Тогда
				ФД.УстановитьHTML(РаботаСHTML.ПолучитьHTMLИзЗаявки(Заявка, Истина).ОписаниеРазработчикаHTML, Новый Структура);
			Иначе
				ФД.УстановитьHTML(РаботаСHTML.ПолучитьHTMLИзЗаявки(Заявка, Истина).ОписаниеHTML, Новый Структура);
			КонецЕсли;
			Текст			= "";
			Картинки		= Новый Структура;
			ФД.ПолучитьHTML(Текст, Картинки);				
			
			СписокПолучателей.Добавить(АдресатВопроса.ЭлектроннаяПочта);
			
			//ОтправитьПисьмо(Почта, СписокПолучателей, ТемаСообщения, Текст, Заявка.ВложенныеФайлы, Картинки, Заявка.Наблюдатели, ТипТекстаПочтовогоСообщения.HTML, Отправитель, ИмяОтправителя);
			ОтправитьПисьмо(Почта, СписокПолучателей, ТемаСообщения, Текст, Заявка.ВложенныеФайлы, Картинки, , ТипТекстаПочтовогоСообщения.HTML, Отправитель, ИмяОтправителя); //не передавать наблюдателей, т.к для них рассылка уже определена SC-079844
		КонецЕсли;		
		
	ИначеЕсли Событие = "ОтправитьОповещениеНаПочту" Тогда
				
		СписокПолучателей	= Новый Массив;
		
		ПользовательЭлектроннаяПочта	= СтруктураОповещения.Пользователь.ЭлектроннаяПочта;
		
		Если ЗначениеЗаполнено(ПользовательЭлектроннаяПочта) Тогда
						
			ТемаСообщения		= СтруктураОповещения.Текст + " " + СтруктураОповещения.Пояснение;
			Приветствие			= Приветствие1 + СтруктураОповещения.Пользователь.Наименование + Приветствие2;
			Текст				= ПодготовитьТекстПисьма(Приветствие, СтруктураОповещения.Текст, СтруктураОповещения.Пояснение);
			
			СписокПолучателей.Добавить(ПользовательЭлектроннаяПочта);
			
			ОтправитьПисьмо(Почта, СписокПолучателей, ТемаСообщения, Текст, , , Заявка.Наблюдатели, ТипТекстаПочтовогоСообщения.HTML, Отправитель, ИмяОтправителя);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьТекстПисьма(Приветствие, Текст, ТемаЗаявки, ОписаниеЗаявки = "", НавигационнаяСсылка = "", Исполнитель = "", СрокВыполнения = "")
	
	Возврат Приветствие + "<br><br>
						|" + Текст + "<br><br>
						|Тема заявки:<br>						
						|" + ТемаЗаявки + "<br>" + 
						?(ОписаниеЗаявки = "", "","Описание:<br>" + ОписаниеЗаявки + "<br>") +
						?(Исполнитель = "", ""," Исполнитель: " + Исполнитель + "<br>Срок выполнения: " + СрокВыполнения + "<br>") + " 
						|----------------------------------------<br>
						|НА ДАННОЕ ПИСЬМО ОТВЕЧАТЬ НЕ НАДО,<br>" + 						
						?(НавигационнаяСсылка = "", "","Получить информацию о заявке можно по <a href=""e1cb://" + НавигационнаяСсылка + """>Ссылке</a><br>") + "
						|<br>";						
	
КонецФункции
