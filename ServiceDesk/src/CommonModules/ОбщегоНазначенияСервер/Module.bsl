
// Возвращает структуру параметров, необходимых для инициализации
// конфигурации на клиенте.
// 
Функция ПараметрыРаботыКлиента() Экспорт
	
	Параметры = Новый Структура();
	
	// СтандартныеПодсистемы
	Параметры.Вставить("АвторизованныйПользователь", ПараметрыСеанса.ТекущийПользователь);
	Параметры.Вставить("ПодробнаяИнформация", Метаданные.КраткаяИнформация + " :" + Метаданные.Версия);
	
	Возврат Новый ФиксированнаяСтруктура(Параметры);
	
КонецФункции

// Определяет режим эксплуатации информационной базы файловый (Истина) или серверный (Ложь).
// При проверке используется СтрокаСоединенияИнформационнойБазы, которую можно указать явно.
//
// Параметры:
//  СтрокаСоединенияИнформационнойБазы - Строка - параметр используется, если
//                 нужно проверить строку соединения не текущей информационной базы.
//
// Возвращаемое значение:
//  Булево.
//
Функция ИнформационнаяБазаФайловая(Знач СтрокаСоединенияИнформационнойБазы = "") Экспорт
			
	Если ПустаяСтрока(СтрокаСоединенияИнформационнойБазы) Тогда
		СтрокаСоединенияИнформационнойБазы =  СтрокаСоединенияИнформационнойБазы();
	КонецЕсли;
	Возврат Найти(Врег(СтрокаСоединенияИнформационнойБазы), "FILE=") = 1;
	
КонецФункции 

// Возвращает структуру параметров, необходимых для работы клиентского кода
// при запуске конфигурации, т.е. в обработчиках событий
// - ПередНачаломРаботыСистемы,
// - ПриНачалеРаботыСистемы
//
Функция ПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	ЗапомнитьВременныеПараметры(Параметры);
	
	Если Параметры.ПолученныеПараметрыКлиента <> Неопределено Тогда
		Если НЕ Параметры.Свойство("ПропуститьОчисткуСкрытияРабочегоСтола") Тогда
			СкрытьРабочийСтолПриНачалеРаботыСистемы(Ложь);
		КонецЕсли;
	КонецЕсли;
	                             
	ПривилегированныйРежимУстановленПриЗапуске = ПривилегированныйРежим();
	
	УстановитьПривилегированныйРежим(Истина);
	Если ПараметрыСеанса.ПараметрыКлиентаНаСервере.Количество() = 0 Тогда
		// Первый серверный вызов с клиента при запуске.
		ПараметрыКлиента = Новый Соответствие;
		ПараметрыКлиента.Вставить("ПараметрЗапуска", Параметры.ПараметрЗапуска);
		ПараметрыКлиента.Вставить("СтрокаСоединенияИнформационнойБазы", Параметры.СтрокаСоединенияИнформационнойБазы);
		ПараметрыКлиента.Вставить("ПривилегированныйРежимУстановленПриЗапуске", ПривилегированныйРежимУстановленПриЗапуске);
		ПараметрыКлиента.Вставить("ЭтоВебКлиент",    Параметры.ЭтоВебКлиент);
		ПараметрыКлиента.Вставить("ЭтоLinuxКлиент", Параметры.ЭтоLinuxКлиент);
		ПараметрыСеанса.ПараметрыКлиентаНаСервере = Новый ФиксированноеСоответствие(ПараметрыКлиента);
			
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	ФиксированныеПараметры = ФиксированныеПараметрыКлиентаБезВременныхПараметров(Параметры);
	
	Возврат ФиксированныеПараметры;
		
КонецФункции

Процедура ЗапомнитьВременныеПараметры(Параметры)
	
	Параметры.Вставить("ИменаВременныхПараметров", Новый Массив);
	
	Для каждого КлючИЗначение Из Параметры Цикл
		Параметры.ИменаВременныхПараметров.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
КонецПроцедуры

Процедура СкрытьРабочийСтолПриНачалеРаботыСистемы(Скрыть = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущиеПараметры = Новый Соответствие(ПараметрыСеанса.ПараметрыКлиентаНаСервере);
	
	Если Скрыть = Истина Тогда
		ТекущиеПараметры.Вставить("СкрытьРабочийСтолПриНачалеРаботыСистемы", Истина);
		
	ИначеЕсли ТекущиеПараметры.Получить("СкрытьРабочийСтолПриНачалеРаботыСистемы") <> Неопределено Тогда
		ТекущиеПараметры.Удалить("СкрытьРабочийСтолПриНачалеРаботыСистемы");
	КонецЕсли;
	
	ПараметрыСеанса.ПараметрыКлиентаНаСервере = Новый ФиксированноеСоответствие(ТекущиеПараметры);
	
КонецПроцедуры

Функция ФиксированныеПараметрыКлиентаБезВременныхПараметров(Параметры)
	
	ПараметрыКлиента = Параметры;
	Параметры = Новый Структура;
	
	Для каждого ИмяВременногоПараметра Из ПараметрыКлиента.ИменаВременныхПараметров Цикл
		Параметры.Вставить(ИмяВременногоПараметра, ПараметрыКлиента[ИмяВременногоПараметра]);
		ПараметрыКлиента.Удалить(ИмяВременногоПараметра);
	КонецЦикла;
	Параметры.Удалить("ИменаВременныхПараметров");
	
	УстановитьПривилегированныйРежим(Истина);
	
	Параметры.СкрытьРабочийСтолПриНачалеРаботыСистемы =
		ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить(
			"СкрытьРабочийСтолПриНачалеРаботыСистемы") <> Неопределено;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ФиксированныеДанные(ПараметрыКлиента);
	
КонецФункции

// Фиксирует данные типов Структура, Соответствие, Массив с учетом вложенности.
//
// Параметры:
//  Данные - Структура, Соответствие, Массив - коллекции, значения которых являются примитивными типами,
//           хранилищем значения или не могут быть изменены. Поддерживаются типы значений:
//           Булево, Строка, Число, Дата, Неопределено, УникальныйИдентификатор, Null, Тип,
//           ХранилищеЗначения, ОбщийМодуль, ОбъектМетаданных, ТипЗначенияXDTO, ТипОбъектаXDTO,
//           ЛюбаяСсылка.
//
//  ВызыватьИсключение - Булево - начальное значение Истина. Когда установлено
//                       Ложь, тогда в случае наличия нефиксируемых данных исключение не будет
//                       вызвано, при этом данные будут зафиксированы на сколько возможно.
//
// Возвращаемое значение:
//  Фиксированные данные, аналогичные переданным в параметре Данные.
// 
Функция ФиксированныеДанные(Данные, ВызыватьИсключение = Истина) Экспорт
	
	Если ТипЗнч(Данные) = Тип("Массив") Тогда
		Массив = Новый Массив;
		
		//Индекс = Данные.Количество() - 1;
		
		Для каждого Значение Из Данные Цикл
			
			Если ТипЗнч(Значение) = Тип("Структура")
			 ИЛИ ТипЗнч(Значение) = Тип("Соответствие")
			 ИЛИ ТипЗнч(Значение) = Тип("Массив") Тогда
				
				Массив.Добавить(ФиксированныеДанные(Значение, ВызыватьИсключение));
			Иначе
				Если ВызыватьИсключение Тогда
					ПроверкаФиксированностиДанных(Значение, Истина);
				КонецЕсли;
				Массив.Добавить(Значение);
			КонецЕсли;
		КонецЦикла;
		
		Возврат Новый ФиксированныйМассив(Массив);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("Структура")
	      ИЛИ ТипЗнч(Данные) = Тип("Соответствие") Тогда
		
		Если ТипЗнч(Данные) = Тип("Структура") Тогда
			Коллекция = Новый Структура;
		Иначе
			Коллекция = Новый Соответствие;
		КонецЕсли;
		
		Для каждого КлючИЗначение Из Данные Цикл
			Значение = КлючИЗначение.Значение;
			
			Если ТипЗнч(Значение) = Тип("Структура")
			 ИЛИ ТипЗнч(Значение) = Тип("Соответствие")
			 ИЛИ ТипЗнч(Значение) = Тип("Массив") Тогда
				
				Коллекция.Вставить(
					КлючИЗначение.Ключ, ФиксированныеДанные(Значение, ВызыватьИсключение));
			Иначе
				Если ВызыватьИсключение Тогда
					ПроверкаФиксированностиДанных(Значение, Истина);
				КонецЕсли;
				Коллекция.Вставить(КлючИЗначение.Ключ, Значение);
			КонецЕсли;
		КонецЦикла;
		
		Если ТипЗнч(Данные) = Тип("Структура") Тогда
			Возврат Новый ФиксированнаяСтруктура(Коллекция);
		Иначе
			Возврат Новый ФиксированноеСоответствие(Коллекция);
		КонецЕсли;
		
	ИначеЕсли ВызыватьИсключение Тогда
		ПроверкаФиксированностиДанных(Данные);
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

Процедура ПроверкаФиксированностиДанных(Данные, ДанныеВЗначенииФиксированныхТипов = Ложь)
	
	ТипДанных = ТипЗнч(Данные);
	
	Если ТипДанных = Тип("ХранилищеЗначения")
	 ИЛИ ТипДанных = Тип("ФиксированныйМассив")
	 ИЛИ ТипДанных = Тип("ФиксированнаяСтруктура")
	 ИЛИ ТипДанных = Тип("ФиксированноеСоответствие") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если ДанныеВЗначенииФиксированныхТипов Тогда
		
		Если ТипДанных = Тип("Булево")
		 ИЛИ ТипДанных = Тип("Строка")
		 ИЛИ ТипДанных = Тип("Число")
		 ИЛИ ТипДанных = Тип("Дата")
		 ИЛИ ТипДанных = Тип("Неопределено")
		 ИЛИ ТипДанных = Тип("УникальныйИдентификатор")
		 ИЛИ ТипДанных = Тип("Null")
		 ИЛИ ТипДанных = Тип("Тип")
		 ИЛИ ТипДанных = Тип("ХранилищеЗначения")
		 ИЛИ ТипДанных = Тип("ОбщийМодуль")
		 ИЛИ ТипДанных = Тип("ОбъектМетаданных")
		 ИЛИ ТипДанных = Тип("ТипЗначенияXDTO")
		 ИЛИ ТипДанных = Тип("ТипОбъектаXDTO") Тогда
			
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Ошибка в функции ФиксированныеДанные общего модуля ОбщегоНазначения.
		           |Данные типа ""%1"" не могут быть зафиксированы.'"),
		Строка(ТипДанных) );
	
КонецПроцедуры

// Возвращает Истина, если привилегированный режим был установлен
// при запуске с помощью параметра UsePrivilegedMode.
//
// Поддерживается только при запуске клиентских приложений
// (внешнее соединение не поддерживается).
//
Функция ПривилегированныйРежимУстановленПриЗапуске() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить(
		"ПривилегированныйРежимУстановленПриЗапуске") = Истина;
	
КонецФункции

// Возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// 
//  Если доступа к реквизиту нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
//
// Функция не предназначена для получения значений реквизитов пустых ссылок.
// 
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//  ИмяРеквизита - Строка, например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
	
	Результат = ЗначенияРеквизитовОбъекта(Ссылка, ИмяРеквизита);
	Возврат Результат[СтрЗаменить(ИмяРеквизита, ".", "")];
	
КонецФункции 

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
//  Если доступа к одному из реквизитов нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Функция не предназначена для получения значений реквизитов пустых ссылок.
//
// Параметры:
//  Ссылка    - ЛюбаяСсылка - объект, значения реквизитов которого необходимо получить.
//
//  Реквизиты - Строка - имена реквизитов, перечисленные через запятую, в формате
//              требований к свойствам структуры.
//              Например, "Код, Наименование, Родитель".
//            - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//              псевдоним поля для возвращаемой структуры с результатом, а в качестве
//              значения (опционально) фактическое имя поля в таблице.
//              Если значение не определено, то имя поля берется из ключа.
//            - Массив, ФиксированныйМассив - имена реквизитов в формате требований
//              к свойствам структуры.
//
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных реквизитов.
//              Если строка затребованных реквизитов пуста, то возвращается пустая структура.
//              Если в качестве объекта передана пустая ссылка, то все реквизиты вернутся со значением Неопределено.
//
Функция ЗначенияРеквизитовОбъекта(Ссылка, Знач Реквизиты) Экспорт
	
	Если ТипЗнч(Реквизиты) = Тип("Строка") Тогда
		Если ПустаяСтрока(Реквизиты) Тогда
			Возврат Новый Структура;
		КонецЕсли;
		Реквизиты = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Реквизиты, ",");
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура;
	Если ТипЗнч(Реквизиты) = Тип("Структура") Или ТипЗнч(Реквизиты) = Тип("ФиксированнаяСтруктура") Тогда
		СтруктураРеквизитов = Реквизиты;
	ИначеЕсли ТипЗнч(Реквизиты) = Тип("Массив") Или ТипЗнч(Реквизиты) = Тип("ФиксированныйМассив") Тогда
		Для Каждого Реквизит Из Реквизиты Цикл
			СтруктураРеквизитов.Вставить(СтрЗаменить(Реквизит, ".", ""), Реквизит);
		КонецЦикла;
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неверный тип второго параметра Реквизиты: %1'"),
			Строка(ТипЗнч(Реквизиты)));
	КонецЕсли;
	
	ТекстПолей = "";
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		ИмяПоля   = ?(ЗначениеЗаполнено(КлючИЗначение.Значение),
		              СокрЛП(КлючИЗначение.Значение),
		              СокрЛП(КлючИЗначение.Ключ));
		
		Псевдоним = СокрЛП(КлючИЗначение.Ключ);
		
		ТекстПолей  = ТекстПолей + ?(ПустаяСтрока(ТекстПолей), "", ",") + "
		|	" + ИмяПоля + " КАК " + Псевдоним;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|" + ТекстПолей + "
	|ИЗ
	|	" + Ссылка.Метаданные().ПолноеИмя() + " КАК ПсевдонимЗаданнойТаблицы
	|ГДЕ
	|	ПсевдонимЗаданнойТаблицы.Ссылка = &Ссылка
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		Результат.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Результат;
	
КонецФункции

// Функция получает цвет стиля по имени элемента стиля
//
// Параметры:
// ИмяЦветаСтиля - Строка -  Имя элемента стиля.
//
// Возвращаемое значение:
// Цвет.
//
Функция ЦветСтиля(ИмяЦветаСтиля) Экспорт
	
	Возврат ЦветаСтиля[ИмяЦветаСтиля];
	
КонецФункции

Процедура ОбновитьИндексПолнотекстовогоПоиска() Экспорт
	ПолнотекстовыйПоиск.ОбновитьИндекс();
КонецПроцедуры

Процедура ОбновитьИсториюДанных() Экспорт
	ИсторияДанных.ОбновитьИсторию();
КонецПроцедуры

Функция ПолучитьЗаявкуПоНомеру(Номер) Экспорт
	
	ДлинаНомера	= СтрДлина(СокрЛП(Номер));
	Если ДлинаНомера = 5 Тогда
		Номер	= "SC-0" + Номер;	
	ИначеЕсли ДлинаНомера < 9 Тогда
		Номер	= "SC-" + Номер;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаявкаПользователя.Ссылка КАК Заявка
	|ИЗ
	|	Документ.ЗаявкаПользователя КАК ЗаявкаПользователя
	|ГДЕ
	|	ЗаявкаПользователя.Номер = &Номер";
	
	Запрос.УстановитьПараметр("Номер", Номер);
	
	РезультатЗапроса	= Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Документы.ЗаявкаПользователя.ПустаяСсылка();
	Иначе
		Выборка	= РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Заявка;
	КонецЕсли;
	 
КонецФункции

Функция ОбъединитьФорматированныеДокументы(ФД1, ФД2, ТекущийПользователь = Неопределено) Экспорт
	
	Если ТекущийПользователь = Неопределено Тогда
		ТекущийПользователь	= ПараметрыСеанса.ТекущийПользователь; 		
	КонецЕсли;
	
	
	Результат	= Новый ФорматированныйДокумент;
	
	Результат.Добавить(, Тип("ПереводСтрокиФорматированногоДокумента"));
	
	ТекстФорматированногоДокумента = Результат.Добавить("" + ТекущийПользователь + " /" + ТекущаяДатаСеанса() + "/", Тип("ТекстФорматированногоДокумента"));		
	ТекстФорматированногоДокумента.Шрифт				= Новый Шрифт(,10,,Истина);
	ТекстФорматированногоДокумента.НавигационнаяСсылка	= ПолучитьНавигационнуюСсылку(ТекущийПользователь);
	Результат.Добавить(, Тип("ПереводСтрокиФорматированногоДокумента"));
		
	Для Каждого Параграф Из ФД1.Элементы Цикл
		
		НовыйПараграф = Результат.Элементы.Добавить();
		
		НовыйПараграф.ГоризонтальноеПоложение	= Параграф.ГоризонтальноеПоложение;
		НовыйПараграф.МеждустрочныйИнтервал		= Параграф.МеждустрочныйИнтервал;
		НовыйПараграф.Отступ					= Параграф.Отступ;
		НовыйПараграф.ТипПараграфа				= Параграф.ТипПараграфа;
		
		Для Каждого ЭлементПараграфа Из Параграф.Элементы Цикл
			Если Тип(ЭлементПараграфа) = Тип("ТекстФорматированногоДокумента") Тогда
				НовыйТекст = НовыйПараграф.Элементы.Добавить(ЭлементПараграфа.Текст);
				НовыйТекст.НавигационнаяСсылка	= ЭлементПараграфа.НавигационнаяСсылка;
				НовыйТекст.ЦветТекста			= ЭлементПараграфа.ЦветТекста;
				НовыйТекст.ЦветФона				= ЭлементПараграфа.ЦветФона;
				НовыйТекст.Шрифт				= Новый Шрифт(ЭлементПараграфа.Шрифт);
			ИначеЕсли Тип(ЭлементПараграфа) = Тип("ПереводСтрокиФорматированногоДокумента") Тогда
				НовыйПараграф.Элементы.Добавить(, Тип("ПереводСтрокиФорматированногоДокумента"));
			ИначеЕсли Тип(ЭлементПараграфа) = Тип("КартинкаФорматированногоДокумента") Тогда
				Результат.Добавить(ЭлементПараграфа.Картинка, Тип("КартинкаФорматированногоДокумента"))				
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
		
	Результат.Добавить(, Тип("ПереводСтрокиФорматированногоДокумента"));
		
	Для Каждого Параграф Из ФД2.Элементы Цикл
		
		НовыйПараграф = Результат.Элементы.Добавить();
		
		НовыйПараграф.ГоризонтальноеПоложение	= Параграф.ГоризонтальноеПоложение;
		НовыйПараграф.МеждустрочныйИнтервал		= Параграф.МеждустрочныйИнтервал;
		НовыйПараграф.Отступ					= Параграф.Отступ;
		НовыйПараграф.ТипПараграфа				= Параграф.ТипПараграфа;
		
		Для Каждого ЭлементПараграфа Из Параграф.Элементы Цикл
			Если Тип(ЭлементПараграфа) = Тип("ТекстФорматированногоДокумента") Тогда
				НовыйТекст = НовыйПараграф.Элементы.Добавить(ЭлементПараграфа.Текст);
				НовыйТекст.НавигационнаяСсылка	= ЭлементПараграфа.НавигационнаяСсылка;
				НовыйТекст.ЦветТекста			= ЭлементПараграфа.ЦветТекста;
				НовыйТекст.ЦветФона				= ЭлементПараграфа.ЦветФона;
				НовыйТекст.Шрифт				= Новый Шрифт(ЭлементПараграфа.Шрифт);
			ИначеЕсли Тип(ЭлементПараграфа) = Тип("ПереводСтрокиФорматированногоДокумента") Тогда
				НовыйПараграф.Элементы.Добавить(, Тип("ПереводСтрокиФорматированногоДокумента"));
			ИначеЕсли Тип(ЭлементПараграфа) = Тип("КартинкаФорматированногоДокумента") Тогда
				Результат.Добавить(ЭлементПараграфа.Картинка, Тип("КартинкаФорматированногоДокумента"))				
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
		
	Возврат Результат;
	
КонецФункции

Функция ДобавитьКомментарийКФорматированномуДокументу(ФД, Заказчик = Неопределено, ЗаказчикТекст = "") Экспорт
	
	Если Заказчик = Неопределено Тогда
		Заказчик		= ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	ЗаказчикТекст	= ?(Заказчик.Пустая(), ЗаказчикТекст, "" + Заказчик);
	
	Результат	= Новый ФорматированныйДокумент;
	
	Результат.Добавить(, Тип("ПереводСтрокиФорматированногоДокумента"));
	
	ТекстФорматированногоДокумента = Результат.Добавить("" + ЗаказчикТекст + " /" + ТекущаяДатаСеанса() + "/", Тип("ТекстФорматированногоДокумента"));	
	ТекстФорматированногоДокумента.Шрифт				= Новый Шрифт(,10,,Истина);
	ТекстФорматированногоДокумента.НавигационнаяСсылка	= ПолучитьНавигационнуюСсылку(Заказчик);
	Результат.Добавить(, Тип("ПереводСтрокиФорматированногоДокумента"));
		
	Для Каждого Параграф Из ФД.Элементы Цикл
		
		НовыйПараграф = Результат.Элементы.Добавить();
		
		НовыйПараграф.ГоризонтальноеПоложение	= Параграф.ГоризонтальноеПоложение;
		НовыйПараграф.МеждустрочныйИнтервал		= Параграф.МеждустрочныйИнтервал;
		НовыйПараграф.Отступ					= Параграф.Отступ;
		НовыйПараграф.ТипПараграфа				= Параграф.ТипПараграфа;
		
		Для Каждого ЭлементПараграфа Из Параграф.Элементы Цикл
			Если Тип(ЭлементПараграфа) = Тип("ТекстФорматированногоДокумента") Тогда
				НовыйТекст = НовыйПараграф.Элементы.Добавить(ЭлементПараграфа.Текст);
				НовыйТекст.НавигационнаяСсылка	= ЭлементПараграфа.НавигационнаяСсылка;
				НовыйТекст.ЦветТекста			= ЭлементПараграфа.ЦветТекста;
				НовыйТекст.ЦветФона				= ЭлементПараграфа.ЦветФона;
				НовыйТекст.Шрифт				= Новый Шрифт(ЭлементПараграфа.Шрифт);
			ИначеЕсли Тип(ЭлементПараграфа) = Тип("ПереводСтрокиФорматированногоДокумента") Тогда
				НовыйПараграф.Элементы.Добавить(, Тип("ПереводСтрокиФорматированногоДокумента"));
			ИначеЕсли Тип(ЭлементПараграфа) = Тип("КартинкаФорматированногоДокумента") Тогда
				Результат.Добавить(ЭлементПараграфа.Картинка, Тип("КартинкаФорматированногоДокумента"))				
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Результат.Добавить(, Тип("ПереводСтрокиФорматированногоДокумента"));
		
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСписокОповещений() Экспорт
	
	СписокОповещений	= Новый Массив;
	
	пЗапрос	= Новый Запрос;
	пЗапрос.Текст	= "ВЫБРАТЬ
	             	  |	ОповещенияКОтправке.Период КАК Период,
	             	  |	ОповещенияКОтправке.Роль КАК Роль,
	             	  |	ОповещенияКОтправке.Пользователь КАК Пользователь,
	             	  |	ОповещенияКОтправке.Заявка КАК Заявка,
	             	  |	ОповещенияКОтправке.Текст КАК Текст,
	             	  |	ОповещенияКОтправке.Картинка КАК Картинка,
	             	  |	ОповещенияКОтправке.Пояснение КАК Пояснение
	             	  |ИЗ
	             	  |	РегистрСведений.ОповещенияКОтправке КАК ОповещенияКОтправке
	             	  |ГДЕ
	             	  |	ОповещенияКОтправке.Роль В(&МассивРолей)
	             	  |	И (ОповещенияКОтправке.ДатаОповещения = ДАТАВРЕМЯ(1, 1, 1)
	             	  |			ИЛИ ОповещенияКОтправке.ДатаОповещения < &НачалоСеансаПользователя)
	             	  |
	             	  |ОБЪЕДИНИТЬ ВСЕ
	             	  |
	             	  |ВЫБРАТЬ
	             	  |	ОповещенияКОтправке.Период,
	             	  |	ОповещенияКОтправке.Роль,
	             	  |	ОповещенияКОтправке.Пользователь,
	             	  |	ОповещенияКОтправке.Заявка,
	             	  |	ОповещенияКОтправке.Текст,
	             	  |	ОповещенияКОтправке.Картинка,
	             	  |	ОповещенияКОтправке.Пояснение
	             	  |ИЗ
	             	  |	РегистрСведений.ОповещенияКОтправке КАК ОповещенияКОтправке
	             	  |ГДЕ
	             	  |	ОповещенияКОтправке.Пользователь = &Пользователь
	             	  |	И (ОповещенияКОтправке.ДатаОповещения = ДАТАВРЕМЯ(1, 1, 1)
	             	  |			ИЛИ ОповещенияКОтправке.ДатаОповещения < &НачалоСеансаПользователя)
	             	  |
	             	  |УПОРЯДОЧИТЬ ПО
	             	  |	Период";
	
	пЗапрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	пЗапрос.УстановитьПараметр("НачалоСеансаПользователя", ПараметрыСеанса.НачалоСеансаПользователя);
	
	МассивРолей	= Новый Массив;
	ПользовательИБ	= ПользователиИнформационнойБазы.ТекущийПользователь();
	Для Каждого РольПользователия Из ПользовательИБ.Роли Цикл
		МассивРолей.Добавить(РольПользователия.Имя);		
	КонецЦикла;
	пЗапрос.УстановитьПараметр("МассивРолей", МассивРолей);
	
	РезультатЗапроса	= пЗапрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка	= РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СтруктураОповещения	= Новый Структура;
			
			СтруктураОповещения.Вставить("Текст", СокрЛП(Выборка.Текст));
			СтруктураОповещения.Вставить("Заявка", Выборка.Заявка);			
			СтруктураОповещения.Вставить("Картинка", Выборка.Картинка);
			СтруктураОповещения.Вставить("Пояснение", СокрЛП(Выборка.Пояснение));
			
			СписокОповещений.Добавить(СтруктураОповещения);	
			
			Запись	= РегистрыСведений.ОповещенияКОтправке.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.Прочитать();
			Запись.ДатаОповещения	= ТекущаяДатаСеанса();
			
			Если Выборка.Картинка = "Очки" Тогда
				Запись.Удалить();
			Иначе	
				Запись.Записать();
			КонецЕсли;
			
		КонецЦикла; 
		
	КонецЕсли;
	
	Возврат СписокОповещений;
	
КонецФункции

Процедура ДобавитьОповещениеВФоне(Параметры) Экспорт
	ПередаваемыеПараметры	= Новый Массив;	
	ПередаваемыеПараметры.Добавить(Параметры);
	ФоновыеЗадания.Выполнить("ОбщегоНазначенияСервер.ДобавитьОповещение", ПередаваемыеПараметры, Новый УникальныйИдентификатор, "ЗаписатьОповещение");		
КонецПроцедуры

Процедура ДобавитьОповещение(Параметры) Экспорт
	
	Если ТипЗнч(Параметры) = Тип("Структура") Тогда
		
		Если Не Параметры.Свойство("Заявка") Тогда
			Параметры.Вставить("Заявка", Документы.ЗаявкаПользователя.ПустаяСсылка());
		КонецЕсли;
		Если Не Параметры.Свойство("Событие") Тогда
			Параметры.Вставить("Событие", "");
		КонецЕсли;
		Если Не Параметры.Свойство("СобытиеEmail") Тогда
			Параметры.Вставить("СобытиеEmail", "");
		КонецЕсли;  		
		Если Не Параметры.Свойство("АдресацияРоль") Тогда
			Параметры.Вставить("АдресацияРоль", "");
		КонецЕсли;
		Если Не Параметры.Свойство("АдресацияПользователь") Тогда
			Параметры.Вставить("АдресацияПользователь", Справочники.Пользователи.ПустаяСсылка());
		КонецЕсли;
		Если Не Параметры.Свойство("Автор") Тогда
			Параметры.Вставить("Автор", Справочники.Пользователи.ПустаяСсылка());
		КонецЕсли;
		Если Не Параметры.Свойство("ПользовательИБ") Тогда
			Параметры.Вставить("ПользовательИБ", Неопределено);
		КонецЕсли;
		Если Не Параметры.Свойство("ДляВнутреннегоИспользования") Тогда
			Параметры.Вставить("ДляВнутреннегоИспользования", Ложь);
		КонецЕсли;		
						
		Если Параметры.Автор <> Параметры.АдресацияПользователь Тогда
			
			пДобавитьОповещение	= Истина;
			
			Если Параметры.ПользовательИБ <> Неопределено Тогда
				Для Каждого РольПользователия Из Параметры.ПользовательИБ.Роли Цикл
					Если Параметры.АдресацияРоль = РольПользователия.Имя Тогда
						пДобавитьОповещение	= Ложь;	
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если пДобавитьОповещение Тогда
				
				Запись	= Неопределено;
				
				Если Параметры.Событие <> "" Тогда
					УдалитьОповещение(Параметры.Заявка, Параметры.АдресацияПользователь, Параметры.ПользовательИБ);
					
					Картинка	= ПолучитьКартинкуОповещенияПоСобытию(Параметры.Событие);
					
					Запись	= РегистрыСведений.ОповещенияКОтправке.СоздатьМенеджерЗаписи();			
					Запись.Период		= ТекущаяДата();
					Запись.Роль			= Параметры.АдресацияРоль;
					Запись.Пользователь	= Параметры.АдресацияПользователь;
					Запись.Заявка		= Параметры.Заявка;		
					Запись.Пояснение	= Параметры.Заявка;
					Запись.Текст		= Параметры.Событие;
					Запись.Картинка		= Картинка;
					Запись.Записать();
				КонецЕсли;
				
				Если Параметры.СобытиеEmail  <> "" И Не Параметры.АдресацияПользователь.НеОтправлятьОповещенияНаПочту Тогда
					ЭлектроннаяПочта.ОтправитьПисьмоПоЗаявке(Параметры.Заявка, Параметры.СобытиеEmail, Запись, Параметры.АдресацияПользователь, Параметры.ДляВнутреннегоИспользования);
				КонецЕсли;
				
				Для Каждого СтрокаТЧ Из Параметры.Заявка.Наблюдатели Цикл
					
					Если Параметры.Автор <> СтрокаТЧ.Наблюдатель И Параметры.АдресацияПользователь <> СтрокаТЧ.Наблюдатель Тогда 
						
						Запись	= Неопределено;
						
						Если Параметры.Событие <> "" Тогда
							Запись	= РегистрыСведений.ОповещенияКОтправке.СоздатьМенеджерЗаписи();
							Запись.Период		= ТекущаяДатаСеанса();
							Запись.Роль			= Параметры.АдресацияРоль;
							Запись.Пользователь = СтрокаТЧ.Наблюдатель;
							Запись.Заявка		= Параметры.Заявка;
							Запись.Пояснение	= Параметры.Заявка;
							Запись.Текст		= Параметры.Событие;
							Запись.Картинка		= "Очки";//Для наблюдателей всегда очки
							Запись.Записать();
						КонецЕсли;
						
						Если Параметры.СобытиеEmail  <> "" И Параметры.СобытиеEmail  <> "ОтправитьОповещениеНаПочту" И Не СтрокаТЧ.Наблюдатель.НеОтправлятьОповещенияНаПочту Тогда
							ЭлектроннаяПочта.ОтправитьПисьмоПоЗаявке(Параметры.Заявка, Параметры.СобытиеEmail, Запись, СтрокаТЧ.Наблюдатель, Параметры.ДляВнутреннегоИспользования);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

Процедура ДобавитьОповещениеПоЗаявке(Заявка) Экспорт
	
	СтруктураОтвета	= ОбщегоНазначенияСервер.ПолучитьСостояниеЗаявки(Заявка);
	
	СостояниеЗаявки			= СтруктураОтвета.СостояниеЗаявки;
	СостояниеЗаявкиСтарое	= СтруктураОтвета.СостояниеЗаявкиСтарое;	
	АдресацияПользователь	= Неопределено;
	
	Если СостояниеЗаявки = Справочники.СостоянияЗаявки.Зарегистрирована Тогда
		Событие					= "";
		СобытиеEmail			= "ЗаявкаЗарегистированна";
		АдресацияРоль			= "";
		АдресацияПользователь	= Заявка.Заказчик;
	ИначеЕсли СостояниеЗаявки = Справочники.СостоянияЗаявки.Отменена Тогда
		Событие					= "";
		СобытиеEmail			= "ЗаявкаОтклонена";
		АдресацияРоль			= "";
		АдресацияПользователь	= Заявка.Заказчик;	
	ИначеЕсли СостояниеЗаявки = Справочники.СостоянияЗаявки.НаСогласовании Тогда
		Событие					= "Согласуйте заявку";
		СобытиеEmail			= "";
		АдресацияРоль			= "Администратор";
		АдресацияПользователь	= Справочники.Пользователи.ПустаяСсылка();			
	ИначеЕсли СостояниеЗаявки = Справочники.СостоянияЗаявки.ПереданаКИсполнению Тогда
		Событие					= "Возьмите заявку в работу";
		СобытиеEmail			= "ОтправитьОповещениеНаПочту";
		АдресацияРоль			= "";
		АдресацияПользователь	= Заявка.Исполнитель;
	ИначеЕсли СостояниеЗаявки = Справочники.СостоянияЗаявки.Выполнена Тогда
		Событие					= "Закройте заявку";
		СобытиеEmail			= "ЗаявкаВыполнена";
		АдресацияРоль			= "";
		АдресацияПользователь	= Заявка.Заказчик;
	ИначеЕсли СостояниеЗаявки = Справочники.СостоянияЗаявки.НаПроверке Тогда
		Событие					= "Проверьте заявку";
		СобытиеEmail			= "ОтправитьОповещениеНаПочту";
		АдресацияРоль			= "";
		АдресацияПользователь	= Заявка.Тестировщик;			
	ИначеЕсли Ложь			
		Или (Истина
			И СостояниеЗаявки = Справочники.СостоянияЗаявки.ВРаботе 
			И СостояниеЗаявкиСтарое = Справочники.СостоянияЗаявки.Выполнена
		)
		Или (Истина
			И СостояниеЗаявки = Справочники.СостоянияЗаявки.ВРаботе 
			И СостояниеЗаявкиСтарое = Справочники.СостоянияЗаявки.НаПроверке
		)	
	Тогда
		Событие					= "Исправьте ошибки";
		СобытиеEmail			= "ОтправитьОповещениеНаПочту";
		АдресацияРоль			= "";
		АдресацияПользователь	= Заявка.Исполнитель;	
	КонецЕсли;
	
	Если ТипЗнч(АдресацияПользователь) <> Тип("Неопределено") Тогда
		Параметры	= Новый Структура;
		Параметры.Вставить("Заявка", Заявка);
		Параметры.Вставить("Событие", Событие);
		Параметры.Вставить("СобытиеEmail", СобытиеEmail);
		Параметры.Вставить("АдресацияРоль", АдресацияРоль);
		Параметры.Вставить("АдресацияПользователь", АдресацияПользователь);
		Параметры.Вставить("Автор", ПараметрыСеанса.ТекущийПользователь);
		Параметры.Вставить("ПользовательИБ", ПользователиИнформационнойБазы.ТекущийПользователь());
		Параметры.Вставить("ДляВнутреннегоИспользования", Ложь);		
		ОбщегоНазначенияСервер.ДобавитьОповещениеВФоне(Параметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьОповещениеВФоне(Заявка, Пользователь = Неопределено, ПользовательИБ = Неопределено) Экспорт
	ПередаваемыеПараметры	= Новый Массив;
	ПередаваемыеПараметры.Добавить(Заявка);
	ПередаваемыеПараметры.Добавить(?(Пользователь = Неопределено, ПараметрыСеанса.ТекущийПользователь, Пользователь));
	ПередаваемыеПараметры.Добавить(?(ПользовательИБ = Неопределено, ПользователиИнформационнойБазы.ТекущийПользователь(),ПользовательИБ));
	ФоновыеЗадания.Выполнить("ОбщегоНазначенияСервер.УдалитьОповещение", ПередаваемыеПараметры, Новый УникальныйИдентификатор, "УдалитьОповещение");
КонецПроцедуры

Процедура УдалитьОповещение(Заявка, Пользователь, ПользовательИБ = Неопределено) Экспорт
		
	пЗапрос	= Новый Запрос;
	пЗапрос.Текст	= "ВЫБРАТЬ
	             	  |	ОповещенияКОтправке.Период КАК Период,
	             	  |	ОповещенияКОтправке.Роль КАК Роль,
	             	  |	ОповещенияКОтправке.Пользователь КАК Пользователь,
	             	  |	ОповещенияКОтправке.Заявка КАК Заявка
	             	  |ИЗ
	             	  |	РегистрСведений.ОповещенияКОтправке КАК ОповещенияКОтправке
	             	  |ГДЕ
	             	  |	ОповещенияКОтправке.Заявка = &Заявка
	             	  |	И ОповещенияКОтправке.Роль В(&МассивРолей)
	             	  |
	             	  |ОБЪЕДИНИТЬ ВСЕ
	             	  |
	             	  |ВЫБРАТЬ
	             	  |	ОповещенияКОтправке.Период,
	             	  |	ОповещенияКОтправке.Роль,
	             	  |	ОповещенияКОтправке.Пользователь,
	             	  |	ОповещенияКОтправке.Заявка
	             	  |ИЗ
	             	  |	РегистрСведений.ОповещенияКОтправке КАК ОповещенияКОтправке
	             	  |ГДЕ
	             	  |	ОповещенияКОтправке.Заявка = &Заявка
	             	  |	И ОповещенияКОтправке.Пользователь = &Пользователь";
	
	пЗапрос.УстановитьПараметр("Заявка", Заявка);
	пЗапрос.УстановитьПараметр("Пользователь", Пользователь);
	
	МассивРолей	= Новый Массив;	
	Если ПользовательИБ <> Неопределено Тогда
		Для Каждого РольПользователия Из ПользовательИБ.Роли Цикл
			МассивРолей.Добавить(РольПользователия.Имя);		
		КонецЦикла;
	КонецЕсли;
	пЗапрос.УстановитьПараметр("МассивРолей", МассивРолей);
	
	РезультатЗапроса	= пЗапрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка	= РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Запись	= РегистрыСведений.ОповещенияКОтправке.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.Прочитать();
			Запись.Удалить();
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры

Процедура УдалитьВсеОповещенияВФоне(Заявка) Экспорт
	ПередаваемыеПараметры	= Новый Массив;	
	ПередаваемыеПараметры.Добавить(Заявка);
	ФоновыеЗадания.Выполнить("ОбщегоНазначенияСервер.УдалитьВсеОповещения", ПередаваемыеПараметры, Новый УникальныйИдентификатор, "УдалитьВсеОповещения");
КонецПроцедуры

Процедура УдалитьВсеОповещения(Заявка) Экспорт
		
	пЗапрос	= Новый Запрос;
	пЗапрос.Текст	= "ВЫБРАТЬ
	             	  |	ОповещенияКОтправке.Период КАК Период,
	             	  |	ОповещенияКОтправке.Роль КАК Роль,
	             	  |	ОповещенияКОтправке.Пользователь КАК Пользователь,
	             	  |	ОповещенияКОтправке.Заявка КАК Заявка
	             	  |ИЗ
	             	  |	РегистрСведений.ОповещенияКОтправке КАК ОповещенияКОтправке
	             	  |ГДЕ
	             	  |	ОповещенияКОтправке.Заявка = &Заявка";
	
	пЗапрос.УстановитьПараметр("Заявка", Заявка);
	
	РезультатЗапроса	= пЗапрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка	= РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Запись	= РегистрыСведений.ОповещенияКОтправке.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.Прочитать();
			Запись.Удалить();
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры

Функция ПолучитьКартинкуОповещенияПоСобытию(Событие)
	
	Картинка	= "";
	
	Если Событие = "Возьмите заявку в работу" Тогда
		Картинка	= "Работа";
	ИначеЕсли Событие = "Закройте заявку" Тогда				
		Картинка	= "Звезда";
	ИначеЕсли Событие = "Согласуйте заявку" Тогда				
		Картинка		= "Стрелки";
	ИначеЕсли Событие = "Проверьте заявку" Тогда				
		Картинка		= "Флаг";
	ИначеЕсли Событие = "Ответьте на вопрос по заявке" Тогда				
		Картинка		= "Вопрос";
	ИначеЕсли Событие = "Добавлен комментарий" Тогда				
		Картинка		= "Конверт";
	ИначеЕсли Событие = "Исправьте ошибки" Тогда	
		Картинка	= "Работа";		
	КонецЕсли;

	Возврат Картинка;
	
КонецФункции

Функция ПолучитьИмяВременногоФайлаСервер(Расширение) Экспорт
	Возврат ПолучитьИмяВременногоФайла(Расширение);	
КонецФункции

Функция ИзменитьСостояниеЗаявки(Заявка, СостояниеЗаявки) Экспорт
	
	Если ТипЗнч(СостояниеЗаявки) = Тип("Строка") Тогда
		СостояниеЗаявки	= Справочники.СостоянияЗаявки[СостояниеЗаявки];
	КонецЕсли;
	
	ИзменениеСостоянияЗаявки	= Документы.ИзменениеСостоянияЗаявки.СоздатьДокумент();
	ИзменениеСостоянияЗаявки.Дата	= ТекущаяДатаСеанса();
	ИзменениеСостоянияЗаявки.АвторИзменения			= ПараметрыСеанса.ТекущийПользователь;
	ИзменениеСостоянияЗаявки.Заявка					= Заявка;
	ИзменениеСостоянияЗаявки.СостояниеЗаявкиСтарое	= ОбщегоНазначенияСервер.ПолучитьСостояниеЗаявки(Заявка).СостояниеЗаявки;	
	ИзменениеСостоянияЗаявки.СостояниеЗаявки		= СостояниеЗаявки;
	
	Если ИзменениеСостоянияЗаявки.СостояниеЗаявкиСтарое <> ИзменениеСостоянияЗаявки.СостояниеЗаявки Тогда 
		ИзменениеСостоянияЗаявки.Записать(РежимЗаписиДокумента.Проведение);
		РаботаСБизнесПроцессами.ОбработатьСобытияДокумента("ИзмененоСостояниеЗаявки", Заявка);
	КонецЕсли;
	
	Если СостояниеЗаявки = Справочники.СостоянияЗаявки.Зарегистрирована И ИзменениеСостоянияЗаявки.СостояниеЗаявкиСтарое = Справочники.СостоянияЗаявки.Закрыта Тогда
		БП	= БизнесПроцессы.ОбработкаЗаявки.СоздатьБизнесПроцесс();
		БП.Дата					= ТекущаяДатаСеанса();
		БП.ЗаявкаПользователя	= Заявка;			
		БП.Записать();
		БП.Старт();
	КонецЕсли;
	
	Возврат СостояниеЗаявки;
	
КонецФункции

Функция ПолучитьСостояниеЗаявки(Заявка) Экспорт
	
	СтруктураОтвета	= Новый Структура;
	
	пЗапрос	= Новый Запрос;
	пЗапрос.Текст	= "ВЫБРАТЬ
	             	  |	СтатусыЗаявокОстатки.СостояниеЗаявки КАК СостояниеЗаявки,
	             	  |	СтатусыЗаявокОстатки.СостояниеЗаявкиСтарое КАК СостояниеЗаявкиСтарое
	             	  |ИЗ
	             	  |	РегистрНакопления.СтатусыЗаявок.Остатки(, Заявка = &Заявка) КАК СтатусыЗаявокОстатки";
	
	пЗапрос.УстановитьПараметр("Заявка", Заявка);
	РезультатЗапроса	= пЗапрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		СтруктураОтвета.Вставить("СостояниеЗаявки", Справочники.СостоянияЗаявки.Закрыта);
		СтруктураОтвета.Вставить("СостояниеЗаявкиСтарое", Справочники.СостоянияЗаявки.ПустаяСсылка());		
	Иначе
		Выборка	= РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		СтруктураОтвета.Вставить("СостояниеЗаявки", Выборка.СостояниеЗаявки);
		СтруктураОтвета.Вставить("СостояниеЗаявкиСтарое", Выборка.СостояниеЗаявкиСтарое);
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

Процедура ЗакрытьПросроченныеЗаявки() Экспорт
	
	МассивСостоянией	= Новый Массив;	
	МассивСостоянией.Добавить(Справочники.СостоянияЗаявки.Выполнена);
	МассивСостоянией.Добавить(Справочники.СостоянияЗаявки.Отменена);	
	
	пЗапрос	= Новый Запрос;
	пЗапрос.Текст	= "ВЫБРАТЬ РАЗЛИЧНЫЕ
	             	  |	СтатусыЗаявокОстатки.Заявка КАК Заявка
	             	  |ИЗ
	             	  |	РегистрНакопления.СтатусыЗаявок.Остатки(, СостояниеЗаявки В (&МассивСостоянией)) КАК СтатусыЗаявокОстатки
	             	  |		ЛЕВОЕ СОЕДИНЕНИЕ Задача.СлужебнаяЗадача КАК СлужебнаяЗадача
	             	  |		ПО СтатусыЗаявокОстатки.Заявка = СлужебнаяЗадача.ЗаявкаПользователя
	             	  |			И (СлужебнаяЗадача.Выполнена = ЛОЖЬ)
	             	  |ГДЕ
	             	  |	РАЗНОСТЬДАТ(СлужебнаяЗадача.СрокИсполнения, &ТекущаяДата, ДЕНЬ) > &ДнейОтклонения";
					  
					  
	пЗапрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	пЗапрос.УстановитьПараметр("ДнейОтклонения", 30);
	пЗапрос.УстановитьПараметр("МассивСостоянией", МассивСостоянией);	
	
	Выборка	= пЗапрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл		
		ОбщегоНазначенияСервер.ИзменитьСостояниеЗаявки(Выборка.Заявка, "Закрыта");		
	КонецЦикла;	
	
КонецПроцедуры
