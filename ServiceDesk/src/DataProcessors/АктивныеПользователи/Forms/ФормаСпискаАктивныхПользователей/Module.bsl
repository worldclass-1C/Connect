&НаКлиенте
Перем ПараметрыАдминистрирования, ЗапрашиватьПараметрыАдминистрированияИБ;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();

	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	Параметры.Свойство("ОповещатьОЗакрытии", ОповещатьОЗакрытии);

	НомерСеансаИнформационнойБазы = НомерСеансаИнформационнойБазы();
	УсловноеОформление.Элементы[0].Отбор.Элементы[0].ПравоеЗначение = НомерСеансаИнформационнойБазы;

	Если ОбщегоНазначенияСервер.ИнформационнаяБазаФайловая()
		Или Не ((Не УправлениеПользователямиСервер.СеансЗапущенБезРазделителей()
		И Привилегированный.ЭтоПолноправныйПользователь()) Или Привилегированный.ЭтоПолноправныйПользователь( ,
		Истина)) Тогда

		Элементы.ЗавершитьСеанс.Видимость = Ложь;
		Элементы.ЗавершитьСеансКонтекст.Видимость = Ложь;

	КонецЕсли;

	ИмяКолонкиСортировки = "НачалоРаботы";
	НаправлениеСортировки = "Возр";

	ЗаполнитьСписокВыбораФильтраСоединений();
	Если Параметры.Свойство("ОтборИмяПриложения") Тогда
		Если Элементы.ОтборИмяПриложения.СписокВыбора.НайтиПоЗначению(Параметры.ОтборИмяПриложения) <> Неопределено Тогда
			ОтборИмяПриложения = Параметры.ОтборИмяПриложения;
		КонецЕсли;
	КонецЕсли;

	ЗаполнитьСписокПользователей();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ЗапрашиватьПараметрыАдминистрированияИБ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	Если ОповещатьОЗакрытии Тогда
		ОповещатьОЗакрытии = Ложь;
		ОповеститьОВыборе(Неопределено);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборИмяПриложенияПриИзменении(Элемент)
	ЗаполнитьСписок();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ СписокПользователей

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьВыполнить()

	ЗаполнитьСписок();

КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоВозрастанию()

	СортировкаПоКолонке("Возр");

КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоУбыванию()

	СортировкаПоКолонке("Убыв");

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокПользователей.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокПользователей.Сеанс");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.ШрифтДиалоговИМеню, , , Истина,
		Ложь, Ложь, Ложь, ));

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписок()
	
	// Для восстановления позиции запомним текущий сеанс
	ТекущийСеанс = Неопределено;
	ТекущиеДанные = Элементы.СписокПользователей.ТекущиеДанные;

	Если ТекущиеДанные <> Неопределено Тогда
		ТекущийСеанс = ТекущиеДанные.Сеанс;
	КонецЕсли;

	ЗаполнитьСписокПользователей();
	
	// Восстанавливаем текущую строку по сохраненному сеансу
	Если ТекущийСеанс <> Неопределено Тогда
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Сеанс", ТекущийСеанс);
		НайденныеСеансы = СписокПользователей.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСеансы.Количество() = 1 Тогда
			Элементы.СписокПользователей.ТекущаяСтрока = НайденныеСеансы[0].ПолучитьИдентификатор();
			Элементы.СписокПользователей.ВыделенныеСтроки.Очистить();
			Элементы.СписокПользователей.ВыделенныеСтроки.Добавить(Элементы.СписокПользователей.ТекущаяСтрока);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СортировкаПоКолонке(Направление)

	Колонка = Элементы.СписокПользователей.ТекущийЭлемент;
	Если Колонка = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяКолонкиСортировки = Колонка.Имя;
	НаправлениеСортировки = Направление;

	ЗаполнитьСписок();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораФильтраСоединений()
	ИменаПриложений = Новый Массив;
	ИменаПриложений.Добавить("1CV8");
	ИменаПриложений.Добавить("1CV8C");
	ИменаПриложений.Добавить("WebClient");
	ИменаПриложений.Добавить("Designer");
	ИменаПриложений.Добавить("COMConnection");
	ИменаПриложений.Добавить("WSConnection");
	ИменаПриложений.Добавить("BackgroundJob");
	ИменаПриложений.Добавить("SystemBackgroundJob");
	ИменаПриложений.Добавить("SrvrConsole");
	ИменаПриложений.Добавить("COMConsole");
	ИменаПриложений.Добавить("JobScheduler");
	ИменаПриложений.Добавить("Debugger");
	ИменаПриложений.Добавить("OpenIDProvider");
	ИменаПриложений.Добавить("RAS");

	СписокВыбора = Элементы.ОтборИмяПриложения.СписокВыбора;
	Для Каждого ИмяПриложения Из ИменаПриложений Цикл
		СписокВыбора.Добавить(ИмяПриложения, ПредставлениеПриложения(ИмяПриложения));
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПользователей()

	СписокПользователей.Очистить();

	СеансыИнформационнойБазы = ПолучитьСеансыИнформационнойБазы();
	КоличествоАктивныхПользователей = СеансыИнформационнойБазы.Количество();

	ФильтроватьИменаПриложений = ЗначениеЗаполнено(ОтборИмяПриложения);
	Если ФильтроватьИменаПриложений Тогда
		ИменаПриложений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОтборИмяПриложения, ",");
	КонецЕсли;

	Для Каждого СеансИБ Из СеансыИнформационнойБазы Цикл
		Если ФильтроватьИменаПриложений И ИменаПриложений.Найти(СеансИБ.ИмяПриложения) = Неопределено Тогда
			КоличествоАктивныхПользователей = КоличествоАктивныхПользователей - 1;
			Продолжить;
		КонецЕсли;

		СтрПользователя = СписокПользователей.Добавить();

		СтрПользователя.Приложение   = ПредставлениеПриложения(СеансИБ.ИмяПриложения);
		СтрПользователя.НачалоРаботы = СеансИБ.НачалоСеанса;
		СтрПользователя.Компьютер    = СеансИБ.ИмяКомпьютера;
		СтрПользователя.Сеанс        = СеансИБ.НомерСеанса;
		СтрПользователя.Соединение   = СеансИБ.НомерСоединения;

		Если ТипЗнч(СеансИБ.Пользователь) = Тип("ПользовательИнформационнойБазы") И ЗначениеЗаполнено(
			СеансИБ.Пользователь.Имя) Тогда

			СтрПользователя.Пользователь        = СеансИБ.Пользователь.Имя;
			СтрПользователя.ИмяПользователя     = СеансИБ.Пользователь.Имя;
			СтрПользователя.ПользовательСсылка  = НайтиСсылкуПоИдентификаторуПользователя(
				СеансИБ.Пользователь.УникальныйИдентификатор);

			Если Привилегированный.ЭтоПолноправныйПользователь( , Истина) Тогда

				СтрПользователя.РазделениеДанных = ЗначенияРазделителейДанныхВСтроку(
					СеансИБ.Пользователь.РазделениеДанных);
			КонецЕсли;

		Иначе
//			СвойстваНеУказанного = УправлениеПользователями.СвойстваНеуказанногоПользователя();
//			СтрПользователя.Пользователь       = СвойстваНеУказанного.ПолноеИмя;
//			СтрПользователя.ИмяПользователя    = "";
//			СтрПользователя.ПользовательСсылка = СвойстваНеУказанного.Ссылка;
		КонецЕсли;

		Если СеансИБ.НомерСеанса = НомерСеансаИнформационнойБазы Тогда
			СтрПользователя.НомерРисункаПользователя = 0;
		Иначе
			СтрПользователя.НомерРисункаПользователя = 1;
		КонецЕсли;

	КонецЦикла;

	СписокПользователей.Сортировать(ИмяКолонкиСортировки + " " + НаправлениеСортировки);

КонецПроцедуры

&НаСервере
Функция ЗначенияРазделителейДанныхВСтроку(РазделениеДанных)

	Результат = "";
	Значение = "";
	Если РазделениеДанных.Свойство("ОбластьДанных", Значение) Тогда
		Результат = Строка(Значение);
	КонецЕсли;

	ЕстьДругиеРазделители = Ложь;
	Для Каждого Разделитель Из РазделениеДанных Цикл
		Если Разделитель.Ключ = "ОбластьДанных" Тогда
			Продолжить;
		КонецЕсли;
		Если Не ЕстьДругиеРазделители Тогда
			Если Не ПустаяСтрока(Результат) Тогда
				Результат = Результат + " ";
			КонецЕсли;
			Результат = Результат + "(";
		КонецЕсли;
		Результат = Результат + Строка(Разделитель.Значение);
		ЕстьДругиеРазделители = Истина;
	КонецЦикла;
	Если ЕстьДругиеРазделители Тогда
		Результат = Результат + ")";
	КонецЕсли;
	Возврат Результат;

КонецФункции

&НаСервере
Функция НайтиСсылкуПоИдентификаторуПользователя(Идентификатор)

	Запрос = Новый Запрос;

	ШаблонТекстаЗапроса = "ВЫБРАТЬ
						  |	Ссылка КАК Ссылка
						  |ИЗ
						  |	%1
						  |ГДЕ
						  |	ИдентификаторПользователяИБ = &Идентификатор";

	ТекстЗапросаПоПользователям = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонТекстаЗапроса, "Справочник.Пользователи");

	ТекстЗапросаПоВнешнимПользователям = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонТекстаЗапроса, "Справочник.ВнешниеПользователи");

	Запрос.Текст = ТекстЗапросаПоПользователям;
	Запрос.Параметры.Вставить("Идентификатор", Идентификатор);
	Результат = Запрос.Выполнить();

	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;

	Запрос.Текст = ТекстЗапросаПоВнешнимПользователям;
	Результат = Запрос.Выполнить();

	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;

	Возврат Справочники.Пользователи.ПустаяСсылка();

КонецФункции

#КонецОбласти